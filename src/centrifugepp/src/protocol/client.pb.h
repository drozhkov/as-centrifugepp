// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protocol/client.proto
// Protobuf C++ Version: 5.29.3

#ifndef protocol_2fclient_2eproto_2epb_2eh
#define protocol_2fclient_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protocol_2fclient_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2fclient_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_protocol_2fclient_2eproto;
namespace centrifugal {
namespace centrifuge {
namespace protocol {
class ClientInfo;
struct ClientInfoDefaultTypeInternal;
extern ClientInfoDefaultTypeInternal _ClientInfo_default_instance_;
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Connect;
struct ConnectDefaultTypeInternal;
extern ConnectDefaultTypeInternal _Connect_default_instance_;
class ConnectRequest;
struct ConnectRequestDefaultTypeInternal;
extern ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
class ConnectRequest_HeadersEntry_DoNotUse;
struct ConnectRequest_HeadersEntry_DoNotUseDefaultTypeInternal;
extern ConnectRequest_HeadersEntry_DoNotUseDefaultTypeInternal _ConnectRequest_HeadersEntry_DoNotUse_default_instance_;
class ConnectRequest_SubsEntry_DoNotUse;
struct ConnectRequest_SubsEntry_DoNotUseDefaultTypeInternal;
extern ConnectRequest_SubsEntry_DoNotUseDefaultTypeInternal _ConnectRequest_SubsEntry_DoNotUse_default_instance_;
class ConnectResult;
struct ConnectResultDefaultTypeInternal;
extern ConnectResultDefaultTypeInternal _ConnectResult_default_instance_;
class ConnectResult_SubsEntry_DoNotUse;
struct ConnectResult_SubsEntry_DoNotUseDefaultTypeInternal;
extern ConnectResult_SubsEntry_DoNotUseDefaultTypeInternal _ConnectResult_SubsEntry_DoNotUse_default_instance_;
class Connect_SubsEntry_DoNotUse;
struct Connect_SubsEntry_DoNotUseDefaultTypeInternal;
extern Connect_SubsEntry_DoNotUseDefaultTypeInternal _Connect_SubsEntry_DoNotUse_default_instance_;
class Disconnect;
struct DisconnectDefaultTypeInternal;
extern DisconnectDefaultTypeInternal _Disconnect_default_instance_;
class EmulationRequest;
struct EmulationRequestDefaultTypeInternal;
extern EmulationRequestDefaultTypeInternal _EmulationRequest_default_instance_;
class Error;
struct ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class HistoryRequest;
struct HistoryRequestDefaultTypeInternal;
extern HistoryRequestDefaultTypeInternal _HistoryRequest_default_instance_;
class HistoryResult;
struct HistoryResultDefaultTypeInternal;
extern HistoryResultDefaultTypeInternal _HistoryResult_default_instance_;
class Join;
struct JoinDefaultTypeInternal;
extern JoinDefaultTypeInternal _Join_default_instance_;
class Leave;
struct LeaveDefaultTypeInternal;
extern LeaveDefaultTypeInternal _Leave_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class PingRequest;
struct PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class PingResult;
struct PingResultDefaultTypeInternal;
extern PingResultDefaultTypeInternal _PingResult_default_instance_;
class PresenceRequest;
struct PresenceRequestDefaultTypeInternal;
extern PresenceRequestDefaultTypeInternal _PresenceRequest_default_instance_;
class PresenceResult;
struct PresenceResultDefaultTypeInternal;
extern PresenceResultDefaultTypeInternal _PresenceResult_default_instance_;
class PresenceResult_PresenceEntry_DoNotUse;
struct PresenceResult_PresenceEntry_DoNotUseDefaultTypeInternal;
extern PresenceResult_PresenceEntry_DoNotUseDefaultTypeInternal _PresenceResult_PresenceEntry_DoNotUse_default_instance_;
class PresenceStatsRequest;
struct PresenceStatsRequestDefaultTypeInternal;
extern PresenceStatsRequestDefaultTypeInternal _PresenceStatsRequest_default_instance_;
class PresenceStatsResult;
struct PresenceStatsResultDefaultTypeInternal;
extern PresenceStatsResultDefaultTypeInternal _PresenceStatsResult_default_instance_;
class Publication;
struct PublicationDefaultTypeInternal;
extern PublicationDefaultTypeInternal _Publication_default_instance_;
class Publication_TagsEntry_DoNotUse;
struct Publication_TagsEntry_DoNotUseDefaultTypeInternal;
extern Publication_TagsEntry_DoNotUseDefaultTypeInternal _Publication_TagsEntry_DoNotUse_default_instance_;
class PublishRequest;
struct PublishRequestDefaultTypeInternal;
extern PublishRequestDefaultTypeInternal _PublishRequest_default_instance_;
class PublishResult;
struct PublishResultDefaultTypeInternal;
extern PublishResultDefaultTypeInternal _PublishResult_default_instance_;
class Push;
struct PushDefaultTypeInternal;
extern PushDefaultTypeInternal _Push_default_instance_;
class RPCRequest;
struct RPCRequestDefaultTypeInternal;
extern RPCRequestDefaultTypeInternal _RPCRequest_default_instance_;
class RPCResult;
struct RPCResultDefaultTypeInternal;
extern RPCResultDefaultTypeInternal _RPCResult_default_instance_;
class Refresh;
struct RefreshDefaultTypeInternal;
extern RefreshDefaultTypeInternal _Refresh_default_instance_;
class RefreshRequest;
struct RefreshRequestDefaultTypeInternal;
extern RefreshRequestDefaultTypeInternal _RefreshRequest_default_instance_;
class RefreshResult;
struct RefreshResultDefaultTypeInternal;
extern RefreshResultDefaultTypeInternal _RefreshResult_default_instance_;
class Reply;
struct ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class SendRequest;
struct SendRequestDefaultTypeInternal;
extern SendRequestDefaultTypeInternal _SendRequest_default_instance_;
class StreamPosition;
struct StreamPositionDefaultTypeInternal;
extern StreamPositionDefaultTypeInternal _StreamPosition_default_instance_;
class SubRefreshRequest;
struct SubRefreshRequestDefaultTypeInternal;
extern SubRefreshRequestDefaultTypeInternal _SubRefreshRequest_default_instance_;
class SubRefreshResult;
struct SubRefreshResultDefaultTypeInternal;
extern SubRefreshResultDefaultTypeInternal _SubRefreshResult_default_instance_;
class Subscribe;
struct SubscribeDefaultTypeInternal;
extern SubscribeDefaultTypeInternal _Subscribe_default_instance_;
class SubscribeRequest;
struct SubscribeRequestDefaultTypeInternal;
extern SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
class SubscribeResult;
struct SubscribeResultDefaultTypeInternal;
extern SubscribeResultDefaultTypeInternal _SubscribeResult_default_instance_;
class Unsubscribe;
struct UnsubscribeDefaultTypeInternal;
extern UnsubscribeDefaultTypeInternal _Unsubscribe_default_instance_;
class UnsubscribeRequest;
struct UnsubscribeRequestDefaultTypeInternal;
extern UnsubscribeRequestDefaultTypeInternal _UnsubscribeRequest_default_instance_;
class UnsubscribeResult;
struct UnsubscribeResultDefaultTypeInternal;
extern UnsubscribeResultDefaultTypeInternal _UnsubscribeResult_default_instance_;
}  // namespace protocol
}  // namespace centrifuge
}  // namespace centrifugal
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace centrifugal {
namespace centrifuge {
namespace protocol {

// ===================================================================


// -------------------------------------------------------------------

class UnsubscribeResult final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.UnsubscribeResult) */ {
 public:
  inline UnsubscribeResult() : UnsubscribeResult(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UnsubscribeResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UnsubscribeResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UnsubscribeResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline UnsubscribeResult(const UnsubscribeResult& from) : UnsubscribeResult(nullptr, from) {}
  inline UnsubscribeResult(UnsubscribeResult&& from) noexcept
      : UnsubscribeResult(nullptr, std::move(from)) {}
  inline UnsubscribeResult& operator=(const UnsubscribeResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsubscribeResult& operator=(UnsubscribeResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnsubscribeResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnsubscribeResult* internal_default_instance() {
    return reinterpret_cast<const UnsubscribeResult*>(
        &_UnsubscribeResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 29;
  friend void swap(UnsubscribeResult& a, UnsubscribeResult& b) { a.Swap(&b); }
  inline void Swap(UnsubscribeResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnsubscribeResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnsubscribeResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<UnsubscribeResult>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UnsubscribeResult& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UnsubscribeResult& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.UnsubscribeResult"; }

 protected:
  explicit UnsubscribeResult(::google::protobuf::Arena* arena);
  UnsubscribeResult(::google::protobuf::Arena* arena, const UnsubscribeResult& from);
  UnsubscribeResult(::google::protobuf::Arena* arena, UnsubscribeResult&& from) noexcept
      : UnsubscribeResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.UnsubscribeResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UnsubscribeResult& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class UnsubscribeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.UnsubscribeRequest) */ {
 public:
  inline UnsubscribeRequest() : UnsubscribeRequest(nullptr) {}
  ~UnsubscribeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UnsubscribeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UnsubscribeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UnsubscribeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UnsubscribeRequest(const UnsubscribeRequest& from) : UnsubscribeRequest(nullptr, from) {}
  inline UnsubscribeRequest(UnsubscribeRequest&& from) noexcept
      : UnsubscribeRequest(nullptr, std::move(from)) {}
  inline UnsubscribeRequest& operator=(const UnsubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsubscribeRequest& operator=(UnsubscribeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnsubscribeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnsubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const UnsubscribeRequest*>(
        &_UnsubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 28;
  friend void swap(UnsubscribeRequest& a, UnsubscribeRequest& b) { a.Swap(&b); }
  inline void Swap(UnsubscribeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnsubscribeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnsubscribeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UnsubscribeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UnsubscribeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UnsubscribeRequest& from) { UnsubscribeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UnsubscribeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.UnsubscribeRequest"; }

 protected:
  explicit UnsubscribeRequest(::google::protobuf::Arena* arena);
  UnsubscribeRequest(::google::protobuf::Arena* arena, const UnsubscribeRequest& from);
  UnsubscribeRequest(::google::protobuf::Arena* arena, UnsubscribeRequest&& from) noexcept
      : UnsubscribeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChannelFieldNumber = 1,
  };
  // string channel = 1;
  void clear_channel() ;
  const std::string& channel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel(Arg_&& arg, Args_... args);
  std::string* mutable_channel();
  PROTOBUF_NODISCARD std::string* release_channel();
  void set_allocated_channel(std::string* value);

  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(
      const std::string& value);
  std::string* _internal_mutable_channel();

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.UnsubscribeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      66, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UnsubscribeRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr channel_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class Unsubscribe final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.Unsubscribe) */ {
 public:
  inline Unsubscribe() : Unsubscribe(nullptr) {}
  ~Unsubscribe() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Unsubscribe* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Unsubscribe));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Unsubscribe(
      ::google::protobuf::internal::ConstantInitialized);

  inline Unsubscribe(const Unsubscribe& from) : Unsubscribe(nullptr, from) {}
  inline Unsubscribe(Unsubscribe&& from) noexcept
      : Unsubscribe(nullptr, std::move(from)) {}
  inline Unsubscribe& operator=(const Unsubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline Unsubscribe& operator=(Unsubscribe&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Unsubscribe& default_instance() {
    return *internal_default_instance();
  }
  static inline const Unsubscribe* internal_default_instance() {
    return reinterpret_cast<const Unsubscribe*>(
        &_Unsubscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(Unsubscribe& a, Unsubscribe& b) { a.Swap(&b); }
  inline void Swap(Unsubscribe* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Unsubscribe* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Unsubscribe* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Unsubscribe>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Unsubscribe& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Unsubscribe& from) { Unsubscribe::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Unsubscribe* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.Unsubscribe"; }

 protected:
  explicit Unsubscribe(::google::protobuf::Arena* arena);
  Unsubscribe(::google::protobuf::Arena* arena, const Unsubscribe& from);
  Unsubscribe(::google::protobuf::Arena* arena, Unsubscribe&& from) noexcept
      : Unsubscribe(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReasonFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // string reason = 3;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // uint32 code = 2;
  void clear_code() ;
  ::uint32_t code() const;
  void set_code(::uint32_t value);

  private:
  ::uint32_t _internal_code() const;
  void _internal_set_code(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.Unsubscribe)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Unsubscribe& from_msg);
    ::google::protobuf::internal::ArenaStringPtr reason_;
    ::uint32_t code_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class SubscribeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.SubscribeRequest) */ {
 public:
  inline SubscribeRequest() : SubscribeRequest(nullptr) {}
  ~SubscribeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeRequest(const SubscribeRequest& from) : SubscribeRequest(nullptr, from) {}
  inline SubscribeRequest(SubscribeRequest&& from) noexcept
      : SubscribeRequest(nullptr, std::move(from)) {}
  inline SubscribeRequest& operator=(const SubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeRequest& operator=(SubscribeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeRequest*>(
        &_SubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(SubscribeRequest& a, SubscribeRequest& b) { a.Swap(&b); }
  inline void Swap(SubscribeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubscribeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscribeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubscribeRequest& from) { SubscribeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubscribeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.SubscribeRequest"; }

 protected:
  explicit SubscribeRequest(::google::protobuf::Arena* arena);
  SubscribeRequest(::google::protobuf::Arena* arena, const SubscribeRequest& from);
  SubscribeRequest(::google::protobuf::Arena* arena, SubscribeRequest&& from) noexcept
      : SubscribeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChannelFieldNumber = 1,
    kTokenFieldNumber = 2,
    kEpochFieldNumber = 6,
    kDataFieldNumber = 8,
    kDeltaFieldNumber = 12,
    kOffsetFieldNumber = 7,
    kRecoverFieldNumber = 3,
    kPositionedFieldNumber = 9,
    kRecoverableFieldNumber = 10,
    kJoinLeaveFieldNumber = 11,
  };
  // string channel = 1;
  void clear_channel() ;
  const std::string& channel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel(Arg_&& arg, Args_... args);
  std::string* mutable_channel();
  PROTOBUF_NODISCARD std::string* release_channel();
  void set_allocated_channel(std::string* value);

  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(
      const std::string& value);
  std::string* _internal_mutable_channel();

  public:
  // string token = 2;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // string epoch = 6;
  void clear_epoch() ;
  const std::string& epoch() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_epoch(Arg_&& arg, Args_... args);
  std::string* mutable_epoch();
  PROTOBUF_NODISCARD std::string* release_epoch();
  void set_allocated_epoch(std::string* value);

  private:
  const std::string& _internal_epoch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_epoch(
      const std::string& value);
  std::string* _internal_mutable_epoch();

  public:
  // bytes data = 8;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // string delta = 12;
  void clear_delta() ;
  const std::string& delta() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_delta(Arg_&& arg, Args_... args);
  std::string* mutable_delta();
  PROTOBUF_NODISCARD std::string* release_delta();
  void set_allocated_delta(std::string* value);

  private:
  const std::string& _internal_delta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delta(
      const std::string& value);
  std::string* _internal_mutable_delta();

  public:
  // uint64 offset = 7;
  void clear_offset() ;
  ::uint64_t offset() const;
  void set_offset(::uint64_t value);

  private:
  ::uint64_t _internal_offset() const;
  void _internal_set_offset(::uint64_t value);

  public:
  // bool recover = 3;
  void clear_recover() ;
  bool recover() const;
  void set_recover(bool value);

  private:
  bool _internal_recover() const;
  void _internal_set_recover(bool value);

  public:
  // bool positioned = 9;
  void clear_positioned() ;
  bool positioned() const;
  void set_positioned(bool value);

  private:
  bool _internal_positioned() const;
  void _internal_set_positioned(bool value);

  public:
  // bool recoverable = 10;
  void clear_recoverable() ;
  bool recoverable() const;
  void set_recoverable(bool value);

  private:
  bool _internal_recoverable() const;
  void _internal_set_recoverable(bool value);

  public:
  // bool join_leave = 11;
  void clear_join_leave() ;
  bool join_leave() const;
  void set_join_leave(bool value);

  private:
  bool _internal_join_leave() const;
  void _internal_set_join_leave(bool value);

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.SubscribeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 0,
      87, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr channel_;
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::google::protobuf::internal::ArenaStringPtr epoch_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr delta_;
    ::uint64_t offset_;
    bool recover_;
    bool positioned_;
    bool recoverable_;
    bool join_leave_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class Subscribe final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.Subscribe) */ {
 public:
  inline Subscribe() : Subscribe(nullptr) {}
  ~Subscribe() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Subscribe* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Subscribe));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Subscribe(
      ::google::protobuf::internal::ConstantInitialized);

  inline Subscribe(const Subscribe& from) : Subscribe(nullptr, from) {}
  inline Subscribe(Subscribe&& from) noexcept
      : Subscribe(nullptr, std::move(from)) {}
  inline Subscribe& operator=(const Subscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subscribe& operator=(Subscribe&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Subscribe& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subscribe* internal_default_instance() {
    return reinterpret_cast<const Subscribe*>(
        &_Subscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(Subscribe& a, Subscribe& b) { a.Swap(&b); }
  inline void Swap(Subscribe* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subscribe* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Subscribe* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Subscribe>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Subscribe& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Subscribe& from) { Subscribe::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Subscribe* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.Subscribe"; }

 protected:
  explicit Subscribe(::google::protobuf::Arena* arena);
  Subscribe(::google::protobuf::Arena* arena, const Subscribe& from);
  Subscribe(::google::protobuf::Arena* arena, Subscribe&& from) noexcept
      : Subscribe(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEpochFieldNumber = 4,
    kDataFieldNumber = 7,
    kOffsetFieldNumber = 5,
    kRecoverableFieldNumber = 1,
    kPositionedFieldNumber = 6,
  };
  // string epoch = 4;
  void clear_epoch() ;
  const std::string& epoch() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_epoch(Arg_&& arg, Args_... args);
  std::string* mutable_epoch();
  PROTOBUF_NODISCARD std::string* release_epoch();
  void set_allocated_epoch(std::string* value);

  private:
  const std::string& _internal_epoch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_epoch(
      const std::string& value);
  std::string* _internal_mutable_epoch();

  public:
  // bytes data = 7;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // uint64 offset = 5;
  void clear_offset() ;
  ::uint64_t offset() const;
  void set_offset(::uint64_t value);

  private:
  ::uint64_t _internal_offset() const;
  void _internal_set_offset(::uint64_t value);

  public:
  // bool recoverable = 1;
  void clear_recoverable() ;
  bool recoverable() const;
  void set_recoverable(bool value);

  private:
  bool _internal_recoverable() const;
  void _internal_set_recoverable(bool value);

  public:
  // bool positioned = 6;
  void clear_positioned() ;
  bool positioned() const;
  void set_positioned(bool value);

  private:
  bool _internal_positioned() const;
  void _internal_set_positioned(bool value);

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.Subscribe)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Subscribe& from_msg);
    ::google::protobuf::internal::ArenaStringPtr epoch_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::uint64_t offset_;
    bool recoverable_;
    bool positioned_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class SubRefreshResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.SubRefreshResult) */ {
 public:
  inline SubRefreshResult() : SubRefreshResult(nullptr) {}
  ~SubRefreshResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubRefreshResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubRefreshResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubRefreshResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubRefreshResult(const SubRefreshResult& from) : SubRefreshResult(nullptr, from) {}
  inline SubRefreshResult(SubRefreshResult&& from) noexcept
      : SubRefreshResult(nullptr, std::move(from)) {}
  inline SubRefreshResult& operator=(const SubRefreshResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubRefreshResult& operator=(SubRefreshResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubRefreshResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubRefreshResult* internal_default_instance() {
    return reinterpret_cast<const SubRefreshResult*>(
        &_SubRefreshResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(SubRefreshResult& a, SubRefreshResult& b) { a.Swap(&b); }
  inline void Swap(SubRefreshResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubRefreshResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubRefreshResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubRefreshResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubRefreshResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubRefreshResult& from) { SubRefreshResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubRefreshResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.SubRefreshResult"; }

 protected:
  explicit SubRefreshResult(::google::protobuf::Arena* arena);
  SubRefreshResult(::google::protobuf::Arena* arena, const SubRefreshResult& from);
  SubRefreshResult(::google::protobuf::Arena* arena, SubRefreshResult&& from) noexcept
      : SubRefreshResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExpiresFieldNumber = 1,
    kTtlFieldNumber = 2,
  };
  // bool expires = 1;
  void clear_expires() ;
  bool expires() const;
  void set_expires(bool value);

  private:
  bool _internal_expires() const;
  void _internal_set_expires(bool value);

  public:
  // uint32 ttl = 2;
  void clear_ttl() ;
  ::uint32_t ttl() const;
  void set_ttl(::uint32_t value);

  private:
  ::uint32_t _internal_ttl() const;
  void _internal_set_ttl(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.SubRefreshResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubRefreshResult& from_msg);
    bool expires_;
    ::uint32_t ttl_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class SubRefreshRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.SubRefreshRequest) */ {
 public:
  inline SubRefreshRequest() : SubRefreshRequest(nullptr) {}
  ~SubRefreshRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubRefreshRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubRefreshRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubRefreshRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubRefreshRequest(const SubRefreshRequest& from) : SubRefreshRequest(nullptr, from) {}
  inline SubRefreshRequest(SubRefreshRequest&& from) noexcept
      : SubRefreshRequest(nullptr, std::move(from)) {}
  inline SubRefreshRequest& operator=(const SubRefreshRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubRefreshRequest& operator=(SubRefreshRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubRefreshRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubRefreshRequest* internal_default_instance() {
    return reinterpret_cast<const SubRefreshRequest*>(
        &_SubRefreshRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(SubRefreshRequest& a, SubRefreshRequest& b) { a.Swap(&b); }
  inline void Swap(SubRefreshRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubRefreshRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubRefreshRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubRefreshRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubRefreshRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubRefreshRequest& from) { SubRefreshRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubRefreshRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.SubRefreshRequest"; }

 protected:
  explicit SubRefreshRequest(::google::protobuf::Arena* arena);
  SubRefreshRequest(::google::protobuf::Arena* arena, const SubRefreshRequest& from);
  SubRefreshRequest(::google::protobuf::Arena* arena, SubRefreshRequest&& from) noexcept
      : SubRefreshRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChannelFieldNumber = 1,
    kTokenFieldNumber = 2,
  };
  // string channel = 1;
  void clear_channel() ;
  const std::string& channel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel(Arg_&& arg, Args_... args);
  std::string* mutable_channel();
  PROTOBUF_NODISCARD std::string* release_channel();
  void set_allocated_channel(std::string* value);

  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(
      const std::string& value);
  std::string* _internal_mutable_channel();

  public:
  // string token = 2;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.SubRefreshRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      70, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubRefreshRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr channel_;
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class StreamPosition final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.StreamPosition) */ {
 public:
  inline StreamPosition() : StreamPosition(nullptr) {}
  ~StreamPosition() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StreamPosition* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StreamPosition));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamPosition(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamPosition(const StreamPosition& from) : StreamPosition(nullptr, from) {}
  inline StreamPosition(StreamPosition&& from) noexcept
      : StreamPosition(nullptr, std::move(from)) {}
  inline StreamPosition& operator=(const StreamPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamPosition& operator=(StreamPosition&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamPosition* internal_default_instance() {
    return reinterpret_cast<const StreamPosition*>(
        &_StreamPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 37;
  friend void swap(StreamPosition& a, StreamPosition& b) { a.Swap(&b); }
  inline void Swap(StreamPosition* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamPosition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamPosition* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StreamPosition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamPosition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamPosition& from) { StreamPosition::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StreamPosition* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.StreamPosition"; }

 protected:
  explicit StreamPosition(::google::protobuf::Arena* arena);
  StreamPosition(::google::protobuf::Arena* arena, const StreamPosition& from);
  StreamPosition(::google::protobuf::Arena* arena, StreamPosition&& from) noexcept
      : StreamPosition(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEpochFieldNumber = 2,
    kOffsetFieldNumber = 1,
  };
  // string epoch = 2;
  void clear_epoch() ;
  const std::string& epoch() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_epoch(Arg_&& arg, Args_... args);
  std::string* mutable_epoch();
  PROTOBUF_NODISCARD std::string* release_epoch();
  void set_allocated_epoch(std::string* value);

  private:
  const std::string& _internal_epoch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_epoch(
      const std::string& value);
  std::string* _internal_mutable_epoch();

  public:
  // uint64 offset = 1;
  void clear_offset() ;
  ::uint64_t offset() const;
  void set_offset(::uint64_t value);

  private:
  ::uint64_t _internal_offset() const;
  void _internal_set_offset(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.StreamPosition)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      60, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamPosition& from_msg);
    ::google::protobuf::internal::ArenaStringPtr epoch_;
    ::uint64_t offset_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class SendRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.SendRequest) */ {
 public:
  inline SendRequest() : SendRequest(nullptr) {}
  ~SendRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SendRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SendRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SendRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SendRequest(const SendRequest& from) : SendRequest(nullptr, from) {}
  inline SendRequest(SendRequest&& from) noexcept
      : SendRequest(nullptr, std::move(from)) {}
  inline SendRequest& operator=(const SendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendRequest& operator=(SendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendRequest* internal_default_instance() {
    return reinterpret_cast<const SendRequest*>(
        &_SendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 44;
  friend void swap(SendRequest& a, SendRequest& b) { a.Swap(&b); }
  inline void Swap(SendRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SendRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SendRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SendRequest& from) { SendRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SendRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.SendRequest"; }

 protected:
  explicit SendRequest(::google::protobuf::Arena* arena);
  SendRequest(::google::protobuf::Arena* arena, const SendRequest& from);
  SendRequest(::google::protobuf::Arena* arena, SendRequest&& from) noexcept
      : SendRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.SendRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SendRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class RefreshResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.RefreshResult) */ {
 public:
  inline RefreshResult() : RefreshResult(nullptr) {}
  ~RefreshResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RefreshResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RefreshResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RefreshResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline RefreshResult(const RefreshResult& from) : RefreshResult(nullptr, from) {}
  inline RefreshResult(RefreshResult&& from) noexcept
      : RefreshResult(nullptr, std::move(from)) {}
  inline RefreshResult& operator=(const RefreshResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshResult& operator=(RefreshResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RefreshResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const RefreshResult* internal_default_instance() {
    return reinterpret_cast<const RefreshResult*>(
        &_RefreshResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(RefreshResult& a, RefreshResult& b) { a.Swap(&b); }
  inline void Swap(RefreshResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefreshResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RefreshResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RefreshResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RefreshResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RefreshResult& from) { RefreshResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RefreshResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.RefreshResult"; }

 protected:
  explicit RefreshResult(::google::protobuf::Arena* arena);
  RefreshResult(::google::protobuf::Arena* arena, const RefreshResult& from);
  RefreshResult(::google::protobuf::Arena* arena, RefreshResult&& from) noexcept
      : RefreshResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClientFieldNumber = 1,
    kVersionFieldNumber = 2,
    kExpiresFieldNumber = 3,
    kTtlFieldNumber = 4,
  };
  // string client = 1;
  void clear_client() ;
  const std::string& client() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client(Arg_&& arg, Args_... args);
  std::string* mutable_client();
  PROTOBUF_NODISCARD std::string* release_client();
  void set_allocated_client(std::string* value);

  private:
  const std::string& _internal_client() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client(
      const std::string& value);
  std::string* _internal_mutable_client();

  public:
  // string version = 2;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // bool expires = 3;
  void clear_expires() ;
  bool expires() const;
  void set_expires(bool value);

  private:
  bool _internal_expires() const;
  void _internal_set_expires(bool value);

  public:
  // uint32 ttl = 4;
  void clear_ttl() ;
  ::uint32_t ttl() const;
  void set_ttl(::uint32_t value);

  private:
  ::uint32_t _internal_ttl() const;
  void _internal_set_ttl(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.RefreshResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      67, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RefreshResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr client_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    bool expires_;
    ::uint32_t ttl_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class RefreshRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.RefreshRequest) */ {
 public:
  inline RefreshRequest() : RefreshRequest(nullptr) {}
  ~RefreshRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RefreshRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RefreshRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RefreshRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RefreshRequest(const RefreshRequest& from) : RefreshRequest(nullptr, from) {}
  inline RefreshRequest(RefreshRequest&& from) noexcept
      : RefreshRequest(nullptr, std::move(from)) {}
  inline RefreshRequest& operator=(const RefreshRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefreshRequest& operator=(RefreshRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RefreshRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RefreshRequest* internal_default_instance() {
    return reinterpret_cast<const RefreshRequest*>(
        &_RefreshRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(RefreshRequest& a, RefreshRequest& b) { a.Swap(&b); }
  inline void Swap(RefreshRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RefreshRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RefreshRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RefreshRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RefreshRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RefreshRequest& from) { RefreshRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RefreshRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.RefreshRequest"; }

 protected:
  explicit RefreshRequest(::google::protobuf::Arena* arena);
  RefreshRequest(::google::protobuf::Arena* arena, const RefreshRequest& from);
  RefreshRequest(::google::protobuf::Arena* arena, RefreshRequest&& from) noexcept
      : RefreshRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.RefreshRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      60, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RefreshRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class Refresh final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.Refresh) */ {
 public:
  inline Refresh() : Refresh(nullptr) {}
  ~Refresh() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Refresh* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Refresh));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Refresh(
      ::google::protobuf::internal::ConstantInitialized);

  inline Refresh(const Refresh& from) : Refresh(nullptr, from) {}
  inline Refresh(Refresh&& from) noexcept
      : Refresh(nullptr, std::move(from)) {}
  inline Refresh& operator=(const Refresh& from) {
    CopyFrom(from);
    return *this;
  }
  inline Refresh& operator=(Refresh&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Refresh& default_instance() {
    return *internal_default_instance();
  }
  static inline const Refresh* internal_default_instance() {
    return reinterpret_cast<const Refresh*>(
        &_Refresh_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(Refresh& a, Refresh& b) { a.Swap(&b); }
  inline void Swap(Refresh* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Refresh* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Refresh* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Refresh>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Refresh& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Refresh& from) { Refresh::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Refresh* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.Refresh"; }

 protected:
  explicit Refresh(::google::protobuf::Arena* arena);
  Refresh(::google::protobuf::Arena* arena, const Refresh& from);
  Refresh(::google::protobuf::Arena* arena, Refresh&& from) noexcept
      : Refresh(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExpiresFieldNumber = 1,
    kTtlFieldNumber = 2,
  };
  // bool expires = 1;
  void clear_expires() ;
  bool expires() const;
  void set_expires(bool value);

  private:
  bool _internal_expires() const;
  void _internal_set_expires(bool value);

  public:
  // uint32 ttl = 2;
  void clear_ttl() ;
  ::uint32_t ttl() const;
  void set_ttl(::uint32_t value);

  private:
  ::uint32_t _internal_ttl() const;
  void _internal_set_ttl(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.Refresh)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Refresh& from_msg);
    bool expires_;
    ::uint32_t ttl_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class RPCResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.RPCResult) */ {
 public:
  inline RPCResult() : RPCResult(nullptr) {}
  ~RPCResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RPCResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RPCResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RPCResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline RPCResult(const RPCResult& from) : RPCResult(nullptr, from) {}
  inline RPCResult(RPCResult&& from) noexcept
      : RPCResult(nullptr, std::move(from)) {}
  inline RPCResult& operator=(const RPCResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCResult& operator=(RPCResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPCResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const RPCResult* internal_default_instance() {
    return reinterpret_cast<const RPCResult*>(
        &_RPCResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 43;
  friend void swap(RPCResult& a, RPCResult& b) { a.Swap(&b); }
  inline void Swap(RPCResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPCResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPCResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RPCResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RPCResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RPCResult& from) { RPCResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RPCResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.RPCResult"; }

 protected:
  explicit RPCResult(::google::protobuf::Arena* arena);
  RPCResult(::google::protobuf::Arena* arena, const RPCResult& from);
  RPCResult(::google::protobuf::Arena* arena, RPCResult&& from) noexcept
      : RPCResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.RPCResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RPCResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class RPCRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.RPCRequest) */ {
 public:
  inline RPCRequest() : RPCRequest(nullptr) {}
  ~RPCRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RPCRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RPCRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RPCRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RPCRequest(const RPCRequest& from) : RPCRequest(nullptr, from) {}
  inline RPCRequest(RPCRequest&& from) noexcept
      : RPCRequest(nullptr, std::move(from)) {}
  inline RPCRequest& operator=(const RPCRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCRequest& operator=(RPCRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RPCRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RPCRequest* internal_default_instance() {
    return reinterpret_cast<const RPCRequest*>(
        &_RPCRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 42;
  friend void swap(RPCRequest& a, RPCRequest& b) { a.Swap(&b); }
  inline void Swap(RPCRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPCRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RPCRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RPCRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RPCRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RPCRequest& from) { RPCRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RPCRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.RPCRequest"; }

 protected:
  explicit RPCRequest(::google::protobuf::Arena* arena);
  RPCRequest(::google::protobuf::Arena* arena, const RPCRequest& from);
  RPCRequest(::google::protobuf::Arena* arena, RPCRequest&& from) noexcept
      : RPCRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
    kMethodFieldNumber = 2,
  };
  // bytes data = 1;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // string method = 2;
  void clear_method() ;
  const std::string& method() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_method(Arg_&& arg, Args_... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* value);

  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(
      const std::string& value);
  std::string* _internal_mutable_method();

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.RPCRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RPCRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr method_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class PublishResult final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.PublishResult) */ {
 public:
  inline PublishResult() : PublishResult(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishResult(const PublishResult& from) : PublishResult(nullptr, from) {}
  inline PublishResult(PublishResult&& from) noexcept
      : PublishResult(nullptr, std::move(from)) {}
  inline PublishResult& operator=(const PublishResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishResult& operator=(PublishResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishResult* internal_default_instance() {
    return reinterpret_cast<const PublishResult*>(
        &_PublishResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 31;
  friend void swap(PublishResult& a, PublishResult& b) { a.Swap(&b); }
  inline void Swap(PublishResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<PublishResult>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PublishResult& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PublishResult& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.PublishResult"; }

 protected:
  explicit PublishResult(::google::protobuf::Arena* arena);
  PublishResult(::google::protobuf::Arena* arena, const PublishResult& from);
  PublishResult(::google::protobuf::Arena* arena, PublishResult&& from) noexcept
      : PublishResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.PublishResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishResult& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class PublishRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.PublishRequest) */ {
 public:
  inline PublishRequest() : PublishRequest(nullptr) {}
  ~PublishRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PublishRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PublishRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PublishRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PublishRequest(const PublishRequest& from) : PublishRequest(nullptr, from) {}
  inline PublishRequest(PublishRequest&& from) noexcept
      : PublishRequest(nullptr, std::move(from)) {}
  inline PublishRequest& operator=(const PublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishRequest& operator=(PublishRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishRequest* internal_default_instance() {
    return reinterpret_cast<const PublishRequest*>(
        &_PublishRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 30;
  friend void swap(PublishRequest& a, PublishRequest& b) { a.Swap(&b); }
  inline void Swap(PublishRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PublishRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PublishRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PublishRequest& from) { PublishRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PublishRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.PublishRequest"; }

 protected:
  explicit PublishRequest(::google::protobuf::Arena* arena);
  PublishRequest(::google::protobuf::Arena* arena, const PublishRequest& from);
  PublishRequest(::google::protobuf::Arena* arena, PublishRequest&& from) noexcept
      : PublishRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChannelFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string channel = 1;
  void clear_channel() ;
  const std::string& channel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel(Arg_&& arg, Args_... args);
  std::string* mutable_channel();
  PROTOBUF_NODISCARD std::string* release_channel();
  void set_allocated_channel(std::string* value);

  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(
      const std::string& value);
  std::string* _internal_mutable_channel();

  public:
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.PublishRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      62, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PublishRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr channel_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class Publication_TagsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Publication_TagsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Publication_TagsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Publication_TagsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Publication_TagsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Publication_TagsEntry_DoNotUse*>(
        &_Publication_TagsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_protocol_2fclient_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      70, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class PresenceStatsResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.PresenceStatsResult) */ {
 public:
  inline PresenceStatsResult() : PresenceStatsResult(nullptr) {}
  ~PresenceStatsResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PresenceStatsResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PresenceStatsResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PresenceStatsResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline PresenceStatsResult(const PresenceStatsResult& from) : PresenceStatsResult(nullptr, from) {}
  inline PresenceStatsResult(PresenceStatsResult&& from) noexcept
      : PresenceStatsResult(nullptr, std::move(from)) {}
  inline PresenceStatsResult& operator=(const PresenceStatsResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PresenceStatsResult& operator=(PresenceStatsResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PresenceStatsResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PresenceStatsResult* internal_default_instance() {
    return reinterpret_cast<const PresenceStatsResult*>(
        &_PresenceStatsResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 36;
  friend void swap(PresenceStatsResult& a, PresenceStatsResult& b) { a.Swap(&b); }
  inline void Swap(PresenceStatsResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PresenceStatsResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PresenceStatsResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PresenceStatsResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PresenceStatsResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PresenceStatsResult& from) { PresenceStatsResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PresenceStatsResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.PresenceStatsResult"; }

 protected:
  explicit PresenceStatsResult(::google::protobuf::Arena* arena);
  PresenceStatsResult(::google::protobuf::Arena* arena, const PresenceStatsResult& from);
  PresenceStatsResult(::google::protobuf::Arena* arena, PresenceStatsResult&& from) noexcept
      : PresenceStatsResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNumClientsFieldNumber = 1,
    kNumUsersFieldNumber = 2,
  };
  // uint32 num_clients = 1;
  void clear_num_clients() ;
  ::uint32_t num_clients() const;
  void set_num_clients(::uint32_t value);

  private:
  ::uint32_t _internal_num_clients() const;
  void _internal_set_num_clients(::uint32_t value);

  public:
  // uint32 num_users = 2;
  void clear_num_users() ;
  ::uint32_t num_users() const;
  void set_num_users(::uint32_t value);

  private:
  ::uint32_t _internal_num_users() const;
  void _internal_set_num_users(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.PresenceStatsResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PresenceStatsResult& from_msg);
    ::uint32_t num_clients_;
    ::uint32_t num_users_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class PresenceStatsRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.PresenceStatsRequest) */ {
 public:
  inline PresenceStatsRequest() : PresenceStatsRequest(nullptr) {}
  ~PresenceStatsRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PresenceStatsRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PresenceStatsRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PresenceStatsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PresenceStatsRequest(const PresenceStatsRequest& from) : PresenceStatsRequest(nullptr, from) {}
  inline PresenceStatsRequest(PresenceStatsRequest&& from) noexcept
      : PresenceStatsRequest(nullptr, std::move(from)) {}
  inline PresenceStatsRequest& operator=(const PresenceStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PresenceStatsRequest& operator=(PresenceStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PresenceStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PresenceStatsRequest* internal_default_instance() {
    return reinterpret_cast<const PresenceStatsRequest*>(
        &_PresenceStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 35;
  friend void swap(PresenceStatsRequest& a, PresenceStatsRequest& b) { a.Swap(&b); }
  inline void Swap(PresenceStatsRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PresenceStatsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PresenceStatsRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PresenceStatsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PresenceStatsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PresenceStatsRequest& from) { PresenceStatsRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PresenceStatsRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.PresenceStatsRequest"; }

 protected:
  explicit PresenceStatsRequest(::google::protobuf::Arena* arena);
  PresenceStatsRequest(::google::protobuf::Arena* arena, const PresenceStatsRequest& from);
  PresenceStatsRequest(::google::protobuf::Arena* arena, PresenceStatsRequest&& from) noexcept
      : PresenceStatsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChannelFieldNumber = 1,
  };
  // string channel = 1;
  void clear_channel() ;
  const std::string& channel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel(Arg_&& arg, Args_... args);
  std::string* mutable_channel();
  PROTOBUF_NODISCARD std::string* release_channel();
  void set_allocated_channel(std::string* value);

  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(
      const std::string& value);
  std::string* _internal_mutable_channel();

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.PresenceStatsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      68, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PresenceStatsRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr channel_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class PresenceRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.PresenceRequest) */ {
 public:
  inline PresenceRequest() : PresenceRequest(nullptr) {}
  ~PresenceRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PresenceRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PresenceRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PresenceRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PresenceRequest(const PresenceRequest& from) : PresenceRequest(nullptr, from) {}
  inline PresenceRequest(PresenceRequest&& from) noexcept
      : PresenceRequest(nullptr, std::move(from)) {}
  inline PresenceRequest& operator=(const PresenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PresenceRequest& operator=(PresenceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PresenceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PresenceRequest* internal_default_instance() {
    return reinterpret_cast<const PresenceRequest*>(
        &_PresenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 32;
  friend void swap(PresenceRequest& a, PresenceRequest& b) { a.Swap(&b); }
  inline void Swap(PresenceRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PresenceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PresenceRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PresenceRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PresenceRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PresenceRequest& from) { PresenceRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PresenceRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.PresenceRequest"; }

 protected:
  explicit PresenceRequest(::google::protobuf::Arena* arena);
  PresenceRequest(::google::protobuf::Arena* arena, const PresenceRequest& from);
  PresenceRequest(::google::protobuf::Arena* arena, PresenceRequest&& from) noexcept
      : PresenceRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChannelFieldNumber = 1,
  };
  // string channel = 1;
  void clear_channel() ;
  const std::string& channel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel(Arg_&& arg, Args_... args);
  std::string* mutable_channel();
  PROTOBUF_NODISCARD std::string* release_channel();
  void set_allocated_channel(std::string* value);

  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(
      const std::string& value);
  std::string* _internal_mutable_channel();

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.PresenceRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PresenceRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr channel_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class PingResult final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.PingResult) */ {
 public:
  inline PingResult() : PingResult(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PingResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PingResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PingResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline PingResult(const PingResult& from) : PingResult(nullptr, from) {}
  inline PingResult(PingResult&& from) noexcept
      : PingResult(nullptr, std::move(from)) {}
  inline PingResult& operator=(const PingResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingResult& operator=(PingResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingResult* internal_default_instance() {
    return reinterpret_cast<const PingResult*>(
        &_PingResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 41;
  friend void swap(PingResult& a, PingResult& b) { a.Swap(&b); }
  inline void Swap(PingResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<PingResult>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PingResult& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PingResult& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.PingResult"; }

 protected:
  explicit PingResult(::google::protobuf::Arena* arena);
  PingResult(::google::protobuf::Arena* arena, const PingResult& from);
  PingResult(::google::protobuf::Arena* arena, PingResult&& from) noexcept
      : PingResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.PingResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PingResult& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class PingRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.PingRequest) */ {
 public:
  inline PingRequest() : PingRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PingRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PingRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PingRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PingRequest(const PingRequest& from) : PingRequest(nullptr, from) {}
  inline PingRequest(PingRequest&& from) noexcept
      : PingRequest(nullptr, std::move(from)) {}
  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
        &_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 40;
  friend void swap(PingRequest& a, PingRequest& b) { a.Swap(&b); }
  inline void Swap(PingRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<PingRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PingRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PingRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.PingRequest"; }

 protected:
  explicit PingRequest(::google::protobuf::Arena* arena);
  PingRequest(::google::protobuf::Arena* arena, const PingRequest& from);
  PingRequest(::google::protobuf::Arena* arena, PingRequest&& from) noexcept
      : PingRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.PingRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PingRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class Message final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Message* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Message));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message(const Message& from) : Message(nullptr, from) {}
  inline Message(Message&& from) noexcept
      : Message(nullptr, std::move(from)) {}
  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
        &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(Message& a, Message& b) { a.Swap(&b); }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message& from) { Message::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Message* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.Message"; }

 protected:
  explicit Message(::google::protobuf::Arena* arena);
  Message(::google::protobuf::Arena* arena, const Message& from);
  Message(::google::protobuf::Arena* arena, Message&& from) noexcept
      : Message(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.Message)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Message& from_msg);
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class Error final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.Error) */ {
 public:
  inline Error() : Error(nullptr) {}
  ~Error() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Error* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Error));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Error(
      ::google::protobuf::internal::ConstantInitialized);

  inline Error(const Error& from) : Error(nullptr, from) {}
  inline Error(Error&& from) noexcept
      : Error(nullptr, std::move(from)) {}
  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
        &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Error& a, Error& b) { a.Swap(&b); }
  inline void Swap(Error* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Error* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Error>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Error& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Error& from) { Error::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Error* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.Error"; }

 protected:
  explicit Error(::google::protobuf::Arena* arena);
  Error(::google::protobuf::Arena* arena, const Error& from);
  Error(::google::protobuf::Arena* arena, Error&& from) noexcept
      : Error(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
    kTemporaryFieldNumber = 3,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // uint32 code = 1;
  void clear_code() ;
  ::uint32_t code() const;
  void set_code(::uint32_t value);

  private:
  ::uint32_t _internal_code() const;
  void _internal_set_code(::uint32_t value);

  public:
  // bool temporary = 3;
  void clear_temporary() ;
  bool temporary() const;
  void set_temporary(bool value);

  private:
  bool _internal_temporary() const;
  void _internal_set_temporary(bool value);

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.Error)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Error& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::uint32_t code_;
    bool temporary_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class EmulationRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.EmulationRequest) */ {
 public:
  inline EmulationRequest() : EmulationRequest(nullptr) {}
  ~EmulationRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EmulationRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EmulationRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EmulationRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline EmulationRequest(const EmulationRequest& from) : EmulationRequest(nullptr, from) {}
  inline EmulationRequest(EmulationRequest&& from) noexcept
      : EmulationRequest(nullptr, std::move(from)) {}
  inline EmulationRequest& operator=(const EmulationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmulationRequest& operator=(EmulationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmulationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmulationRequest* internal_default_instance() {
    return reinterpret_cast<const EmulationRequest*>(
        &_EmulationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(EmulationRequest& a, EmulationRequest& b) { a.Swap(&b); }
  inline void Swap(EmulationRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmulationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmulationRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EmulationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EmulationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EmulationRequest& from) { EmulationRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EmulationRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.EmulationRequest"; }

 protected:
  explicit EmulationRequest(::google::protobuf::Arena* arena);
  EmulationRequest(::google::protobuf::Arena* arena, const EmulationRequest& from);
  EmulationRequest(::google::protobuf::Arena* arena, EmulationRequest&& from) noexcept
      : EmulationRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeFieldNumber = 1,
    kSessionFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // string node = 1;
  void clear_node() ;
  const std::string& node() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node(Arg_&& arg, Args_... args);
  std::string* mutable_node();
  PROTOBUF_NODISCARD std::string* release_node();
  void set_allocated_node(std::string* value);

  private:
  const std::string& _internal_node() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node(
      const std::string& value);
  std::string* _internal_mutable_node();

  public:
  // string session = 2;
  void clear_session() ;
  const std::string& session() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session(Arg_&& arg, Args_... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* value);

  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(
      const std::string& value);
  std::string* _internal_mutable_session();

  public:
  // bytes data = 3;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.EmulationRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      68, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EmulationRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr node_;
    ::google::protobuf::internal::ArenaStringPtr session_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class Disconnect final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.Disconnect) */ {
 public:
  inline Disconnect() : Disconnect(nullptr) {}
  ~Disconnect() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Disconnect* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Disconnect));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Disconnect(
      ::google::protobuf::internal::ConstantInitialized);

  inline Disconnect(const Disconnect& from) : Disconnect(nullptr, from) {}
  inline Disconnect(Disconnect&& from) noexcept
      : Disconnect(nullptr, std::move(from)) {}
  inline Disconnect& operator=(const Disconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Disconnect& operator=(Disconnect&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Disconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const Disconnect* internal_default_instance() {
    return reinterpret_cast<const Disconnect*>(
        &_Disconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(Disconnect& a, Disconnect& b) { a.Swap(&b); }
  inline void Swap(Disconnect* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Disconnect* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Disconnect* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Disconnect>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Disconnect& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Disconnect& from) { Disconnect::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Disconnect* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.Disconnect"; }

 protected:
  explicit Disconnect(::google::protobuf::Arena* arena);
  Disconnect(::google::protobuf::Arena* arena, const Disconnect& from);
  Disconnect(::google::protobuf::Arena* arena, Disconnect&& from) noexcept
      : Disconnect(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReasonFieldNumber = 2,
    kCodeFieldNumber = 1,
    kReconnectFieldNumber = 3,
  };
  // string reason = 2;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // uint32 code = 1;
  void clear_code() ;
  ::uint32_t code() const;
  void set_code(::uint32_t value);

  private:
  ::uint32_t _internal_code() const;
  void _internal_set_code(::uint32_t value);

  public:
  // bool reconnect = 3;
  void clear_reconnect() ;
  bool reconnect() const;
  void set_reconnect(bool value);

  private:
  bool _internal_reconnect() const;
  void _internal_set_reconnect(bool value);

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.Disconnect)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Disconnect& from_msg);
    ::google::protobuf::internal::ArenaStringPtr reason_;
    ::uint32_t code_;
    bool reconnect_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class ConnectRequest_HeadersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  ConnectRequest_HeadersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConnectRequest_HeadersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ConnectRequest_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ConnectRequest_HeadersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ConnectRequest_HeadersEntry_DoNotUse*>(
        &_ConnectRequest_HeadersEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_protocol_2fclient_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      76, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ClientInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.ClientInfo) */ {
 public:
  inline ClientInfo() : ClientInfo(nullptr) {}
  ~ClientInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClientInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClientInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClientInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline ClientInfo(const ClientInfo& from) : ClientInfo(nullptr, from) {}
  inline ClientInfo(ClientInfo&& from) noexcept
      : ClientInfo(nullptr, std::move(from)) {}
  inline ClientInfo& operator=(const ClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientInfo& operator=(ClientInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientInfo* internal_default_instance() {
    return reinterpret_cast<const ClientInfo*>(
        &_ClientInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ClientInfo& a, ClientInfo& b) { a.Swap(&b); }
  inline void Swap(ClientInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ClientInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClientInfo& from) { ClientInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ClientInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.ClientInfo"; }

 protected:
  explicit ClientInfo(::google::protobuf::Arena* arena);
  ClientInfo(::google::protobuf::Arena* arena, const ClientInfo& from);
  ClientInfo(::google::protobuf::Arena* arena, ClientInfo&& from) noexcept
      : ClientInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserFieldNumber = 1,
    kClientFieldNumber = 2,
    kConnInfoFieldNumber = 3,
    kChanInfoFieldNumber = 4,
  };
  // string user = 1;
  void clear_user() ;
  const std::string& user() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user(Arg_&& arg, Args_... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* value);

  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(
      const std::string& value);
  std::string* _internal_mutable_user();

  public:
  // string client = 2;
  void clear_client() ;
  const std::string& client() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client(Arg_&& arg, Args_... args);
  std::string* mutable_client();
  PROTOBUF_NODISCARD std::string* release_client();
  void set_allocated_client(std::string* value);

  private:
  const std::string& _internal_client() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client(
      const std::string& value);
  std::string* _internal_mutable_client();

  public:
  // bytes conn_info = 3;
  void clear_conn_info() ;
  const std::string& conn_info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conn_info(Arg_&& arg, Args_... args);
  std::string* mutable_conn_info();
  PROTOBUF_NODISCARD std::string* release_conn_info();
  void set_allocated_conn_info(std::string* value);

  private:
  const std::string& _internal_conn_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conn_info(
      const std::string& value);
  std::string* _internal_mutable_conn_info();

  public:
  // bytes chan_info = 4;
  void clear_chan_info() ;
  const std::string& chan_info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chan_info(Arg_&& arg, Args_... args);
  std::string* mutable_chan_info();
  PROTOBUF_NODISCARD std::string* release_chan_info();
  void set_allocated_chan_info(std::string* value);

  private:
  const std::string& _internal_chan_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chan_info(
      const std::string& value);
  std::string* _internal_mutable_chan_info();

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.ClientInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ClientInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_;
    ::google::protobuf::internal::ArenaStringPtr client_;
    ::google::protobuf::internal::ArenaStringPtr conn_info_;
    ::google::protobuf::internal::ArenaStringPtr chan_info_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class Publication final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.Publication) */ {
 public:
  inline Publication() : Publication(nullptr) {}
  ~Publication() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Publication* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Publication));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Publication(
      ::google::protobuf::internal::ConstantInitialized);

  inline Publication(const Publication& from) : Publication(nullptr, from) {}
  inline Publication(Publication&& from) noexcept
      : Publication(nullptr, std::move(from)) {}
  inline Publication& operator=(const Publication& from) {
    CopyFrom(from);
    return *this;
  }
  inline Publication& operator=(Publication&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Publication& default_instance() {
    return *internal_default_instance();
  }
  static inline const Publication* internal_default_instance() {
    return reinterpret_cast<const Publication*>(
        &_Publication_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Publication& a, Publication& b) { a.Swap(&b); }
  inline void Swap(Publication* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Publication* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Publication* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Publication>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Publication& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Publication& from) { Publication::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Publication* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.Publication"; }

 protected:
  explicit Publication(::google::protobuf::Arena* arena);
  Publication(::google::protobuf::Arena* arena, const Publication& from);
  Publication(::google::protobuf::Arena* arena, Publication&& from) noexcept
      : Publication(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTagsFieldNumber = 7,
    kDataFieldNumber = 4,
    kChannelFieldNumber = 10,
    kInfoFieldNumber = 5,
    kOffsetFieldNumber = 6,
    kTimeFieldNumber = 9,
    kDeltaFieldNumber = 8,
  };
  // map<string, string> tags = 7;
  int tags_size() const;
  private:
  int _internal_tags_size() const;

  public:
  void clear_tags() ;
  const ::google::protobuf::Map<std::string, std::string>& tags() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_tags();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_tags() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_tags();

  public:
  // bytes data = 4;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // string channel = 10;
  void clear_channel() ;
  const std::string& channel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel(Arg_&& arg, Args_... args);
  std::string* mutable_channel();
  PROTOBUF_NODISCARD std::string* release_channel();
  void set_allocated_channel(std::string* value);

  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(
      const std::string& value);
  std::string* _internal_mutable_channel();

  public:
  // .centrifugal.centrifuge.protocol.ClientInfo info = 5;
  bool has_info() const;
  void clear_info() ;
  const ::centrifugal::centrifuge::protocol::ClientInfo& info() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::ClientInfo* release_info();
  ::centrifugal::centrifuge::protocol::ClientInfo* mutable_info();
  void set_allocated_info(::centrifugal::centrifuge::protocol::ClientInfo* value);
  void unsafe_arena_set_allocated_info(::centrifugal::centrifuge::protocol::ClientInfo* value);
  ::centrifugal::centrifuge::protocol::ClientInfo* unsafe_arena_release_info();

  private:
  const ::centrifugal::centrifuge::protocol::ClientInfo& _internal_info() const;
  ::centrifugal::centrifuge::protocol::ClientInfo* _internal_mutable_info();

  public:
  // uint64 offset = 6;
  void clear_offset() ;
  ::uint64_t offset() const;
  void set_offset(::uint64_t value);

  private:
  ::uint64_t _internal_offset() const;
  void _internal_set_offset(::uint64_t value);

  public:
  // int64 time = 9;
  void clear_time() ;
  ::int64_t time() const;
  void set_time(::int64_t value);

  private:
  ::int64_t _internal_time() const;
  void _internal_set_time(::int64_t value);

  public:
  // bool delta = 8;
  void clear_delta() ;
  bool delta() const;
  void set_delta(bool value);

  private:
  bool _internal_delta() const;
  void _internal_set_delta(bool value);

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.Publication)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Publication& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<Publication_TagsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        tags_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr channel_;
    ::centrifugal::centrifuge::protocol::ClientInfo* info_;
    ::uint64_t offset_;
    ::int64_t time_;
    bool delta_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class PresenceResult_PresenceEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  PresenceResult_PresenceEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PresenceResult_PresenceEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit PresenceResult_PresenceEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const PresenceResult_PresenceEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const PresenceResult_PresenceEntry_DoNotUse*>(
        &_PresenceResult_PresenceEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_protocol_2fclient_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      72, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Leave final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.Leave) */ {
 public:
  inline Leave() : Leave(nullptr) {}
  ~Leave() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Leave* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Leave));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Leave(
      ::google::protobuf::internal::ConstantInitialized);

  inline Leave(const Leave& from) : Leave(nullptr, from) {}
  inline Leave(Leave&& from) noexcept
      : Leave(nullptr, std::move(from)) {}
  inline Leave& operator=(const Leave& from) {
    CopyFrom(from);
    return *this;
  }
  inline Leave& operator=(Leave&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Leave& default_instance() {
    return *internal_default_instance();
  }
  static inline const Leave* internal_default_instance() {
    return reinterpret_cast<const Leave*>(
        &_Leave_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(Leave& a, Leave& b) { a.Swap(&b); }
  inline void Swap(Leave* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Leave* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Leave* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Leave>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Leave& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Leave& from) { Leave::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Leave* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.Leave"; }

 protected:
  explicit Leave(::google::protobuf::Arena* arena);
  Leave(::google::protobuf::Arena* arena, const Leave& from);
  Leave(::google::protobuf::Arena* arena, Leave&& from) noexcept
      : Leave(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInfoFieldNumber = 1,
  };
  // .centrifugal.centrifuge.protocol.ClientInfo info = 1;
  bool has_info() const;
  void clear_info() ;
  const ::centrifugal::centrifuge::protocol::ClientInfo& info() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::ClientInfo* release_info();
  ::centrifugal::centrifuge::protocol::ClientInfo* mutable_info();
  void set_allocated_info(::centrifugal::centrifuge::protocol::ClientInfo* value);
  void unsafe_arena_set_allocated_info(::centrifugal::centrifuge::protocol::ClientInfo* value);
  ::centrifugal::centrifuge::protocol::ClientInfo* unsafe_arena_release_info();

  private:
  const ::centrifugal::centrifuge::protocol::ClientInfo& _internal_info() const;
  ::centrifugal::centrifuge::protocol::ClientInfo* _internal_mutable_info();

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.Leave)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Leave& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::centrifugal::centrifuge::protocol::ClientInfo* info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class Join final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.Join) */ {
 public:
  inline Join() : Join(nullptr) {}
  ~Join() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Join* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Join));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Join(
      ::google::protobuf::internal::ConstantInitialized);

  inline Join(const Join& from) : Join(nullptr, from) {}
  inline Join(Join&& from) noexcept
      : Join(nullptr, std::move(from)) {}
  inline Join& operator=(const Join& from) {
    CopyFrom(from);
    return *this;
  }
  inline Join& operator=(Join&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Join& default_instance() {
    return *internal_default_instance();
  }
  static inline const Join* internal_default_instance() {
    return reinterpret_cast<const Join*>(
        &_Join_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Join& a, Join& b) { a.Swap(&b); }
  inline void Swap(Join* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Join* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Join* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Join>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Join& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Join& from) { Join::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Join* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.Join"; }

 protected:
  explicit Join(::google::protobuf::Arena* arena);
  Join(::google::protobuf::Arena* arena, const Join& from);
  Join(::google::protobuf::Arena* arena, Join&& from) noexcept
      : Join(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInfoFieldNumber = 1,
  };
  // .centrifugal.centrifuge.protocol.ClientInfo info = 1;
  bool has_info() const;
  void clear_info() ;
  const ::centrifugal::centrifuge::protocol::ClientInfo& info() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::ClientInfo* release_info();
  ::centrifugal::centrifuge::protocol::ClientInfo* mutable_info();
  void set_allocated_info(::centrifugal::centrifuge::protocol::ClientInfo* value);
  void unsafe_arena_set_allocated_info(::centrifugal::centrifuge::protocol::ClientInfo* value);
  ::centrifugal::centrifuge::protocol::ClientInfo* unsafe_arena_release_info();

  private:
  const ::centrifugal::centrifuge::protocol::ClientInfo& _internal_info() const;
  ::centrifugal::centrifuge::protocol::ClientInfo* _internal_mutable_info();

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.Join)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Join& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::centrifugal::centrifuge::protocol::ClientInfo* info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class HistoryRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.HistoryRequest) */ {
 public:
  inline HistoryRequest() : HistoryRequest(nullptr) {}
  ~HistoryRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HistoryRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HistoryRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HistoryRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline HistoryRequest(const HistoryRequest& from) : HistoryRequest(nullptr, from) {}
  inline HistoryRequest(HistoryRequest&& from) noexcept
      : HistoryRequest(nullptr, std::move(from)) {}
  inline HistoryRequest& operator=(const HistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryRequest& operator=(HistoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HistoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistoryRequest* internal_default_instance() {
    return reinterpret_cast<const HistoryRequest*>(
        &_HistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 38;
  friend void swap(HistoryRequest& a, HistoryRequest& b) { a.Swap(&b); }
  inline void Swap(HistoryRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HistoryRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HistoryRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HistoryRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HistoryRequest& from) { HistoryRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HistoryRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.HistoryRequest"; }

 protected:
  explicit HistoryRequest(::google::protobuf::Arena* arena);
  HistoryRequest(::google::protobuf::Arena* arena, const HistoryRequest& from);
  HistoryRequest(::google::protobuf::Arena* arena, HistoryRequest&& from) noexcept
      : HistoryRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChannelFieldNumber = 1,
    kSinceFieldNumber = 8,
    kLimitFieldNumber = 7,
    kReverseFieldNumber = 9,
  };
  // string channel = 1;
  void clear_channel() ;
  const std::string& channel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel(Arg_&& arg, Args_... args);
  std::string* mutable_channel();
  PROTOBUF_NODISCARD std::string* release_channel();
  void set_allocated_channel(std::string* value);

  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(
      const std::string& value);
  std::string* _internal_mutable_channel();

  public:
  // .centrifugal.centrifuge.protocol.StreamPosition since = 8;
  bool has_since() const;
  void clear_since() ;
  const ::centrifugal::centrifuge::protocol::StreamPosition& since() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::StreamPosition* release_since();
  ::centrifugal::centrifuge::protocol::StreamPosition* mutable_since();
  void set_allocated_since(::centrifugal::centrifuge::protocol::StreamPosition* value);
  void unsafe_arena_set_allocated_since(::centrifugal::centrifuge::protocol::StreamPosition* value);
  ::centrifugal::centrifuge::protocol::StreamPosition* unsafe_arena_release_since();

  private:
  const ::centrifugal::centrifuge::protocol::StreamPosition& _internal_since() const;
  ::centrifugal::centrifuge::protocol::StreamPosition* _internal_mutable_since();

  public:
  // int32 limit = 7;
  void clear_limit() ;
  ::int32_t limit() const;
  void set_limit(::int32_t value);

  private:
  ::int32_t _internal_limit() const;
  void _internal_set_limit(::int32_t value);

  public:
  // bool reverse = 9;
  void clear_reverse() ;
  bool reverse() const;
  void set_reverse(bool value);

  private:
  bool _internal_reverse() const;
  void _internal_set_reverse(bool value);

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.HistoryRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      62, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HistoryRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr channel_;
    ::centrifugal::centrifuge::protocol::StreamPosition* since_;
    ::int32_t limit_;
    bool reverse_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class ConnectRequest_SubsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  ConnectRequest_SubsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConnectRequest_SubsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ConnectRequest_SubsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ConnectRequest_SubsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ConnectRequest_SubsEntry_DoNotUse*>(
        &_ConnectRequest_SubsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_protocol_2fclient_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      68, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class SubscribeResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.SubscribeResult) */ {
 public:
  inline SubscribeResult() : SubscribeResult(nullptr) {}
  ~SubscribeResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeResult(const SubscribeResult& from) : SubscribeResult(nullptr, from) {}
  inline SubscribeResult(SubscribeResult&& from) noexcept
      : SubscribeResult(nullptr, std::move(from)) {}
  inline SubscribeResult& operator=(const SubscribeResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeResult& operator=(SubscribeResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeResult* internal_default_instance() {
    return reinterpret_cast<const SubscribeResult*>(
        &_SubscribeResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(SubscribeResult& a, SubscribeResult& b) { a.Swap(&b); }
  inline void Swap(SubscribeResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubscribeResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscribeResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubscribeResult& from) { SubscribeResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubscribeResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.SubscribeResult"; }

 protected:
  explicit SubscribeResult(::google::protobuf::Arena* arena);
  SubscribeResult(::google::protobuf::Arena* arena, const SubscribeResult& from);
  SubscribeResult(::google::protobuf::Arena* arena, SubscribeResult&& from) noexcept
      : SubscribeResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPublicationsFieldNumber = 7,
    kEpochFieldNumber = 6,
    kDataFieldNumber = 11,
    kTtlFieldNumber = 2,
    kExpiresFieldNumber = 1,
    kRecoverableFieldNumber = 3,
    kRecoveredFieldNumber = 8,
    kPositionedFieldNumber = 10,
    kOffsetFieldNumber = 9,
    kWasRecoveringFieldNumber = 12,
    kDeltaFieldNumber = 13,
  };
  // repeated .centrifugal.centrifuge.protocol.Publication publications = 7;
  int publications_size() const;
  private:
  int _internal_publications_size() const;

  public:
  void clear_publications() ;
  ::centrifugal::centrifuge::protocol::Publication* mutable_publications(int index);
  ::google::protobuf::RepeatedPtrField<::centrifugal::centrifuge::protocol::Publication>* mutable_publications();

  private:
  const ::google::protobuf::RepeatedPtrField<::centrifugal::centrifuge::protocol::Publication>& _internal_publications() const;
  ::google::protobuf::RepeatedPtrField<::centrifugal::centrifuge::protocol::Publication>* _internal_mutable_publications();
  public:
  const ::centrifugal::centrifuge::protocol::Publication& publications(int index) const;
  ::centrifugal::centrifuge::protocol::Publication* add_publications();
  const ::google::protobuf::RepeatedPtrField<::centrifugal::centrifuge::protocol::Publication>& publications() const;
  // string epoch = 6;
  void clear_epoch() ;
  const std::string& epoch() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_epoch(Arg_&& arg, Args_... args);
  std::string* mutable_epoch();
  PROTOBUF_NODISCARD std::string* release_epoch();
  void set_allocated_epoch(std::string* value);

  private:
  const std::string& _internal_epoch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_epoch(
      const std::string& value);
  std::string* _internal_mutable_epoch();

  public:
  // bytes data = 11;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // uint32 ttl = 2;
  void clear_ttl() ;
  ::uint32_t ttl() const;
  void set_ttl(::uint32_t value);

  private:
  ::uint32_t _internal_ttl() const;
  void _internal_set_ttl(::uint32_t value);

  public:
  // bool expires = 1;
  void clear_expires() ;
  bool expires() const;
  void set_expires(bool value);

  private:
  bool _internal_expires() const;
  void _internal_set_expires(bool value);

  public:
  // bool recoverable = 3;
  void clear_recoverable() ;
  bool recoverable() const;
  void set_recoverable(bool value);

  private:
  bool _internal_recoverable() const;
  void _internal_set_recoverable(bool value);

  public:
  // bool recovered = 8;
  void clear_recovered() ;
  bool recovered() const;
  void set_recovered(bool value);

  private:
  bool _internal_recovered() const;
  void _internal_set_recovered(bool value);

  public:
  // bool positioned = 10;
  void clear_positioned() ;
  bool positioned() const;
  void set_positioned(bool value);

  private:
  bool _internal_positioned() const;
  void _internal_set_positioned(bool value);

  public:
  // uint64 offset = 9;
  void clear_offset() ;
  ::uint64_t offset() const;
  void set_offset(::uint64_t value);

  private:
  ::uint64_t _internal_offset() const;
  void _internal_set_offset(::uint64_t value);

  public:
  // bool was_recovering = 12;
  void clear_was_recovering() ;
  bool was_recovering() const;
  void set_was_recovering(bool value);

  private:
  bool _internal_was_recovering() const;
  void _internal_set_was_recovering(bool value);

  public:
  // bool delta = 13;
  void clear_delta() ;
  bool delta() const;
  void set_delta(bool value);

  private:
  bool _internal_delta() const;
  void _internal_set_delta(bool value);

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.SubscribeResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 1,
      69, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeResult& from_msg);
    ::google::protobuf::RepeatedPtrField< ::centrifugal::centrifuge::protocol::Publication > publications_;
    ::google::protobuf::internal::ArenaStringPtr epoch_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::uint32_t ttl_;
    bool expires_;
    bool recoverable_;
    bool recovered_;
    bool positioned_;
    ::uint64_t offset_;
    bool was_recovering_;
    bool delta_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class PresenceResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.PresenceResult) */ {
 public:
  inline PresenceResult() : PresenceResult(nullptr) {}
  ~PresenceResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PresenceResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PresenceResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PresenceResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline PresenceResult(const PresenceResult& from) : PresenceResult(nullptr, from) {}
  inline PresenceResult(PresenceResult&& from) noexcept
      : PresenceResult(nullptr, std::move(from)) {}
  inline PresenceResult& operator=(const PresenceResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PresenceResult& operator=(PresenceResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PresenceResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PresenceResult* internal_default_instance() {
    return reinterpret_cast<const PresenceResult*>(
        &_PresenceResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 34;
  friend void swap(PresenceResult& a, PresenceResult& b) { a.Swap(&b); }
  inline void Swap(PresenceResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PresenceResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PresenceResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PresenceResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PresenceResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PresenceResult& from) { PresenceResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PresenceResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.PresenceResult"; }

 protected:
  explicit PresenceResult(::google::protobuf::Arena* arena);
  PresenceResult(::google::protobuf::Arena* arena, const PresenceResult& from);
  PresenceResult(::google::protobuf::Arena* arena, PresenceResult&& from) noexcept
      : PresenceResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPresenceFieldNumber = 1,
  };
  // map<string, .centrifugal.centrifuge.protocol.ClientInfo> presence = 1;
  int presence_size() const;
  private:
  int _internal_presence_size() const;

  public:
  void clear_presence() ;
  const ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::ClientInfo>& presence() const;
  ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::ClientInfo>* mutable_presence();

  private:
  const ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::ClientInfo>& _internal_presence() const;
  ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::ClientInfo>* _internal_mutable_presence();

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.PresenceResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 2,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PresenceResult& from_msg);
    ::google::protobuf::internal::MapField<PresenceResult_PresenceEntry_DoNotUse, std::string, ::centrifugal::centrifuge::protocol::ClientInfo,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        presence_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class HistoryResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.HistoryResult) */ {
 public:
  inline HistoryResult() : HistoryResult(nullptr) {}
  ~HistoryResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HistoryResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HistoryResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HistoryResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline HistoryResult(const HistoryResult& from) : HistoryResult(nullptr, from) {}
  inline HistoryResult(HistoryResult&& from) noexcept
      : HistoryResult(nullptr, std::move(from)) {}
  inline HistoryResult& operator=(const HistoryResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryResult& operator=(HistoryResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HistoryResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistoryResult* internal_default_instance() {
    return reinterpret_cast<const HistoryResult*>(
        &_HistoryResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 39;
  friend void swap(HistoryResult& a, HistoryResult& b) { a.Swap(&b); }
  inline void Swap(HistoryResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoryResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HistoryResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HistoryResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HistoryResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HistoryResult& from) { HistoryResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HistoryResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.HistoryResult"; }

 protected:
  explicit HistoryResult(::google::protobuf::Arena* arena);
  HistoryResult(::google::protobuf::Arena* arena, const HistoryResult& from);
  HistoryResult(::google::protobuf::Arena* arena, HistoryResult&& from) noexcept
      : HistoryResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPublicationsFieldNumber = 1,
    kEpochFieldNumber = 2,
    kOffsetFieldNumber = 3,
  };
  // repeated .centrifugal.centrifuge.protocol.Publication publications = 1;
  int publications_size() const;
  private:
  int _internal_publications_size() const;

  public:
  void clear_publications() ;
  ::centrifugal::centrifuge::protocol::Publication* mutable_publications(int index);
  ::google::protobuf::RepeatedPtrField<::centrifugal::centrifuge::protocol::Publication>* mutable_publications();

  private:
  const ::google::protobuf::RepeatedPtrField<::centrifugal::centrifuge::protocol::Publication>& _internal_publications() const;
  ::google::protobuf::RepeatedPtrField<::centrifugal::centrifuge::protocol::Publication>* _internal_mutable_publications();
  public:
  const ::centrifugal::centrifuge::protocol::Publication& publications(int index) const;
  ::centrifugal::centrifuge::protocol::Publication* add_publications();
  const ::google::protobuf::RepeatedPtrField<::centrifugal::centrifuge::protocol::Publication>& publications() const;
  // string epoch = 2;
  void clear_epoch() ;
  const std::string& epoch() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_epoch(Arg_&& arg, Args_... args);
  std::string* mutable_epoch();
  PROTOBUF_NODISCARD std::string* release_epoch();
  void set_allocated_epoch(std::string* value);

  private:
  const std::string& _internal_epoch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_epoch(
      const std::string& value);
  std::string* _internal_mutable_epoch();

  public:
  // uint64 offset = 3;
  void clear_offset() ;
  ::uint64_t offset() const;
  void set_offset(::uint64_t value);

  private:
  ::uint64_t _internal_offset() const;
  void _internal_set_offset(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.HistoryResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HistoryResult& from_msg);
    ::google::protobuf::RepeatedPtrField< ::centrifugal::centrifuge::protocol::Publication > publications_;
    ::google::protobuf::internal::ArenaStringPtr epoch_;
    ::uint64_t offset_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class ConnectRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.ConnectRequest) */ {
 public:
  inline ConnectRequest() : ConnectRequest(nullptr) {}
  ~ConnectRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConnectRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConnectRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConnectRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConnectRequest(const ConnectRequest& from) : ConnectRequest(nullptr, from) {}
  inline ConnectRequest(ConnectRequest&& from) noexcept
      : ConnectRequest(nullptr, std::move(from)) {}
  inline ConnectRequest& operator=(const ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectRequest& operator=(ConnectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectRequest*>(
        &_ConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(ConnectRequest& a, ConnectRequest& b) { a.Swap(&b); }
  inline void Swap(ConnectRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConnectRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConnectRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConnectRequest& from) { ConnectRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConnectRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.ConnectRequest"; }

 protected:
  explicit ConnectRequest(::google::protobuf::Arena* arena);
  ConnectRequest(::google::protobuf::Arena* arena, const ConnectRequest& from);
  ConnectRequest(::google::protobuf::Arena* arena, ConnectRequest&& from) noexcept
      : ConnectRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSubsFieldNumber = 3,
    kHeadersFieldNumber = 6,
    kTokenFieldNumber = 1,
    kDataFieldNumber = 2,
    kNameFieldNumber = 4,
    kVersionFieldNumber = 5,
  };
  // map<string, .centrifugal.centrifuge.protocol.SubscribeRequest> subs = 3;
  int subs_size() const;
  private:
  int _internal_subs_size() const;

  public:
  void clear_subs() ;
  const ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeRequest>& subs() const;
  ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeRequest>* mutable_subs();

  private:
  const ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeRequest>& _internal_subs() const;
  ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeRequest>* _internal_mutable_subs();

  public:
  // map<string, string> headers = 6;
  int headers_size() const;
  private:
  int _internal_headers_size() const;

  public:
  void clear_headers() ;
  const ::google::protobuf::Map<std::string, std::string>& headers() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_headers();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_headers() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_headers();

  public:
  // string token = 1;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // string name = 4;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string version = 5;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.ConnectRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 3,
      82, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConnectRequest& from_msg);
    ::google::protobuf::internal::MapField<ConnectRequest_SubsEntry_DoNotUse, std::string, ::centrifugal::centrifuge::protocol::SubscribeRequest,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        subs_;
    ::google::protobuf::internal::MapField<ConnectRequest_HeadersEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        headers_;
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class ConnectResult_SubsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  ConnectResult_SubsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConnectResult_SubsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ConnectResult_SubsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ConnectResult_SubsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ConnectResult_SubsEntry_DoNotUse*>(
        &_ConnectResult_SubsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_protocol_2fclient_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      67, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Connect_SubsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  Connect_SubsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Connect_SubsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Connect_SubsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Connect_SubsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Connect_SubsEntry_DoNotUse*>(
        &_Connect_SubsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_protocol_2fclient_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      61, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Command final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  ~Command() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Command* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Command));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Command(
      ::google::protobuf::internal::ConstantInitialized);

  inline Command(const Command& from) : Command(nullptr, from) {}
  inline Command(Command&& from) noexcept
      : Command(nullptr, std::move(from)) {}
  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
        &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Command& a, Command& b) { a.Swap(&b); }
  inline void Swap(Command* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Command>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Command& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Command& from) { Command::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Command* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.Command"; }

 protected:
  explicit Command(::google::protobuf::Arena* arena);
  Command(::google::protobuf::Arena* arena, const Command& from);
  Command(::google::protobuf::Arena* arena, Command&& from) noexcept
      : Command(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConnectFieldNumber = 4,
    kSubscribeFieldNumber = 5,
    kUnsubscribeFieldNumber = 6,
    kPublishFieldNumber = 7,
    kPresenceFieldNumber = 8,
    kPresenceStatsFieldNumber = 9,
    kHistoryFieldNumber = 10,
    kPingFieldNumber = 11,
    kSendFieldNumber = 12,
    kRpcFieldNumber = 13,
    kRefreshFieldNumber = 14,
    kSubRefreshFieldNumber = 15,
    kIdFieldNumber = 1,
  };
  // .centrifugal.centrifuge.protocol.ConnectRequest connect = 4;
  bool has_connect() const;
  void clear_connect() ;
  const ::centrifugal::centrifuge::protocol::ConnectRequest& connect() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::ConnectRequest* release_connect();
  ::centrifugal::centrifuge::protocol::ConnectRequest* mutable_connect();
  void set_allocated_connect(::centrifugal::centrifuge::protocol::ConnectRequest* value);
  void unsafe_arena_set_allocated_connect(::centrifugal::centrifuge::protocol::ConnectRequest* value);
  ::centrifugal::centrifuge::protocol::ConnectRequest* unsafe_arena_release_connect();

  private:
  const ::centrifugal::centrifuge::protocol::ConnectRequest& _internal_connect() const;
  ::centrifugal::centrifuge::protocol::ConnectRequest* _internal_mutable_connect();

  public:
  // .centrifugal.centrifuge.protocol.SubscribeRequest subscribe = 5;
  bool has_subscribe() const;
  void clear_subscribe() ;
  const ::centrifugal::centrifuge::protocol::SubscribeRequest& subscribe() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::SubscribeRequest* release_subscribe();
  ::centrifugal::centrifuge::protocol::SubscribeRequest* mutable_subscribe();
  void set_allocated_subscribe(::centrifugal::centrifuge::protocol::SubscribeRequest* value);
  void unsafe_arena_set_allocated_subscribe(::centrifugal::centrifuge::protocol::SubscribeRequest* value);
  ::centrifugal::centrifuge::protocol::SubscribeRequest* unsafe_arena_release_subscribe();

  private:
  const ::centrifugal::centrifuge::protocol::SubscribeRequest& _internal_subscribe() const;
  ::centrifugal::centrifuge::protocol::SubscribeRequest* _internal_mutable_subscribe();

  public:
  // .centrifugal.centrifuge.protocol.UnsubscribeRequest unsubscribe = 6;
  bool has_unsubscribe() const;
  void clear_unsubscribe() ;
  const ::centrifugal::centrifuge::protocol::UnsubscribeRequest& unsubscribe() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::UnsubscribeRequest* release_unsubscribe();
  ::centrifugal::centrifuge::protocol::UnsubscribeRequest* mutable_unsubscribe();
  void set_allocated_unsubscribe(::centrifugal::centrifuge::protocol::UnsubscribeRequest* value);
  void unsafe_arena_set_allocated_unsubscribe(::centrifugal::centrifuge::protocol::UnsubscribeRequest* value);
  ::centrifugal::centrifuge::protocol::UnsubscribeRequest* unsafe_arena_release_unsubscribe();

  private:
  const ::centrifugal::centrifuge::protocol::UnsubscribeRequest& _internal_unsubscribe() const;
  ::centrifugal::centrifuge::protocol::UnsubscribeRequest* _internal_mutable_unsubscribe();

  public:
  // .centrifugal.centrifuge.protocol.PublishRequest publish = 7;
  bool has_publish() const;
  void clear_publish() ;
  const ::centrifugal::centrifuge::protocol::PublishRequest& publish() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::PublishRequest* release_publish();
  ::centrifugal::centrifuge::protocol::PublishRequest* mutable_publish();
  void set_allocated_publish(::centrifugal::centrifuge::protocol::PublishRequest* value);
  void unsafe_arena_set_allocated_publish(::centrifugal::centrifuge::protocol::PublishRequest* value);
  ::centrifugal::centrifuge::protocol::PublishRequest* unsafe_arena_release_publish();

  private:
  const ::centrifugal::centrifuge::protocol::PublishRequest& _internal_publish() const;
  ::centrifugal::centrifuge::protocol::PublishRequest* _internal_mutable_publish();

  public:
  // .centrifugal.centrifuge.protocol.PresenceRequest presence = 8;
  bool has_presence() const;
  void clear_presence() ;
  const ::centrifugal::centrifuge::protocol::PresenceRequest& presence() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::PresenceRequest* release_presence();
  ::centrifugal::centrifuge::protocol::PresenceRequest* mutable_presence();
  void set_allocated_presence(::centrifugal::centrifuge::protocol::PresenceRequest* value);
  void unsafe_arena_set_allocated_presence(::centrifugal::centrifuge::protocol::PresenceRequest* value);
  ::centrifugal::centrifuge::protocol::PresenceRequest* unsafe_arena_release_presence();

  private:
  const ::centrifugal::centrifuge::protocol::PresenceRequest& _internal_presence() const;
  ::centrifugal::centrifuge::protocol::PresenceRequest* _internal_mutable_presence();

  public:
  // .centrifugal.centrifuge.protocol.PresenceStatsRequest presence_stats = 9;
  bool has_presence_stats() const;
  void clear_presence_stats() ;
  const ::centrifugal::centrifuge::protocol::PresenceStatsRequest& presence_stats() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::PresenceStatsRequest* release_presence_stats();
  ::centrifugal::centrifuge::protocol::PresenceStatsRequest* mutable_presence_stats();
  void set_allocated_presence_stats(::centrifugal::centrifuge::protocol::PresenceStatsRequest* value);
  void unsafe_arena_set_allocated_presence_stats(::centrifugal::centrifuge::protocol::PresenceStatsRequest* value);
  ::centrifugal::centrifuge::protocol::PresenceStatsRequest* unsafe_arena_release_presence_stats();

  private:
  const ::centrifugal::centrifuge::protocol::PresenceStatsRequest& _internal_presence_stats() const;
  ::centrifugal::centrifuge::protocol::PresenceStatsRequest* _internal_mutable_presence_stats();

  public:
  // .centrifugal.centrifuge.protocol.HistoryRequest history = 10;
  bool has_history() const;
  void clear_history() ;
  const ::centrifugal::centrifuge::protocol::HistoryRequest& history() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::HistoryRequest* release_history();
  ::centrifugal::centrifuge::protocol::HistoryRequest* mutable_history();
  void set_allocated_history(::centrifugal::centrifuge::protocol::HistoryRequest* value);
  void unsafe_arena_set_allocated_history(::centrifugal::centrifuge::protocol::HistoryRequest* value);
  ::centrifugal::centrifuge::protocol::HistoryRequest* unsafe_arena_release_history();

  private:
  const ::centrifugal::centrifuge::protocol::HistoryRequest& _internal_history() const;
  ::centrifugal::centrifuge::protocol::HistoryRequest* _internal_mutable_history();

  public:
  // .centrifugal.centrifuge.protocol.PingRequest ping = 11;
  bool has_ping() const;
  void clear_ping() ;
  const ::centrifugal::centrifuge::protocol::PingRequest& ping() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::PingRequest* release_ping();
  ::centrifugal::centrifuge::protocol::PingRequest* mutable_ping();
  void set_allocated_ping(::centrifugal::centrifuge::protocol::PingRequest* value);
  void unsafe_arena_set_allocated_ping(::centrifugal::centrifuge::protocol::PingRequest* value);
  ::centrifugal::centrifuge::protocol::PingRequest* unsafe_arena_release_ping();

  private:
  const ::centrifugal::centrifuge::protocol::PingRequest& _internal_ping() const;
  ::centrifugal::centrifuge::protocol::PingRequest* _internal_mutable_ping();

  public:
  // .centrifugal.centrifuge.protocol.SendRequest send = 12;
  bool has_send() const;
  void clear_send() ;
  const ::centrifugal::centrifuge::protocol::SendRequest& send() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::SendRequest* release_send();
  ::centrifugal::centrifuge::protocol::SendRequest* mutable_send();
  void set_allocated_send(::centrifugal::centrifuge::protocol::SendRequest* value);
  void unsafe_arena_set_allocated_send(::centrifugal::centrifuge::protocol::SendRequest* value);
  ::centrifugal::centrifuge::protocol::SendRequest* unsafe_arena_release_send();

  private:
  const ::centrifugal::centrifuge::protocol::SendRequest& _internal_send() const;
  ::centrifugal::centrifuge::protocol::SendRequest* _internal_mutable_send();

  public:
  // .centrifugal.centrifuge.protocol.RPCRequest rpc = 13;
  bool has_rpc() const;
  void clear_rpc() ;
  const ::centrifugal::centrifuge::protocol::RPCRequest& rpc() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::RPCRequest* release_rpc();
  ::centrifugal::centrifuge::protocol::RPCRequest* mutable_rpc();
  void set_allocated_rpc(::centrifugal::centrifuge::protocol::RPCRequest* value);
  void unsafe_arena_set_allocated_rpc(::centrifugal::centrifuge::protocol::RPCRequest* value);
  ::centrifugal::centrifuge::protocol::RPCRequest* unsafe_arena_release_rpc();

  private:
  const ::centrifugal::centrifuge::protocol::RPCRequest& _internal_rpc() const;
  ::centrifugal::centrifuge::protocol::RPCRequest* _internal_mutable_rpc();

  public:
  // .centrifugal.centrifuge.protocol.RefreshRequest refresh = 14;
  bool has_refresh() const;
  void clear_refresh() ;
  const ::centrifugal::centrifuge::protocol::RefreshRequest& refresh() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::RefreshRequest* release_refresh();
  ::centrifugal::centrifuge::protocol::RefreshRequest* mutable_refresh();
  void set_allocated_refresh(::centrifugal::centrifuge::protocol::RefreshRequest* value);
  void unsafe_arena_set_allocated_refresh(::centrifugal::centrifuge::protocol::RefreshRequest* value);
  ::centrifugal::centrifuge::protocol::RefreshRequest* unsafe_arena_release_refresh();

  private:
  const ::centrifugal::centrifuge::protocol::RefreshRequest& _internal_refresh() const;
  ::centrifugal::centrifuge::protocol::RefreshRequest* _internal_mutable_refresh();

  public:
  // .centrifugal.centrifuge.protocol.SubRefreshRequest sub_refresh = 15;
  bool has_sub_refresh() const;
  void clear_sub_refresh() ;
  const ::centrifugal::centrifuge::protocol::SubRefreshRequest& sub_refresh() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::SubRefreshRequest* release_sub_refresh();
  ::centrifugal::centrifuge::protocol::SubRefreshRequest* mutable_sub_refresh();
  void set_allocated_sub_refresh(::centrifugal::centrifuge::protocol::SubRefreshRequest* value);
  void unsafe_arena_set_allocated_sub_refresh(::centrifugal::centrifuge::protocol::SubRefreshRequest* value);
  ::centrifugal::centrifuge::protocol::SubRefreshRequest* unsafe_arena_release_sub_refresh();

  private:
  const ::centrifugal::centrifuge::protocol::SubRefreshRequest& _internal_sub_refresh() const;
  ::centrifugal::centrifuge::protocol::SubRefreshRequest* _internal_mutable_sub_refresh();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.Command)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 12,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Command& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::centrifugal::centrifuge::protocol::ConnectRequest* connect_;
    ::centrifugal::centrifuge::protocol::SubscribeRequest* subscribe_;
    ::centrifugal::centrifuge::protocol::UnsubscribeRequest* unsubscribe_;
    ::centrifugal::centrifuge::protocol::PublishRequest* publish_;
    ::centrifugal::centrifuge::protocol::PresenceRequest* presence_;
    ::centrifugal::centrifuge::protocol::PresenceStatsRequest* presence_stats_;
    ::centrifugal::centrifuge::protocol::HistoryRequest* history_;
    ::centrifugal::centrifuge::protocol::PingRequest* ping_;
    ::centrifugal::centrifuge::protocol::SendRequest* send_;
    ::centrifugal::centrifuge::protocol::RPCRequest* rpc_;
    ::centrifugal::centrifuge::protocol::RefreshRequest* refresh_;
    ::centrifugal::centrifuge::protocol::SubRefreshRequest* sub_refresh_;
    ::uint32_t id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class ConnectResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.ConnectResult) */ {
 public:
  inline ConnectResult() : ConnectResult(nullptr) {}
  ~ConnectResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConnectResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConnectResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConnectResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConnectResult(const ConnectResult& from) : ConnectResult(nullptr, from) {}
  inline ConnectResult(ConnectResult&& from) noexcept
      : ConnectResult(nullptr, std::move(from)) {}
  inline ConnectResult& operator=(const ConnectResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectResult& operator=(ConnectResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectResult* internal_default_instance() {
    return reinterpret_cast<const ConnectResult*>(
        &_ConnectResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(ConnectResult& a, ConnectResult& b) { a.Swap(&b); }
  inline void Swap(ConnectResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConnectResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConnectResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConnectResult& from) { ConnectResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConnectResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.ConnectResult"; }

 protected:
  explicit ConnectResult(::google::protobuf::Arena* arena);
  ConnectResult(::google::protobuf::Arena* arena, const ConnectResult& from);
  ConnectResult(::google::protobuf::Arena* arena, ConnectResult&& from) noexcept
      : ConnectResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSubsFieldNumber = 6,
    kClientFieldNumber = 1,
    kVersionFieldNumber = 2,
    kDataFieldNumber = 5,
    kSessionFieldNumber = 9,
    kNodeFieldNumber = 10,
    kTtlFieldNumber = 4,
    kExpiresFieldNumber = 3,
    kPongFieldNumber = 8,
    kTimeFieldNumber = 11,
    kPingFieldNumber = 7,
  };
  // map<string, .centrifugal.centrifuge.protocol.SubscribeResult> subs = 6;
  int subs_size() const;
  private:
  int _internal_subs_size() const;

  public:
  void clear_subs() ;
  const ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeResult>& subs() const;
  ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeResult>* mutable_subs();

  private:
  const ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeResult>& _internal_subs() const;
  ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeResult>* _internal_mutable_subs();

  public:
  // string client = 1;
  void clear_client() ;
  const std::string& client() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client(Arg_&& arg, Args_... args);
  std::string* mutable_client();
  PROTOBUF_NODISCARD std::string* release_client();
  void set_allocated_client(std::string* value);

  private:
  const std::string& _internal_client() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client(
      const std::string& value);
  std::string* _internal_mutable_client();

  public:
  // string version = 2;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // bytes data = 5;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // string session = 9;
  void clear_session() ;
  const std::string& session() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session(Arg_&& arg, Args_... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* value);

  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(
      const std::string& value);
  std::string* _internal_mutable_session();

  public:
  // string node = 10;
  void clear_node() ;
  const std::string& node() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node(Arg_&& arg, Args_... args);
  std::string* mutable_node();
  PROTOBUF_NODISCARD std::string* release_node();
  void set_allocated_node(std::string* value);

  private:
  const std::string& _internal_node() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node(
      const std::string& value);
  std::string* _internal_mutable_node();

  public:
  // uint32 ttl = 4;
  void clear_ttl() ;
  ::uint32_t ttl() const;
  void set_ttl(::uint32_t value);

  private:
  ::uint32_t _internal_ttl() const;
  void _internal_set_ttl(::uint32_t value);

  public:
  // bool expires = 3;
  void clear_expires() ;
  bool expires() const;
  void set_expires(bool value);

  private:
  bool _internal_expires() const;
  void _internal_set_expires(bool value);

  public:
  // bool pong = 8;
  void clear_pong() ;
  bool pong() const;
  void set_pong(bool value);

  private:
  bool _internal_pong() const;
  void _internal_set_pong(bool value);

  public:
  // int64 time = 11;
  void clear_time() ;
  ::int64_t time() const;
  void set_time(::int64_t value);

  private:
  ::int64_t _internal_time() const;
  void _internal_set_time(::int64_t value);

  public:
  // uint32 ping = 7;
  void clear_ping() ;
  ::uint32_t ping() const;
  void set_ping(::uint32_t value);

  private:
  ::uint32_t _internal_ping() const;
  void _internal_set_ping(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.ConnectResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 2,
      90, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConnectResult& from_msg);
    ::google::protobuf::internal::MapField<ConnectResult_SubsEntry_DoNotUse, std::string, ::centrifugal::centrifuge::protocol::SubscribeResult,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        subs_;
    ::google::protobuf::internal::ArenaStringPtr client_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr session_;
    ::google::protobuf::internal::ArenaStringPtr node_;
    ::uint32_t ttl_;
    bool expires_;
    bool pong_;
    ::int64_t time_;
    ::uint32_t ping_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class Connect final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.Connect) */ {
 public:
  inline Connect() : Connect(nullptr) {}
  ~Connect() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Connect* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Connect));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Connect(
      ::google::protobuf::internal::ConstantInitialized);

  inline Connect(const Connect& from) : Connect(nullptr, from) {}
  inline Connect(Connect&& from) noexcept
      : Connect(nullptr, std::move(from)) {}
  inline Connect& operator=(const Connect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Connect& operator=(Connect&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Connect& default_instance() {
    return *internal_default_instance();
  }
  static inline const Connect* internal_default_instance() {
    return reinterpret_cast<const Connect*>(
        &_Connect_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(Connect& a, Connect& b) { a.Swap(&b); }
  inline void Swap(Connect* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Connect* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Connect* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Connect>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Connect& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Connect& from) { Connect::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Connect* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.Connect"; }

 protected:
  explicit Connect(::google::protobuf::Arena* arena);
  Connect(::google::protobuf::Arena* arena, const Connect& from);
  Connect(::google::protobuf::Arena* arena, Connect&& from) noexcept
      : Connect(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSubsFieldNumber = 4,
    kClientFieldNumber = 1,
    kVersionFieldNumber = 2,
    kDataFieldNumber = 3,
    kSessionFieldNumber = 9,
    kNodeFieldNumber = 10,
    kTtlFieldNumber = 6,
    kExpiresFieldNumber = 5,
    kPongFieldNumber = 8,
    kTimeFieldNumber = 11,
    kPingFieldNumber = 7,
  };
  // map<string, .centrifugal.centrifuge.protocol.SubscribeResult> subs = 4;
  int subs_size() const;
  private:
  int _internal_subs_size() const;

  public:
  void clear_subs() ;
  const ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeResult>& subs() const;
  ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeResult>* mutable_subs();

  private:
  const ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeResult>& _internal_subs() const;
  ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeResult>* _internal_mutable_subs();

  public:
  // string client = 1;
  void clear_client() ;
  const std::string& client() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client(Arg_&& arg, Args_... args);
  std::string* mutable_client();
  PROTOBUF_NODISCARD std::string* release_client();
  void set_allocated_client(std::string* value);

  private:
  const std::string& _internal_client() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client(
      const std::string& value);
  std::string* _internal_mutable_client();

  public:
  // string version = 2;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // bytes data = 3;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // string session = 9;
  void clear_session() ;
  const std::string& session() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session(Arg_&& arg, Args_... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* value);

  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(
      const std::string& value);
  std::string* _internal_mutable_session();

  public:
  // string node = 10;
  void clear_node() ;
  const std::string& node() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node(Arg_&& arg, Args_... args);
  std::string* mutable_node();
  PROTOBUF_NODISCARD std::string* release_node();
  void set_allocated_node(std::string* value);

  private:
  const std::string& _internal_node() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node(
      const std::string& value);
  std::string* _internal_mutable_node();

  public:
  // uint32 ttl = 6;
  void clear_ttl() ;
  ::uint32_t ttl() const;
  void set_ttl(::uint32_t value);

  private:
  ::uint32_t _internal_ttl() const;
  void _internal_set_ttl(::uint32_t value);

  public:
  // bool expires = 5;
  void clear_expires() ;
  bool expires() const;
  void set_expires(bool value);

  private:
  bool _internal_expires() const;
  void _internal_set_expires(bool value);

  public:
  // bool pong = 8;
  void clear_pong() ;
  bool pong() const;
  void set_pong(bool value);

  private:
  bool _internal_pong() const;
  void _internal_set_pong(bool value);

  public:
  // int64 time = 11;
  void clear_time() ;
  ::int64_t time() const;
  void set_time(::int64_t value);

  private:
  ::int64_t _internal_time() const;
  void _internal_set_time(::int64_t value);

  public:
  // uint32 ping = 7;
  void clear_ping() ;
  ::uint32_t ping() const;
  void set_ping(::uint32_t value);

  private:
  ::uint32_t _internal_ping() const;
  void _internal_set_ping(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.Connect)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 2,
      84, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Connect& from_msg);
    ::google::protobuf::internal::MapField<Connect_SubsEntry_DoNotUse, std::string, ::centrifugal::centrifuge::protocol::SubscribeResult,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        subs_;
    ::google::protobuf::internal::ArenaStringPtr client_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr session_;
    ::google::protobuf::internal::ArenaStringPtr node_;
    ::uint32_t ttl_;
    bool expires_;
    bool pong_;
    ::int64_t time_;
    ::uint32_t ping_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class Push final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.Push) */ {
 public:
  inline Push() : Push(nullptr) {}
  ~Push() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Push* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Push));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Push(
      ::google::protobuf::internal::ConstantInitialized);

  inline Push(const Push& from) : Push(nullptr, from) {}
  inline Push(Push&& from) noexcept
      : Push(nullptr, std::move(from)) {}
  inline Push& operator=(const Push& from) {
    CopyFrom(from);
    return *this;
  }
  inline Push& operator=(Push&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Push& default_instance() {
    return *internal_default_instance();
  }
  static inline const Push* internal_default_instance() {
    return reinterpret_cast<const Push*>(
        &_Push_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Push& a, Push& b) { a.Swap(&b); }
  inline void Swap(Push* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Push* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Push* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Push>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Push& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Push& from) { Push::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Push* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.Push"; }

 protected:
  explicit Push(::google::protobuf::Arena* arena);
  Push(::google::protobuf::Arena* arena, const Push& from);
  Push(::google::protobuf::Arena* arena, Push&& from) noexcept
      : Push(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChannelFieldNumber = 2,
    kPubFieldNumber = 4,
    kJoinFieldNumber = 5,
    kLeaveFieldNumber = 6,
    kUnsubscribeFieldNumber = 7,
    kMessageFieldNumber = 8,
    kSubscribeFieldNumber = 9,
    kConnectFieldNumber = 10,
    kDisconnectFieldNumber = 11,
    kRefreshFieldNumber = 12,
  };
  // string channel = 2;
  void clear_channel() ;
  const std::string& channel() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel(Arg_&& arg, Args_... args);
  std::string* mutable_channel();
  PROTOBUF_NODISCARD std::string* release_channel();
  void set_allocated_channel(std::string* value);

  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(
      const std::string& value);
  std::string* _internal_mutable_channel();

  public:
  // .centrifugal.centrifuge.protocol.Publication pub = 4;
  bool has_pub() const;
  void clear_pub() ;
  const ::centrifugal::centrifuge::protocol::Publication& pub() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::Publication* release_pub();
  ::centrifugal::centrifuge::protocol::Publication* mutable_pub();
  void set_allocated_pub(::centrifugal::centrifuge::protocol::Publication* value);
  void unsafe_arena_set_allocated_pub(::centrifugal::centrifuge::protocol::Publication* value);
  ::centrifugal::centrifuge::protocol::Publication* unsafe_arena_release_pub();

  private:
  const ::centrifugal::centrifuge::protocol::Publication& _internal_pub() const;
  ::centrifugal::centrifuge::protocol::Publication* _internal_mutable_pub();

  public:
  // .centrifugal.centrifuge.protocol.Join join = 5;
  bool has_join() const;
  void clear_join() ;
  const ::centrifugal::centrifuge::protocol::Join& join() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::Join* release_join();
  ::centrifugal::centrifuge::protocol::Join* mutable_join();
  void set_allocated_join(::centrifugal::centrifuge::protocol::Join* value);
  void unsafe_arena_set_allocated_join(::centrifugal::centrifuge::protocol::Join* value);
  ::centrifugal::centrifuge::protocol::Join* unsafe_arena_release_join();

  private:
  const ::centrifugal::centrifuge::protocol::Join& _internal_join() const;
  ::centrifugal::centrifuge::protocol::Join* _internal_mutable_join();

  public:
  // .centrifugal.centrifuge.protocol.Leave leave = 6;
  bool has_leave() const;
  void clear_leave() ;
  const ::centrifugal::centrifuge::protocol::Leave& leave() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::Leave* release_leave();
  ::centrifugal::centrifuge::protocol::Leave* mutable_leave();
  void set_allocated_leave(::centrifugal::centrifuge::protocol::Leave* value);
  void unsafe_arena_set_allocated_leave(::centrifugal::centrifuge::protocol::Leave* value);
  ::centrifugal::centrifuge::protocol::Leave* unsafe_arena_release_leave();

  private:
  const ::centrifugal::centrifuge::protocol::Leave& _internal_leave() const;
  ::centrifugal::centrifuge::protocol::Leave* _internal_mutable_leave();

  public:
  // .centrifugal.centrifuge.protocol.Unsubscribe unsubscribe = 7;
  bool has_unsubscribe() const;
  void clear_unsubscribe() ;
  const ::centrifugal::centrifuge::protocol::Unsubscribe& unsubscribe() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::Unsubscribe* release_unsubscribe();
  ::centrifugal::centrifuge::protocol::Unsubscribe* mutable_unsubscribe();
  void set_allocated_unsubscribe(::centrifugal::centrifuge::protocol::Unsubscribe* value);
  void unsafe_arena_set_allocated_unsubscribe(::centrifugal::centrifuge::protocol::Unsubscribe* value);
  ::centrifugal::centrifuge::protocol::Unsubscribe* unsafe_arena_release_unsubscribe();

  private:
  const ::centrifugal::centrifuge::protocol::Unsubscribe& _internal_unsubscribe() const;
  ::centrifugal::centrifuge::protocol::Unsubscribe* _internal_mutable_unsubscribe();

  public:
  // .centrifugal.centrifuge.protocol.Message message = 8;
  bool has_message() const;
  void clear_message() ;
  const ::centrifugal::centrifuge::protocol::Message& message() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::Message* release_message();
  ::centrifugal::centrifuge::protocol::Message* mutable_message();
  void set_allocated_message(::centrifugal::centrifuge::protocol::Message* value);
  void unsafe_arena_set_allocated_message(::centrifugal::centrifuge::protocol::Message* value);
  ::centrifugal::centrifuge::protocol::Message* unsafe_arena_release_message();

  private:
  const ::centrifugal::centrifuge::protocol::Message& _internal_message() const;
  ::centrifugal::centrifuge::protocol::Message* _internal_mutable_message();

  public:
  // .centrifugal.centrifuge.protocol.Subscribe subscribe = 9;
  bool has_subscribe() const;
  void clear_subscribe() ;
  const ::centrifugal::centrifuge::protocol::Subscribe& subscribe() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::Subscribe* release_subscribe();
  ::centrifugal::centrifuge::protocol::Subscribe* mutable_subscribe();
  void set_allocated_subscribe(::centrifugal::centrifuge::protocol::Subscribe* value);
  void unsafe_arena_set_allocated_subscribe(::centrifugal::centrifuge::protocol::Subscribe* value);
  ::centrifugal::centrifuge::protocol::Subscribe* unsafe_arena_release_subscribe();

  private:
  const ::centrifugal::centrifuge::protocol::Subscribe& _internal_subscribe() const;
  ::centrifugal::centrifuge::protocol::Subscribe* _internal_mutable_subscribe();

  public:
  // .centrifugal.centrifuge.protocol.Connect connect = 10;
  bool has_connect() const;
  void clear_connect() ;
  const ::centrifugal::centrifuge::protocol::Connect& connect() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::Connect* release_connect();
  ::centrifugal::centrifuge::protocol::Connect* mutable_connect();
  void set_allocated_connect(::centrifugal::centrifuge::protocol::Connect* value);
  void unsafe_arena_set_allocated_connect(::centrifugal::centrifuge::protocol::Connect* value);
  ::centrifugal::centrifuge::protocol::Connect* unsafe_arena_release_connect();

  private:
  const ::centrifugal::centrifuge::protocol::Connect& _internal_connect() const;
  ::centrifugal::centrifuge::protocol::Connect* _internal_mutable_connect();

  public:
  // .centrifugal.centrifuge.protocol.Disconnect disconnect = 11;
  bool has_disconnect() const;
  void clear_disconnect() ;
  const ::centrifugal::centrifuge::protocol::Disconnect& disconnect() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::Disconnect* release_disconnect();
  ::centrifugal::centrifuge::protocol::Disconnect* mutable_disconnect();
  void set_allocated_disconnect(::centrifugal::centrifuge::protocol::Disconnect* value);
  void unsafe_arena_set_allocated_disconnect(::centrifugal::centrifuge::protocol::Disconnect* value);
  ::centrifugal::centrifuge::protocol::Disconnect* unsafe_arena_release_disconnect();

  private:
  const ::centrifugal::centrifuge::protocol::Disconnect& _internal_disconnect() const;
  ::centrifugal::centrifuge::protocol::Disconnect* _internal_mutable_disconnect();

  public:
  // .centrifugal.centrifuge.protocol.Refresh refresh = 12;
  bool has_refresh() const;
  void clear_refresh() ;
  const ::centrifugal::centrifuge::protocol::Refresh& refresh() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::Refresh* release_refresh();
  ::centrifugal::centrifuge::protocol::Refresh* mutable_refresh();
  void set_allocated_refresh(::centrifugal::centrifuge::protocol::Refresh* value);
  void unsafe_arena_set_allocated_refresh(::centrifugal::centrifuge::protocol::Refresh* value);
  ::centrifugal::centrifuge::protocol::Refresh* unsafe_arena_release_refresh();

  private:
  const ::centrifugal::centrifuge::protocol::Refresh& _internal_refresh() const;
  ::centrifugal::centrifuge::protocol::Refresh* _internal_mutable_refresh();

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.Push)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 9,
      60, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Push& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr channel_;
    ::centrifugal::centrifuge::protocol::Publication* pub_;
    ::centrifugal::centrifuge::protocol::Join* join_;
    ::centrifugal::centrifuge::protocol::Leave* leave_;
    ::centrifugal::centrifuge::protocol::Unsubscribe* unsubscribe_;
    ::centrifugal::centrifuge::protocol::Message* message_;
    ::centrifugal::centrifuge::protocol::Subscribe* subscribe_;
    ::centrifugal::centrifuge::protocol::Connect* connect_;
    ::centrifugal::centrifuge::protocol::Disconnect* disconnect_;
    ::centrifugal::centrifuge::protocol::Refresh* refresh_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};
// -------------------------------------------------------------------

class Reply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centrifugal.centrifuge.protocol.Reply) */ {
 public:
  inline Reply() : Reply(nullptr) {}
  ~Reply() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Reply* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Reply));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Reply(
      ::google::protobuf::internal::ConstantInitialized);

  inline Reply(const Reply& from) : Reply(nullptr, from) {}
  inline Reply(Reply&& from) noexcept
      : Reply(nullptr, std::move(from)) {}
  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reply& operator=(Reply&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Reply& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
        &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Reply& a, Reply& b) { a.Swap(&b); }
  inline void Swap(Reply* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Reply* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Reply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Reply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Reply& from) { Reply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Reply* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "centrifugal.centrifuge.protocol.Reply"; }

 protected:
  explicit Reply(::google::protobuf::Arena* arena);
  Reply(::google::protobuf::Arena* arena, const Reply& from);
  Reply(::google::protobuf::Arena* arena, Reply&& from) noexcept
      : Reply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorFieldNumber = 2,
    kPushFieldNumber = 4,
    kConnectFieldNumber = 5,
    kSubscribeFieldNumber = 6,
    kUnsubscribeFieldNumber = 7,
    kPublishFieldNumber = 8,
    kPresenceFieldNumber = 9,
    kPresenceStatsFieldNumber = 10,
    kHistoryFieldNumber = 11,
    kPingFieldNumber = 12,
    kRpcFieldNumber = 13,
    kRefreshFieldNumber = 14,
    kSubRefreshFieldNumber = 15,
    kIdFieldNumber = 1,
  };
  // .centrifugal.centrifuge.protocol.Error error = 2;
  bool has_error() const;
  void clear_error() ;
  const ::centrifugal::centrifuge::protocol::Error& error() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::Error* release_error();
  ::centrifugal::centrifuge::protocol::Error* mutable_error();
  void set_allocated_error(::centrifugal::centrifuge::protocol::Error* value);
  void unsafe_arena_set_allocated_error(::centrifugal::centrifuge::protocol::Error* value);
  ::centrifugal::centrifuge::protocol::Error* unsafe_arena_release_error();

  private:
  const ::centrifugal::centrifuge::protocol::Error& _internal_error() const;
  ::centrifugal::centrifuge::protocol::Error* _internal_mutable_error();

  public:
  // .centrifugal.centrifuge.protocol.Push push = 4;
  bool has_push() const;
  void clear_push() ;
  const ::centrifugal::centrifuge::protocol::Push& push() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::Push* release_push();
  ::centrifugal::centrifuge::protocol::Push* mutable_push();
  void set_allocated_push(::centrifugal::centrifuge::protocol::Push* value);
  void unsafe_arena_set_allocated_push(::centrifugal::centrifuge::protocol::Push* value);
  ::centrifugal::centrifuge::protocol::Push* unsafe_arena_release_push();

  private:
  const ::centrifugal::centrifuge::protocol::Push& _internal_push() const;
  ::centrifugal::centrifuge::protocol::Push* _internal_mutable_push();

  public:
  // .centrifugal.centrifuge.protocol.ConnectResult connect = 5;
  bool has_connect() const;
  void clear_connect() ;
  const ::centrifugal::centrifuge::protocol::ConnectResult& connect() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::ConnectResult* release_connect();
  ::centrifugal::centrifuge::protocol::ConnectResult* mutable_connect();
  void set_allocated_connect(::centrifugal::centrifuge::protocol::ConnectResult* value);
  void unsafe_arena_set_allocated_connect(::centrifugal::centrifuge::protocol::ConnectResult* value);
  ::centrifugal::centrifuge::protocol::ConnectResult* unsafe_arena_release_connect();

  private:
  const ::centrifugal::centrifuge::protocol::ConnectResult& _internal_connect() const;
  ::centrifugal::centrifuge::protocol::ConnectResult* _internal_mutable_connect();

  public:
  // .centrifugal.centrifuge.protocol.SubscribeResult subscribe = 6;
  bool has_subscribe() const;
  void clear_subscribe() ;
  const ::centrifugal::centrifuge::protocol::SubscribeResult& subscribe() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::SubscribeResult* release_subscribe();
  ::centrifugal::centrifuge::protocol::SubscribeResult* mutable_subscribe();
  void set_allocated_subscribe(::centrifugal::centrifuge::protocol::SubscribeResult* value);
  void unsafe_arena_set_allocated_subscribe(::centrifugal::centrifuge::protocol::SubscribeResult* value);
  ::centrifugal::centrifuge::protocol::SubscribeResult* unsafe_arena_release_subscribe();

  private:
  const ::centrifugal::centrifuge::protocol::SubscribeResult& _internal_subscribe() const;
  ::centrifugal::centrifuge::protocol::SubscribeResult* _internal_mutable_subscribe();

  public:
  // .centrifugal.centrifuge.protocol.UnsubscribeResult unsubscribe = 7;
  bool has_unsubscribe() const;
  void clear_unsubscribe() ;
  const ::centrifugal::centrifuge::protocol::UnsubscribeResult& unsubscribe() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::UnsubscribeResult* release_unsubscribe();
  ::centrifugal::centrifuge::protocol::UnsubscribeResult* mutable_unsubscribe();
  void set_allocated_unsubscribe(::centrifugal::centrifuge::protocol::UnsubscribeResult* value);
  void unsafe_arena_set_allocated_unsubscribe(::centrifugal::centrifuge::protocol::UnsubscribeResult* value);
  ::centrifugal::centrifuge::protocol::UnsubscribeResult* unsafe_arena_release_unsubscribe();

  private:
  const ::centrifugal::centrifuge::protocol::UnsubscribeResult& _internal_unsubscribe() const;
  ::centrifugal::centrifuge::protocol::UnsubscribeResult* _internal_mutable_unsubscribe();

  public:
  // .centrifugal.centrifuge.protocol.PublishResult publish = 8;
  bool has_publish() const;
  void clear_publish() ;
  const ::centrifugal::centrifuge::protocol::PublishResult& publish() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::PublishResult* release_publish();
  ::centrifugal::centrifuge::protocol::PublishResult* mutable_publish();
  void set_allocated_publish(::centrifugal::centrifuge::protocol::PublishResult* value);
  void unsafe_arena_set_allocated_publish(::centrifugal::centrifuge::protocol::PublishResult* value);
  ::centrifugal::centrifuge::protocol::PublishResult* unsafe_arena_release_publish();

  private:
  const ::centrifugal::centrifuge::protocol::PublishResult& _internal_publish() const;
  ::centrifugal::centrifuge::protocol::PublishResult* _internal_mutable_publish();

  public:
  // .centrifugal.centrifuge.protocol.PresenceResult presence = 9;
  bool has_presence() const;
  void clear_presence() ;
  const ::centrifugal::centrifuge::protocol::PresenceResult& presence() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::PresenceResult* release_presence();
  ::centrifugal::centrifuge::protocol::PresenceResult* mutable_presence();
  void set_allocated_presence(::centrifugal::centrifuge::protocol::PresenceResult* value);
  void unsafe_arena_set_allocated_presence(::centrifugal::centrifuge::protocol::PresenceResult* value);
  ::centrifugal::centrifuge::protocol::PresenceResult* unsafe_arena_release_presence();

  private:
  const ::centrifugal::centrifuge::protocol::PresenceResult& _internal_presence() const;
  ::centrifugal::centrifuge::protocol::PresenceResult* _internal_mutable_presence();

  public:
  // .centrifugal.centrifuge.protocol.PresenceStatsResult presence_stats = 10;
  bool has_presence_stats() const;
  void clear_presence_stats() ;
  const ::centrifugal::centrifuge::protocol::PresenceStatsResult& presence_stats() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::PresenceStatsResult* release_presence_stats();
  ::centrifugal::centrifuge::protocol::PresenceStatsResult* mutable_presence_stats();
  void set_allocated_presence_stats(::centrifugal::centrifuge::protocol::PresenceStatsResult* value);
  void unsafe_arena_set_allocated_presence_stats(::centrifugal::centrifuge::protocol::PresenceStatsResult* value);
  ::centrifugal::centrifuge::protocol::PresenceStatsResult* unsafe_arena_release_presence_stats();

  private:
  const ::centrifugal::centrifuge::protocol::PresenceStatsResult& _internal_presence_stats() const;
  ::centrifugal::centrifuge::protocol::PresenceStatsResult* _internal_mutable_presence_stats();

  public:
  // .centrifugal.centrifuge.protocol.HistoryResult history = 11;
  bool has_history() const;
  void clear_history() ;
  const ::centrifugal::centrifuge::protocol::HistoryResult& history() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::HistoryResult* release_history();
  ::centrifugal::centrifuge::protocol::HistoryResult* mutable_history();
  void set_allocated_history(::centrifugal::centrifuge::protocol::HistoryResult* value);
  void unsafe_arena_set_allocated_history(::centrifugal::centrifuge::protocol::HistoryResult* value);
  ::centrifugal::centrifuge::protocol::HistoryResult* unsafe_arena_release_history();

  private:
  const ::centrifugal::centrifuge::protocol::HistoryResult& _internal_history() const;
  ::centrifugal::centrifuge::protocol::HistoryResult* _internal_mutable_history();

  public:
  // .centrifugal.centrifuge.protocol.PingResult ping = 12;
  bool has_ping() const;
  void clear_ping() ;
  const ::centrifugal::centrifuge::protocol::PingResult& ping() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::PingResult* release_ping();
  ::centrifugal::centrifuge::protocol::PingResult* mutable_ping();
  void set_allocated_ping(::centrifugal::centrifuge::protocol::PingResult* value);
  void unsafe_arena_set_allocated_ping(::centrifugal::centrifuge::protocol::PingResult* value);
  ::centrifugal::centrifuge::protocol::PingResult* unsafe_arena_release_ping();

  private:
  const ::centrifugal::centrifuge::protocol::PingResult& _internal_ping() const;
  ::centrifugal::centrifuge::protocol::PingResult* _internal_mutable_ping();

  public:
  // .centrifugal.centrifuge.protocol.RPCResult rpc = 13;
  bool has_rpc() const;
  void clear_rpc() ;
  const ::centrifugal::centrifuge::protocol::RPCResult& rpc() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::RPCResult* release_rpc();
  ::centrifugal::centrifuge::protocol::RPCResult* mutable_rpc();
  void set_allocated_rpc(::centrifugal::centrifuge::protocol::RPCResult* value);
  void unsafe_arena_set_allocated_rpc(::centrifugal::centrifuge::protocol::RPCResult* value);
  ::centrifugal::centrifuge::protocol::RPCResult* unsafe_arena_release_rpc();

  private:
  const ::centrifugal::centrifuge::protocol::RPCResult& _internal_rpc() const;
  ::centrifugal::centrifuge::protocol::RPCResult* _internal_mutable_rpc();

  public:
  // .centrifugal.centrifuge.protocol.RefreshResult refresh = 14;
  bool has_refresh() const;
  void clear_refresh() ;
  const ::centrifugal::centrifuge::protocol::RefreshResult& refresh() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::RefreshResult* release_refresh();
  ::centrifugal::centrifuge::protocol::RefreshResult* mutable_refresh();
  void set_allocated_refresh(::centrifugal::centrifuge::protocol::RefreshResult* value);
  void unsafe_arena_set_allocated_refresh(::centrifugal::centrifuge::protocol::RefreshResult* value);
  ::centrifugal::centrifuge::protocol::RefreshResult* unsafe_arena_release_refresh();

  private:
  const ::centrifugal::centrifuge::protocol::RefreshResult& _internal_refresh() const;
  ::centrifugal::centrifuge::protocol::RefreshResult* _internal_mutable_refresh();

  public:
  // .centrifugal.centrifuge.protocol.SubRefreshResult sub_refresh = 15;
  bool has_sub_refresh() const;
  void clear_sub_refresh() ;
  const ::centrifugal::centrifuge::protocol::SubRefreshResult& sub_refresh() const;
  PROTOBUF_NODISCARD ::centrifugal::centrifuge::protocol::SubRefreshResult* release_sub_refresh();
  ::centrifugal::centrifuge::protocol::SubRefreshResult* mutable_sub_refresh();
  void set_allocated_sub_refresh(::centrifugal::centrifuge::protocol::SubRefreshResult* value);
  void unsafe_arena_set_allocated_sub_refresh(::centrifugal::centrifuge::protocol::SubRefreshResult* value);
  ::centrifugal::centrifuge::protocol::SubRefreshResult* unsafe_arena_release_sub_refresh();

  private:
  const ::centrifugal::centrifuge::protocol::SubRefreshResult& _internal_sub_refresh() const;
  ::centrifugal::centrifuge::protocol::SubRefreshResult* _internal_mutable_sub_refresh();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:centrifugal.centrifuge.protocol.Reply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 14, 13,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Reply& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::centrifugal::centrifuge::protocol::Error* error_;
    ::centrifugal::centrifuge::protocol::Push* push_;
    ::centrifugal::centrifuge::protocol::ConnectResult* connect_;
    ::centrifugal::centrifuge::protocol::SubscribeResult* subscribe_;
    ::centrifugal::centrifuge::protocol::UnsubscribeResult* unsubscribe_;
    ::centrifugal::centrifuge::protocol::PublishResult* publish_;
    ::centrifugal::centrifuge::protocol::PresenceResult* presence_;
    ::centrifugal::centrifuge::protocol::PresenceStatsResult* presence_stats_;
    ::centrifugal::centrifuge::protocol::HistoryResult* history_;
    ::centrifugal::centrifuge::protocol::PingResult* ping_;
    ::centrifugal::centrifuge::protocol::RPCResult* rpc_;
    ::centrifugal::centrifuge::protocol::RefreshResult* refresh_;
    ::centrifugal::centrifuge::protocol::SubRefreshResult* sub_refresh_;
    ::uint32_t id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2fclient_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Error

// uint32 code = 1;
inline void Error::clear_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = 0u;
}
inline ::uint32_t Error::code() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Error.code)
  return _internal_code();
}
inline void Error::set_code(::uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Error.code)
}
inline ::uint32_t Error::_internal_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.code_;
}
inline void Error::_internal_set_code(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = value;
}

// string message = 2;
inline void Error::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Error::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Error.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Error::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Error.message)
}
inline std::string* Error::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Error.message)
  return _s;
}
inline const std::string& Error::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void Error::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* Error::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* Error::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Error.message)
  return _impl_.message_.Release();
}
inline void Error::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Error.message)
}

// bool temporary = 3;
inline void Error::clear_temporary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temporary_ = false;
}
inline bool Error::temporary() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Error.temporary)
  return _internal_temporary();
}
inline void Error::set_temporary(bool value) {
  _internal_set_temporary(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Error.temporary)
}
inline bool Error::_internal_temporary() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temporary_;
}
inline void Error::_internal_set_temporary(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temporary_ = value;
}

// -------------------------------------------------------------------

// EmulationRequest

// string node = 1;
inline void EmulationRequest::clear_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.ClearToEmpty();
}
inline const std::string& EmulationRequest::node() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.EmulationRequest.node)
  return _internal_node();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmulationRequest::set_node(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.EmulationRequest.node)
}
inline std::string* EmulationRequest::mutable_node() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.EmulationRequest.node)
  return _s;
}
inline const std::string& EmulationRequest::_internal_node() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_.Get();
}
inline void EmulationRequest::_internal_set_node(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.Set(value, GetArena());
}
inline std::string* EmulationRequest::_internal_mutable_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.node_.Mutable( GetArena());
}
inline std::string* EmulationRequest::release_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.EmulationRequest.node)
  return _impl_.node_.Release();
}
inline void EmulationRequest::set_allocated_node(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_.IsDefault()) {
    _impl_.node_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.EmulationRequest.node)
}

// string session = 2;
inline void EmulationRequest::clear_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_.ClearToEmpty();
}
inline const std::string& EmulationRequest::session() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.EmulationRequest.session)
  return _internal_session();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmulationRequest::set_session(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.EmulationRequest.session)
}
inline std::string* EmulationRequest::mutable_session() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.EmulationRequest.session)
  return _s;
}
inline const std::string& EmulationRequest::_internal_session() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_.Get();
}
inline void EmulationRequest::_internal_set_session(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_.Set(value, GetArena());
}
inline std::string* EmulationRequest::_internal_mutable_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_.Mutable( GetArena());
}
inline std::string* EmulationRequest::release_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.EmulationRequest.session)
  return _impl_.session_.Release();
}
inline void EmulationRequest::set_allocated_session(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_.IsDefault()) {
    _impl_.session_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.EmulationRequest.session)
}

// bytes data = 3;
inline void EmulationRequest::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& EmulationRequest::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.EmulationRequest.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmulationRequest::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.EmulationRequest.data)
}
inline std::string* EmulationRequest::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.EmulationRequest.data)
  return _s;
}
inline const std::string& EmulationRequest::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void EmulationRequest::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* EmulationRequest::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* EmulationRequest::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.EmulationRequest.data)
  return _impl_.data_.Release();
}
inline void EmulationRequest::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.EmulationRequest.data)
}

// -------------------------------------------------------------------

// Command

// uint32 id = 1;
inline void Command::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
}
inline ::uint32_t Command::id() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Command.id)
  return _internal_id();
}
inline void Command::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Command.id)
}
inline ::uint32_t Command::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void Command::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// .centrifugal.centrifuge.protocol.ConnectRequest connect = 4;
inline bool Command::has_connect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connect_ != nullptr);
  return value;
}
inline void Command::clear_connect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.connect_ != nullptr) _impl_.connect_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::centrifugal::centrifuge::protocol::ConnectRequest& Command::_internal_connect() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::ConnectRequest* p = _impl_.connect_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::ConnectRequest&>(::centrifugal::centrifuge::protocol::_ConnectRequest_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::ConnectRequest& Command::connect() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Command.connect)
  return _internal_connect();
}
inline void Command::unsafe_arena_set_allocated_connect(::centrifugal::centrifuge::protocol::ConnectRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.connect_);
  }
  _impl_.connect_ = reinterpret_cast<::centrifugal::centrifuge::protocol::ConnectRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Command.connect)
}
inline ::centrifugal::centrifuge::protocol::ConnectRequest* Command::release_connect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::centrifugal::centrifuge::protocol::ConnectRequest* released = _impl_.connect_;
  _impl_.connect_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::ConnectRequest* Command::unsafe_arena_release_connect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Command.connect)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::centrifugal::centrifuge::protocol::ConnectRequest* temp = _impl_.connect_;
  _impl_.connect_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::ConnectRequest* Command::_internal_mutable_connect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.connect_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::ConnectRequest>(GetArena());
    _impl_.connect_ = reinterpret_cast<::centrifugal::centrifuge::protocol::ConnectRequest*>(p);
  }
  return _impl_.connect_;
}
inline ::centrifugal::centrifuge::protocol::ConnectRequest* Command::mutable_connect() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::centrifugal::centrifuge::protocol::ConnectRequest* _msg = _internal_mutable_connect();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Command.connect)
  return _msg;
}
inline void Command::set_allocated_connect(::centrifugal::centrifuge::protocol::ConnectRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.connect_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.connect_ = reinterpret_cast<::centrifugal::centrifuge::protocol::ConnectRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Command.connect)
}

// .centrifugal.centrifuge.protocol.SubscribeRequest subscribe = 5;
inline bool Command::has_subscribe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subscribe_ != nullptr);
  return value;
}
inline void Command::clear_subscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.subscribe_ != nullptr) _impl_.subscribe_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::centrifugal::centrifuge::protocol::SubscribeRequest& Command::_internal_subscribe() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::SubscribeRequest* p = _impl_.subscribe_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::SubscribeRequest&>(::centrifugal::centrifuge::protocol::_SubscribeRequest_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::SubscribeRequest& Command::subscribe() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Command.subscribe)
  return _internal_subscribe();
}
inline void Command::unsafe_arena_set_allocated_subscribe(::centrifugal::centrifuge::protocol::SubscribeRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscribe_);
  }
  _impl_.subscribe_ = reinterpret_cast<::centrifugal::centrifuge::protocol::SubscribeRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Command.subscribe)
}
inline ::centrifugal::centrifuge::protocol::SubscribeRequest* Command::release_subscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::centrifugal::centrifuge::protocol::SubscribeRequest* released = _impl_.subscribe_;
  _impl_.subscribe_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::SubscribeRequest* Command::unsafe_arena_release_subscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Command.subscribe)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::centrifugal::centrifuge::protocol::SubscribeRequest* temp = _impl_.subscribe_;
  _impl_.subscribe_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::SubscribeRequest* Command::_internal_mutable_subscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.subscribe_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::SubscribeRequest>(GetArena());
    _impl_.subscribe_ = reinterpret_cast<::centrifugal::centrifuge::protocol::SubscribeRequest*>(p);
  }
  return _impl_.subscribe_;
}
inline ::centrifugal::centrifuge::protocol::SubscribeRequest* Command::mutable_subscribe() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::centrifugal::centrifuge::protocol::SubscribeRequest* _msg = _internal_mutable_subscribe();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Command.subscribe)
  return _msg;
}
inline void Command::set_allocated_subscribe(::centrifugal::centrifuge::protocol::SubscribeRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.subscribe_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.subscribe_ = reinterpret_cast<::centrifugal::centrifuge::protocol::SubscribeRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Command.subscribe)
}

// .centrifugal.centrifuge.protocol.UnsubscribeRequest unsubscribe = 6;
inline bool Command::has_unsubscribe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.unsubscribe_ != nullptr);
  return value;
}
inline void Command::clear_unsubscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.unsubscribe_ != nullptr) _impl_.unsubscribe_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::centrifugal::centrifuge::protocol::UnsubscribeRequest& Command::_internal_unsubscribe() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::UnsubscribeRequest* p = _impl_.unsubscribe_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::UnsubscribeRequest&>(::centrifugal::centrifuge::protocol::_UnsubscribeRequest_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::UnsubscribeRequest& Command::unsubscribe() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Command.unsubscribe)
  return _internal_unsubscribe();
}
inline void Command::unsafe_arena_set_allocated_unsubscribe(::centrifugal::centrifuge::protocol::UnsubscribeRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.unsubscribe_);
  }
  _impl_.unsubscribe_ = reinterpret_cast<::centrifugal::centrifuge::protocol::UnsubscribeRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Command.unsubscribe)
}
inline ::centrifugal::centrifuge::protocol::UnsubscribeRequest* Command::release_unsubscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::centrifugal::centrifuge::protocol::UnsubscribeRequest* released = _impl_.unsubscribe_;
  _impl_.unsubscribe_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::UnsubscribeRequest* Command::unsafe_arena_release_unsubscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Command.unsubscribe)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::centrifugal::centrifuge::protocol::UnsubscribeRequest* temp = _impl_.unsubscribe_;
  _impl_.unsubscribe_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::UnsubscribeRequest* Command::_internal_mutable_unsubscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.unsubscribe_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::UnsubscribeRequest>(GetArena());
    _impl_.unsubscribe_ = reinterpret_cast<::centrifugal::centrifuge::protocol::UnsubscribeRequest*>(p);
  }
  return _impl_.unsubscribe_;
}
inline ::centrifugal::centrifuge::protocol::UnsubscribeRequest* Command::mutable_unsubscribe() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::centrifugal::centrifuge::protocol::UnsubscribeRequest* _msg = _internal_mutable_unsubscribe();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Command.unsubscribe)
  return _msg;
}
inline void Command::set_allocated_unsubscribe(::centrifugal::centrifuge::protocol::UnsubscribeRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.unsubscribe_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.unsubscribe_ = reinterpret_cast<::centrifugal::centrifuge::protocol::UnsubscribeRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Command.unsubscribe)
}

// .centrifugal.centrifuge.protocol.PublishRequest publish = 7;
inline bool Command::has_publish() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.publish_ != nullptr);
  return value;
}
inline void Command::clear_publish() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.publish_ != nullptr) _impl_.publish_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::centrifugal::centrifuge::protocol::PublishRequest& Command::_internal_publish() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::PublishRequest* p = _impl_.publish_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::PublishRequest&>(::centrifugal::centrifuge::protocol::_PublishRequest_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::PublishRequest& Command::publish() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Command.publish)
  return _internal_publish();
}
inline void Command::unsafe_arena_set_allocated_publish(::centrifugal::centrifuge::protocol::PublishRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.publish_);
  }
  _impl_.publish_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PublishRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Command.publish)
}
inline ::centrifugal::centrifuge::protocol::PublishRequest* Command::release_publish() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::centrifugal::centrifuge::protocol::PublishRequest* released = _impl_.publish_;
  _impl_.publish_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::PublishRequest* Command::unsafe_arena_release_publish() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Command.publish)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::centrifugal::centrifuge::protocol::PublishRequest* temp = _impl_.publish_;
  _impl_.publish_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::PublishRequest* Command::_internal_mutable_publish() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.publish_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::PublishRequest>(GetArena());
    _impl_.publish_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PublishRequest*>(p);
  }
  return _impl_.publish_;
}
inline ::centrifugal::centrifuge::protocol::PublishRequest* Command::mutable_publish() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::centrifugal::centrifuge::protocol::PublishRequest* _msg = _internal_mutable_publish();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Command.publish)
  return _msg;
}
inline void Command::set_allocated_publish(::centrifugal::centrifuge::protocol::PublishRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.publish_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.publish_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PublishRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Command.publish)
}

// .centrifugal.centrifuge.protocol.PresenceRequest presence = 8;
inline bool Command::has_presence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.presence_ != nullptr);
  return value;
}
inline void Command::clear_presence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.presence_ != nullptr) _impl_.presence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::centrifugal::centrifuge::protocol::PresenceRequest& Command::_internal_presence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::PresenceRequest* p = _impl_.presence_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::PresenceRequest&>(::centrifugal::centrifuge::protocol::_PresenceRequest_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::PresenceRequest& Command::presence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Command.presence)
  return _internal_presence();
}
inline void Command::unsafe_arena_set_allocated_presence(::centrifugal::centrifuge::protocol::PresenceRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.presence_);
  }
  _impl_.presence_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PresenceRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Command.presence)
}
inline ::centrifugal::centrifuge::protocol::PresenceRequest* Command::release_presence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::centrifugal::centrifuge::protocol::PresenceRequest* released = _impl_.presence_;
  _impl_.presence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::PresenceRequest* Command::unsafe_arena_release_presence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Command.presence)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::centrifugal::centrifuge::protocol::PresenceRequest* temp = _impl_.presence_;
  _impl_.presence_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::PresenceRequest* Command::_internal_mutable_presence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.presence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::PresenceRequest>(GetArena());
    _impl_.presence_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PresenceRequest*>(p);
  }
  return _impl_.presence_;
}
inline ::centrifugal::centrifuge::protocol::PresenceRequest* Command::mutable_presence() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::centrifugal::centrifuge::protocol::PresenceRequest* _msg = _internal_mutable_presence();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Command.presence)
  return _msg;
}
inline void Command::set_allocated_presence(::centrifugal::centrifuge::protocol::PresenceRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.presence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.presence_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PresenceRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Command.presence)
}

// .centrifugal.centrifuge.protocol.PresenceStatsRequest presence_stats = 9;
inline bool Command::has_presence_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.presence_stats_ != nullptr);
  return value;
}
inline void Command::clear_presence_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.presence_stats_ != nullptr) _impl_.presence_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::centrifugal::centrifuge::protocol::PresenceStatsRequest& Command::_internal_presence_stats() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::PresenceStatsRequest* p = _impl_.presence_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::PresenceStatsRequest&>(::centrifugal::centrifuge::protocol::_PresenceStatsRequest_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::PresenceStatsRequest& Command::presence_stats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Command.presence_stats)
  return _internal_presence_stats();
}
inline void Command::unsafe_arena_set_allocated_presence_stats(::centrifugal::centrifuge::protocol::PresenceStatsRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.presence_stats_);
  }
  _impl_.presence_stats_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PresenceStatsRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Command.presence_stats)
}
inline ::centrifugal::centrifuge::protocol::PresenceStatsRequest* Command::release_presence_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::centrifugal::centrifuge::protocol::PresenceStatsRequest* released = _impl_.presence_stats_;
  _impl_.presence_stats_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::PresenceStatsRequest* Command::unsafe_arena_release_presence_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Command.presence_stats)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::centrifugal::centrifuge::protocol::PresenceStatsRequest* temp = _impl_.presence_stats_;
  _impl_.presence_stats_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::PresenceStatsRequest* Command::_internal_mutable_presence_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.presence_stats_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::PresenceStatsRequest>(GetArena());
    _impl_.presence_stats_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PresenceStatsRequest*>(p);
  }
  return _impl_.presence_stats_;
}
inline ::centrifugal::centrifuge::protocol::PresenceStatsRequest* Command::mutable_presence_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::centrifugal::centrifuge::protocol::PresenceStatsRequest* _msg = _internal_mutable_presence_stats();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Command.presence_stats)
  return _msg;
}
inline void Command::set_allocated_presence_stats(::centrifugal::centrifuge::protocol::PresenceStatsRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.presence_stats_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.presence_stats_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PresenceStatsRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Command.presence_stats)
}

// .centrifugal.centrifuge.protocol.HistoryRequest history = 10;
inline bool Command::has_history() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.history_ != nullptr);
  return value;
}
inline void Command::clear_history() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.history_ != nullptr) _impl_.history_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::centrifugal::centrifuge::protocol::HistoryRequest& Command::_internal_history() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::HistoryRequest* p = _impl_.history_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::HistoryRequest&>(::centrifugal::centrifuge::protocol::_HistoryRequest_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::HistoryRequest& Command::history() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Command.history)
  return _internal_history();
}
inline void Command::unsafe_arena_set_allocated_history(::centrifugal::centrifuge::protocol::HistoryRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.history_);
  }
  _impl_.history_ = reinterpret_cast<::centrifugal::centrifuge::protocol::HistoryRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Command.history)
}
inline ::centrifugal::centrifuge::protocol::HistoryRequest* Command::release_history() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::centrifugal::centrifuge::protocol::HistoryRequest* released = _impl_.history_;
  _impl_.history_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::HistoryRequest* Command::unsafe_arena_release_history() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Command.history)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::centrifugal::centrifuge::protocol::HistoryRequest* temp = _impl_.history_;
  _impl_.history_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::HistoryRequest* Command::_internal_mutable_history() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.history_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::HistoryRequest>(GetArena());
    _impl_.history_ = reinterpret_cast<::centrifugal::centrifuge::protocol::HistoryRequest*>(p);
  }
  return _impl_.history_;
}
inline ::centrifugal::centrifuge::protocol::HistoryRequest* Command::mutable_history() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::centrifugal::centrifuge::protocol::HistoryRequest* _msg = _internal_mutable_history();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Command.history)
  return _msg;
}
inline void Command::set_allocated_history(::centrifugal::centrifuge::protocol::HistoryRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.history_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.history_ = reinterpret_cast<::centrifugal::centrifuge::protocol::HistoryRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Command.history)
}

// .centrifugal.centrifuge.protocol.PingRequest ping = 11;
inline bool Command::has_ping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ping_ != nullptr);
  return value;
}
inline void Command::clear_ping() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ping_ != nullptr) _impl_.ping_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::centrifugal::centrifuge::protocol::PingRequest& Command::_internal_ping() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::PingRequest* p = _impl_.ping_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::PingRequest&>(::centrifugal::centrifuge::protocol::_PingRequest_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::PingRequest& Command::ping() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Command.ping)
  return _internal_ping();
}
inline void Command::unsafe_arena_set_allocated_ping(::centrifugal::centrifuge::protocol::PingRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ping_);
  }
  _impl_.ping_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PingRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Command.ping)
}
inline ::centrifugal::centrifuge::protocol::PingRequest* Command::release_ping() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::centrifugal::centrifuge::protocol::PingRequest* released = _impl_.ping_;
  _impl_.ping_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::PingRequest* Command::unsafe_arena_release_ping() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Command.ping)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::centrifugal::centrifuge::protocol::PingRequest* temp = _impl_.ping_;
  _impl_.ping_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::PingRequest* Command::_internal_mutable_ping() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ping_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::PingRequest>(GetArena());
    _impl_.ping_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PingRequest*>(p);
  }
  return _impl_.ping_;
}
inline ::centrifugal::centrifuge::protocol::PingRequest* Command::mutable_ping() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::centrifugal::centrifuge::protocol::PingRequest* _msg = _internal_mutable_ping();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Command.ping)
  return _msg;
}
inline void Command::set_allocated_ping(::centrifugal::centrifuge::protocol::PingRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.ping_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.ping_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PingRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Command.ping)
}

// .centrifugal.centrifuge.protocol.SendRequest send = 12;
inline bool Command::has_send() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.send_ != nullptr);
  return value;
}
inline void Command::clear_send() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.send_ != nullptr) _impl_.send_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::centrifugal::centrifuge::protocol::SendRequest& Command::_internal_send() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::SendRequest* p = _impl_.send_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::SendRequest&>(::centrifugal::centrifuge::protocol::_SendRequest_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::SendRequest& Command::send() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Command.send)
  return _internal_send();
}
inline void Command::unsafe_arena_set_allocated_send(::centrifugal::centrifuge::protocol::SendRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.send_);
  }
  _impl_.send_ = reinterpret_cast<::centrifugal::centrifuge::protocol::SendRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Command.send)
}
inline ::centrifugal::centrifuge::protocol::SendRequest* Command::release_send() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::centrifugal::centrifuge::protocol::SendRequest* released = _impl_.send_;
  _impl_.send_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::SendRequest* Command::unsafe_arena_release_send() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Command.send)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::centrifugal::centrifuge::protocol::SendRequest* temp = _impl_.send_;
  _impl_.send_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::SendRequest* Command::_internal_mutable_send() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.send_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::SendRequest>(GetArena());
    _impl_.send_ = reinterpret_cast<::centrifugal::centrifuge::protocol::SendRequest*>(p);
  }
  return _impl_.send_;
}
inline ::centrifugal::centrifuge::protocol::SendRequest* Command::mutable_send() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000100u;
  ::centrifugal::centrifuge::protocol::SendRequest* _msg = _internal_mutable_send();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Command.send)
  return _msg;
}
inline void Command::set_allocated_send(::centrifugal::centrifuge::protocol::SendRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.send_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.send_ = reinterpret_cast<::centrifugal::centrifuge::protocol::SendRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Command.send)
}

// .centrifugal.centrifuge.protocol.RPCRequest rpc = 13;
inline bool Command::has_rpc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rpc_ != nullptr);
  return value;
}
inline void Command::clear_rpc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rpc_ != nullptr) _impl_.rpc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::centrifugal::centrifuge::protocol::RPCRequest& Command::_internal_rpc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::RPCRequest* p = _impl_.rpc_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::RPCRequest&>(::centrifugal::centrifuge::protocol::_RPCRequest_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::RPCRequest& Command::rpc() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Command.rpc)
  return _internal_rpc();
}
inline void Command::unsafe_arena_set_allocated_rpc(::centrifugal::centrifuge::protocol::RPCRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rpc_);
  }
  _impl_.rpc_ = reinterpret_cast<::centrifugal::centrifuge::protocol::RPCRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Command.rpc)
}
inline ::centrifugal::centrifuge::protocol::RPCRequest* Command::release_rpc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::centrifugal::centrifuge::protocol::RPCRequest* released = _impl_.rpc_;
  _impl_.rpc_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::RPCRequest* Command::unsafe_arena_release_rpc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Command.rpc)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::centrifugal::centrifuge::protocol::RPCRequest* temp = _impl_.rpc_;
  _impl_.rpc_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::RPCRequest* Command::_internal_mutable_rpc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rpc_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::RPCRequest>(GetArena());
    _impl_.rpc_ = reinterpret_cast<::centrifugal::centrifuge::protocol::RPCRequest*>(p);
  }
  return _impl_.rpc_;
}
inline ::centrifugal::centrifuge::protocol::RPCRequest* Command::mutable_rpc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000200u;
  ::centrifugal::centrifuge::protocol::RPCRequest* _msg = _internal_mutable_rpc();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Command.rpc)
  return _msg;
}
inline void Command::set_allocated_rpc(::centrifugal::centrifuge::protocol::RPCRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.rpc_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.rpc_ = reinterpret_cast<::centrifugal::centrifuge::protocol::RPCRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Command.rpc)
}

// .centrifugal.centrifuge.protocol.RefreshRequest refresh = 14;
inline bool Command::has_refresh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.refresh_ != nullptr);
  return value;
}
inline void Command::clear_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.refresh_ != nullptr) _impl_.refresh_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::centrifugal::centrifuge::protocol::RefreshRequest& Command::_internal_refresh() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::RefreshRequest* p = _impl_.refresh_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::RefreshRequest&>(::centrifugal::centrifuge::protocol::_RefreshRequest_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::RefreshRequest& Command::refresh() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Command.refresh)
  return _internal_refresh();
}
inline void Command::unsafe_arena_set_allocated_refresh(::centrifugal::centrifuge::protocol::RefreshRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.refresh_);
  }
  _impl_.refresh_ = reinterpret_cast<::centrifugal::centrifuge::protocol::RefreshRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Command.refresh)
}
inline ::centrifugal::centrifuge::protocol::RefreshRequest* Command::release_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::centrifugal::centrifuge::protocol::RefreshRequest* released = _impl_.refresh_;
  _impl_.refresh_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::RefreshRequest* Command::unsafe_arena_release_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Command.refresh)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::centrifugal::centrifuge::protocol::RefreshRequest* temp = _impl_.refresh_;
  _impl_.refresh_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::RefreshRequest* Command::_internal_mutable_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.refresh_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::RefreshRequest>(GetArena());
    _impl_.refresh_ = reinterpret_cast<::centrifugal::centrifuge::protocol::RefreshRequest*>(p);
  }
  return _impl_.refresh_;
}
inline ::centrifugal::centrifuge::protocol::RefreshRequest* Command::mutable_refresh() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000400u;
  ::centrifugal::centrifuge::protocol::RefreshRequest* _msg = _internal_mutable_refresh();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Command.refresh)
  return _msg;
}
inline void Command::set_allocated_refresh(::centrifugal::centrifuge::protocol::RefreshRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.refresh_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.refresh_ = reinterpret_cast<::centrifugal::centrifuge::protocol::RefreshRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Command.refresh)
}

// .centrifugal.centrifuge.protocol.SubRefreshRequest sub_refresh = 15;
inline bool Command::has_sub_refresh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sub_refresh_ != nullptr);
  return value;
}
inline void Command::clear_sub_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sub_refresh_ != nullptr) _impl_.sub_refresh_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::centrifugal::centrifuge::protocol::SubRefreshRequest& Command::_internal_sub_refresh() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::SubRefreshRequest* p = _impl_.sub_refresh_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::SubRefreshRequest&>(::centrifugal::centrifuge::protocol::_SubRefreshRequest_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::SubRefreshRequest& Command::sub_refresh() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Command.sub_refresh)
  return _internal_sub_refresh();
}
inline void Command::unsafe_arena_set_allocated_sub_refresh(::centrifugal::centrifuge::protocol::SubRefreshRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sub_refresh_);
  }
  _impl_.sub_refresh_ = reinterpret_cast<::centrifugal::centrifuge::protocol::SubRefreshRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Command.sub_refresh)
}
inline ::centrifugal::centrifuge::protocol::SubRefreshRequest* Command::release_sub_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::centrifugal::centrifuge::protocol::SubRefreshRequest* released = _impl_.sub_refresh_;
  _impl_.sub_refresh_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::SubRefreshRequest* Command::unsafe_arena_release_sub_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Command.sub_refresh)

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::centrifugal::centrifuge::protocol::SubRefreshRequest* temp = _impl_.sub_refresh_;
  _impl_.sub_refresh_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::SubRefreshRequest* Command::_internal_mutable_sub_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sub_refresh_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::SubRefreshRequest>(GetArena());
    _impl_.sub_refresh_ = reinterpret_cast<::centrifugal::centrifuge::protocol::SubRefreshRequest*>(p);
  }
  return _impl_.sub_refresh_;
}
inline ::centrifugal::centrifuge::protocol::SubRefreshRequest* Command::mutable_sub_refresh() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000800u;
  ::centrifugal::centrifuge::protocol::SubRefreshRequest* _msg = _internal_mutable_sub_refresh();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Command.sub_refresh)
  return _msg;
}
inline void Command::set_allocated_sub_refresh(::centrifugal::centrifuge::protocol::SubRefreshRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.sub_refresh_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }

  _impl_.sub_refresh_ = reinterpret_cast<::centrifugal::centrifuge::protocol::SubRefreshRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Command.sub_refresh)
}

// -------------------------------------------------------------------

// Reply

// uint32 id = 1;
inline void Reply::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
}
inline ::uint32_t Reply::id() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Reply.id)
  return _internal_id();
}
inline void Reply::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Reply.id)
}
inline ::uint32_t Reply::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void Reply::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// .centrifugal.centrifuge.protocol.Error error = 2;
inline bool Reply::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void Reply::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::centrifugal::centrifuge::protocol::Error& Reply::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::Error* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::Error&>(::centrifugal::centrifuge::protocol::_Error_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::Error& Reply::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Reply.error)
  return _internal_error();
}
inline void Reply::unsafe_arena_set_allocated_error(::centrifugal::centrifuge::protocol::Error* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Error*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Reply.error)
}
inline ::centrifugal::centrifuge::protocol::Error* Reply::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::centrifugal::centrifuge::protocol::Error* released = _impl_.error_;
  _impl_.error_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::Error* Reply::unsafe_arena_release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Reply.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::centrifugal::centrifuge::protocol::Error* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::Error* Reply::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::Error>(GetArena());
    _impl_.error_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Error*>(p);
  }
  return _impl_.error_;
}
inline ::centrifugal::centrifuge::protocol::Error* Reply::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::centrifugal::centrifuge::protocol::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Reply.error)
  return _msg;
}
inline void Reply::set_allocated_error(::centrifugal::centrifuge::protocol::Error* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Error*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Reply.error)
}

// .centrifugal.centrifuge.protocol.Push push = 4;
inline bool Reply::has_push() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.push_ != nullptr);
  return value;
}
inline void Reply::clear_push() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.push_ != nullptr) _impl_.push_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::centrifugal::centrifuge::protocol::Push& Reply::_internal_push() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::Push* p = _impl_.push_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::Push&>(::centrifugal::centrifuge::protocol::_Push_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::Push& Reply::push() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Reply.push)
  return _internal_push();
}
inline void Reply::unsafe_arena_set_allocated_push(::centrifugal::centrifuge::protocol::Push* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.push_);
  }
  _impl_.push_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Push*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Reply.push)
}
inline ::centrifugal::centrifuge::protocol::Push* Reply::release_push() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::centrifugal::centrifuge::protocol::Push* released = _impl_.push_;
  _impl_.push_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::Push* Reply::unsafe_arena_release_push() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Reply.push)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::centrifugal::centrifuge::protocol::Push* temp = _impl_.push_;
  _impl_.push_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::Push* Reply::_internal_mutable_push() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.push_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::Push>(GetArena());
    _impl_.push_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Push*>(p);
  }
  return _impl_.push_;
}
inline ::centrifugal::centrifuge::protocol::Push* Reply::mutable_push() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::centrifugal::centrifuge::protocol::Push* _msg = _internal_mutable_push();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Reply.push)
  return _msg;
}
inline void Reply::set_allocated_push(::centrifugal::centrifuge::protocol::Push* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.push_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.push_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Push*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Reply.push)
}

// .centrifugal.centrifuge.protocol.ConnectResult connect = 5;
inline bool Reply::has_connect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connect_ != nullptr);
  return value;
}
inline void Reply::clear_connect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.connect_ != nullptr) _impl_.connect_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::centrifugal::centrifuge::protocol::ConnectResult& Reply::_internal_connect() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::ConnectResult* p = _impl_.connect_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::ConnectResult&>(::centrifugal::centrifuge::protocol::_ConnectResult_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::ConnectResult& Reply::connect() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Reply.connect)
  return _internal_connect();
}
inline void Reply::unsafe_arena_set_allocated_connect(::centrifugal::centrifuge::protocol::ConnectResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.connect_);
  }
  _impl_.connect_ = reinterpret_cast<::centrifugal::centrifuge::protocol::ConnectResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Reply.connect)
}
inline ::centrifugal::centrifuge::protocol::ConnectResult* Reply::release_connect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::centrifugal::centrifuge::protocol::ConnectResult* released = _impl_.connect_;
  _impl_.connect_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::ConnectResult* Reply::unsafe_arena_release_connect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Reply.connect)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::centrifugal::centrifuge::protocol::ConnectResult* temp = _impl_.connect_;
  _impl_.connect_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::ConnectResult* Reply::_internal_mutable_connect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.connect_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::ConnectResult>(GetArena());
    _impl_.connect_ = reinterpret_cast<::centrifugal::centrifuge::protocol::ConnectResult*>(p);
  }
  return _impl_.connect_;
}
inline ::centrifugal::centrifuge::protocol::ConnectResult* Reply::mutable_connect() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::centrifugal::centrifuge::protocol::ConnectResult* _msg = _internal_mutable_connect();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Reply.connect)
  return _msg;
}
inline void Reply::set_allocated_connect(::centrifugal::centrifuge::protocol::ConnectResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.connect_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.connect_ = reinterpret_cast<::centrifugal::centrifuge::protocol::ConnectResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Reply.connect)
}

// .centrifugal.centrifuge.protocol.SubscribeResult subscribe = 6;
inline bool Reply::has_subscribe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subscribe_ != nullptr);
  return value;
}
inline void Reply::clear_subscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.subscribe_ != nullptr) _impl_.subscribe_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::centrifugal::centrifuge::protocol::SubscribeResult& Reply::_internal_subscribe() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::SubscribeResult* p = _impl_.subscribe_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::SubscribeResult&>(::centrifugal::centrifuge::protocol::_SubscribeResult_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::SubscribeResult& Reply::subscribe() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Reply.subscribe)
  return _internal_subscribe();
}
inline void Reply::unsafe_arena_set_allocated_subscribe(::centrifugal::centrifuge::protocol::SubscribeResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscribe_);
  }
  _impl_.subscribe_ = reinterpret_cast<::centrifugal::centrifuge::protocol::SubscribeResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Reply.subscribe)
}
inline ::centrifugal::centrifuge::protocol::SubscribeResult* Reply::release_subscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::centrifugal::centrifuge::protocol::SubscribeResult* released = _impl_.subscribe_;
  _impl_.subscribe_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::SubscribeResult* Reply::unsafe_arena_release_subscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Reply.subscribe)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::centrifugal::centrifuge::protocol::SubscribeResult* temp = _impl_.subscribe_;
  _impl_.subscribe_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::SubscribeResult* Reply::_internal_mutable_subscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.subscribe_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::SubscribeResult>(GetArena());
    _impl_.subscribe_ = reinterpret_cast<::centrifugal::centrifuge::protocol::SubscribeResult*>(p);
  }
  return _impl_.subscribe_;
}
inline ::centrifugal::centrifuge::protocol::SubscribeResult* Reply::mutable_subscribe() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::centrifugal::centrifuge::protocol::SubscribeResult* _msg = _internal_mutable_subscribe();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Reply.subscribe)
  return _msg;
}
inline void Reply::set_allocated_subscribe(::centrifugal::centrifuge::protocol::SubscribeResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.subscribe_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.subscribe_ = reinterpret_cast<::centrifugal::centrifuge::protocol::SubscribeResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Reply.subscribe)
}

// .centrifugal.centrifuge.protocol.UnsubscribeResult unsubscribe = 7;
inline bool Reply::has_unsubscribe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.unsubscribe_ != nullptr);
  return value;
}
inline void Reply::clear_unsubscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.unsubscribe_ != nullptr) _impl_.unsubscribe_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::centrifugal::centrifuge::protocol::UnsubscribeResult& Reply::_internal_unsubscribe() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::UnsubscribeResult* p = _impl_.unsubscribe_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::UnsubscribeResult&>(::centrifugal::centrifuge::protocol::_UnsubscribeResult_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::UnsubscribeResult& Reply::unsubscribe() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Reply.unsubscribe)
  return _internal_unsubscribe();
}
inline void Reply::unsafe_arena_set_allocated_unsubscribe(::centrifugal::centrifuge::protocol::UnsubscribeResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.unsubscribe_);
  }
  _impl_.unsubscribe_ = reinterpret_cast<::centrifugal::centrifuge::protocol::UnsubscribeResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Reply.unsubscribe)
}
inline ::centrifugal::centrifuge::protocol::UnsubscribeResult* Reply::release_unsubscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::centrifugal::centrifuge::protocol::UnsubscribeResult* released = _impl_.unsubscribe_;
  _impl_.unsubscribe_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::UnsubscribeResult* Reply::unsafe_arena_release_unsubscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Reply.unsubscribe)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::centrifugal::centrifuge::protocol::UnsubscribeResult* temp = _impl_.unsubscribe_;
  _impl_.unsubscribe_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::UnsubscribeResult* Reply::_internal_mutable_unsubscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.unsubscribe_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::UnsubscribeResult>(GetArena());
    _impl_.unsubscribe_ = reinterpret_cast<::centrifugal::centrifuge::protocol::UnsubscribeResult*>(p);
  }
  return _impl_.unsubscribe_;
}
inline ::centrifugal::centrifuge::protocol::UnsubscribeResult* Reply::mutable_unsubscribe() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::centrifugal::centrifuge::protocol::UnsubscribeResult* _msg = _internal_mutable_unsubscribe();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Reply.unsubscribe)
  return _msg;
}
inline void Reply::set_allocated_unsubscribe(::centrifugal::centrifuge::protocol::UnsubscribeResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.unsubscribe_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.unsubscribe_ = reinterpret_cast<::centrifugal::centrifuge::protocol::UnsubscribeResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Reply.unsubscribe)
}

// .centrifugal.centrifuge.protocol.PublishResult publish = 8;
inline bool Reply::has_publish() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.publish_ != nullptr);
  return value;
}
inline void Reply::clear_publish() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.publish_ != nullptr) _impl_.publish_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::centrifugal::centrifuge::protocol::PublishResult& Reply::_internal_publish() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::PublishResult* p = _impl_.publish_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::PublishResult&>(::centrifugal::centrifuge::protocol::_PublishResult_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::PublishResult& Reply::publish() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Reply.publish)
  return _internal_publish();
}
inline void Reply::unsafe_arena_set_allocated_publish(::centrifugal::centrifuge::protocol::PublishResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.publish_);
  }
  _impl_.publish_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PublishResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Reply.publish)
}
inline ::centrifugal::centrifuge::protocol::PublishResult* Reply::release_publish() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::centrifugal::centrifuge::protocol::PublishResult* released = _impl_.publish_;
  _impl_.publish_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::PublishResult* Reply::unsafe_arena_release_publish() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Reply.publish)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::centrifugal::centrifuge::protocol::PublishResult* temp = _impl_.publish_;
  _impl_.publish_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::PublishResult* Reply::_internal_mutable_publish() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.publish_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::PublishResult>(GetArena());
    _impl_.publish_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PublishResult*>(p);
  }
  return _impl_.publish_;
}
inline ::centrifugal::centrifuge::protocol::PublishResult* Reply::mutable_publish() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::centrifugal::centrifuge::protocol::PublishResult* _msg = _internal_mutable_publish();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Reply.publish)
  return _msg;
}
inline void Reply::set_allocated_publish(::centrifugal::centrifuge::protocol::PublishResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.publish_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.publish_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PublishResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Reply.publish)
}

// .centrifugal.centrifuge.protocol.PresenceResult presence = 9;
inline bool Reply::has_presence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.presence_ != nullptr);
  return value;
}
inline void Reply::clear_presence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.presence_ != nullptr) _impl_.presence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::centrifugal::centrifuge::protocol::PresenceResult& Reply::_internal_presence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::PresenceResult* p = _impl_.presence_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::PresenceResult&>(::centrifugal::centrifuge::protocol::_PresenceResult_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::PresenceResult& Reply::presence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Reply.presence)
  return _internal_presence();
}
inline void Reply::unsafe_arena_set_allocated_presence(::centrifugal::centrifuge::protocol::PresenceResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.presence_);
  }
  _impl_.presence_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PresenceResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Reply.presence)
}
inline ::centrifugal::centrifuge::protocol::PresenceResult* Reply::release_presence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::centrifugal::centrifuge::protocol::PresenceResult* released = _impl_.presence_;
  _impl_.presence_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::PresenceResult* Reply::unsafe_arena_release_presence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Reply.presence)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::centrifugal::centrifuge::protocol::PresenceResult* temp = _impl_.presence_;
  _impl_.presence_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::PresenceResult* Reply::_internal_mutable_presence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.presence_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::PresenceResult>(GetArena());
    _impl_.presence_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PresenceResult*>(p);
  }
  return _impl_.presence_;
}
inline ::centrifugal::centrifuge::protocol::PresenceResult* Reply::mutable_presence() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::centrifugal::centrifuge::protocol::PresenceResult* _msg = _internal_mutable_presence();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Reply.presence)
  return _msg;
}
inline void Reply::set_allocated_presence(::centrifugal::centrifuge::protocol::PresenceResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.presence_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.presence_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PresenceResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Reply.presence)
}

// .centrifugal.centrifuge.protocol.PresenceStatsResult presence_stats = 10;
inline bool Reply::has_presence_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.presence_stats_ != nullptr);
  return value;
}
inline void Reply::clear_presence_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.presence_stats_ != nullptr) _impl_.presence_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::centrifugal::centrifuge::protocol::PresenceStatsResult& Reply::_internal_presence_stats() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::PresenceStatsResult* p = _impl_.presence_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::PresenceStatsResult&>(::centrifugal::centrifuge::protocol::_PresenceStatsResult_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::PresenceStatsResult& Reply::presence_stats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Reply.presence_stats)
  return _internal_presence_stats();
}
inline void Reply::unsafe_arena_set_allocated_presence_stats(::centrifugal::centrifuge::protocol::PresenceStatsResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.presence_stats_);
  }
  _impl_.presence_stats_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PresenceStatsResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Reply.presence_stats)
}
inline ::centrifugal::centrifuge::protocol::PresenceStatsResult* Reply::release_presence_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::centrifugal::centrifuge::protocol::PresenceStatsResult* released = _impl_.presence_stats_;
  _impl_.presence_stats_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::PresenceStatsResult* Reply::unsafe_arena_release_presence_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Reply.presence_stats)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::centrifugal::centrifuge::protocol::PresenceStatsResult* temp = _impl_.presence_stats_;
  _impl_.presence_stats_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::PresenceStatsResult* Reply::_internal_mutable_presence_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.presence_stats_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::PresenceStatsResult>(GetArena());
    _impl_.presence_stats_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PresenceStatsResult*>(p);
  }
  return _impl_.presence_stats_;
}
inline ::centrifugal::centrifuge::protocol::PresenceStatsResult* Reply::mutable_presence_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::centrifugal::centrifuge::protocol::PresenceStatsResult* _msg = _internal_mutable_presence_stats();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Reply.presence_stats)
  return _msg;
}
inline void Reply::set_allocated_presence_stats(::centrifugal::centrifuge::protocol::PresenceStatsResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.presence_stats_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.presence_stats_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PresenceStatsResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Reply.presence_stats)
}

// .centrifugal.centrifuge.protocol.HistoryResult history = 11;
inline bool Reply::has_history() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.history_ != nullptr);
  return value;
}
inline void Reply::clear_history() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.history_ != nullptr) _impl_.history_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::centrifugal::centrifuge::protocol::HistoryResult& Reply::_internal_history() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::HistoryResult* p = _impl_.history_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::HistoryResult&>(::centrifugal::centrifuge::protocol::_HistoryResult_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::HistoryResult& Reply::history() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Reply.history)
  return _internal_history();
}
inline void Reply::unsafe_arena_set_allocated_history(::centrifugal::centrifuge::protocol::HistoryResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.history_);
  }
  _impl_.history_ = reinterpret_cast<::centrifugal::centrifuge::protocol::HistoryResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Reply.history)
}
inline ::centrifugal::centrifuge::protocol::HistoryResult* Reply::release_history() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::centrifugal::centrifuge::protocol::HistoryResult* released = _impl_.history_;
  _impl_.history_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::HistoryResult* Reply::unsafe_arena_release_history() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Reply.history)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::centrifugal::centrifuge::protocol::HistoryResult* temp = _impl_.history_;
  _impl_.history_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::HistoryResult* Reply::_internal_mutable_history() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.history_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::HistoryResult>(GetArena());
    _impl_.history_ = reinterpret_cast<::centrifugal::centrifuge::protocol::HistoryResult*>(p);
  }
  return _impl_.history_;
}
inline ::centrifugal::centrifuge::protocol::HistoryResult* Reply::mutable_history() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000100u;
  ::centrifugal::centrifuge::protocol::HistoryResult* _msg = _internal_mutable_history();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Reply.history)
  return _msg;
}
inline void Reply::set_allocated_history(::centrifugal::centrifuge::protocol::HistoryResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.history_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.history_ = reinterpret_cast<::centrifugal::centrifuge::protocol::HistoryResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Reply.history)
}

// .centrifugal.centrifuge.protocol.PingResult ping = 12;
inline bool Reply::has_ping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ping_ != nullptr);
  return value;
}
inline void Reply::clear_ping() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ping_ != nullptr) _impl_.ping_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::centrifugal::centrifuge::protocol::PingResult& Reply::_internal_ping() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::PingResult* p = _impl_.ping_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::PingResult&>(::centrifugal::centrifuge::protocol::_PingResult_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::PingResult& Reply::ping() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Reply.ping)
  return _internal_ping();
}
inline void Reply::unsafe_arena_set_allocated_ping(::centrifugal::centrifuge::protocol::PingResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ping_);
  }
  _impl_.ping_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PingResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Reply.ping)
}
inline ::centrifugal::centrifuge::protocol::PingResult* Reply::release_ping() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::centrifugal::centrifuge::protocol::PingResult* released = _impl_.ping_;
  _impl_.ping_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::PingResult* Reply::unsafe_arena_release_ping() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Reply.ping)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::centrifugal::centrifuge::protocol::PingResult* temp = _impl_.ping_;
  _impl_.ping_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::PingResult* Reply::_internal_mutable_ping() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ping_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::PingResult>(GetArena());
    _impl_.ping_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PingResult*>(p);
  }
  return _impl_.ping_;
}
inline ::centrifugal::centrifuge::protocol::PingResult* Reply::mutable_ping() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000200u;
  ::centrifugal::centrifuge::protocol::PingResult* _msg = _internal_mutable_ping();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Reply.ping)
  return _msg;
}
inline void Reply::set_allocated_ping(::centrifugal::centrifuge::protocol::PingResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.ping_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.ping_ = reinterpret_cast<::centrifugal::centrifuge::protocol::PingResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Reply.ping)
}

// .centrifugal.centrifuge.protocol.RPCResult rpc = 13;
inline bool Reply::has_rpc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rpc_ != nullptr);
  return value;
}
inline void Reply::clear_rpc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rpc_ != nullptr) _impl_.rpc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::centrifugal::centrifuge::protocol::RPCResult& Reply::_internal_rpc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::RPCResult* p = _impl_.rpc_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::RPCResult&>(::centrifugal::centrifuge::protocol::_RPCResult_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::RPCResult& Reply::rpc() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Reply.rpc)
  return _internal_rpc();
}
inline void Reply::unsafe_arena_set_allocated_rpc(::centrifugal::centrifuge::protocol::RPCResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rpc_);
  }
  _impl_.rpc_ = reinterpret_cast<::centrifugal::centrifuge::protocol::RPCResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Reply.rpc)
}
inline ::centrifugal::centrifuge::protocol::RPCResult* Reply::release_rpc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::centrifugal::centrifuge::protocol::RPCResult* released = _impl_.rpc_;
  _impl_.rpc_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::RPCResult* Reply::unsafe_arena_release_rpc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Reply.rpc)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::centrifugal::centrifuge::protocol::RPCResult* temp = _impl_.rpc_;
  _impl_.rpc_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::RPCResult* Reply::_internal_mutable_rpc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rpc_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::RPCResult>(GetArena());
    _impl_.rpc_ = reinterpret_cast<::centrifugal::centrifuge::protocol::RPCResult*>(p);
  }
  return _impl_.rpc_;
}
inline ::centrifugal::centrifuge::protocol::RPCResult* Reply::mutable_rpc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000400u;
  ::centrifugal::centrifuge::protocol::RPCResult* _msg = _internal_mutable_rpc();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Reply.rpc)
  return _msg;
}
inline void Reply::set_allocated_rpc(::centrifugal::centrifuge::protocol::RPCResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.rpc_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.rpc_ = reinterpret_cast<::centrifugal::centrifuge::protocol::RPCResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Reply.rpc)
}

// .centrifugal.centrifuge.protocol.RefreshResult refresh = 14;
inline bool Reply::has_refresh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.refresh_ != nullptr);
  return value;
}
inline void Reply::clear_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.refresh_ != nullptr) _impl_.refresh_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::centrifugal::centrifuge::protocol::RefreshResult& Reply::_internal_refresh() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::RefreshResult* p = _impl_.refresh_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::RefreshResult&>(::centrifugal::centrifuge::protocol::_RefreshResult_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::RefreshResult& Reply::refresh() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Reply.refresh)
  return _internal_refresh();
}
inline void Reply::unsafe_arena_set_allocated_refresh(::centrifugal::centrifuge::protocol::RefreshResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.refresh_);
  }
  _impl_.refresh_ = reinterpret_cast<::centrifugal::centrifuge::protocol::RefreshResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Reply.refresh)
}
inline ::centrifugal::centrifuge::protocol::RefreshResult* Reply::release_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::centrifugal::centrifuge::protocol::RefreshResult* released = _impl_.refresh_;
  _impl_.refresh_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::RefreshResult* Reply::unsafe_arena_release_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Reply.refresh)

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::centrifugal::centrifuge::protocol::RefreshResult* temp = _impl_.refresh_;
  _impl_.refresh_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::RefreshResult* Reply::_internal_mutable_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.refresh_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::RefreshResult>(GetArena());
    _impl_.refresh_ = reinterpret_cast<::centrifugal::centrifuge::protocol::RefreshResult*>(p);
  }
  return _impl_.refresh_;
}
inline ::centrifugal::centrifuge::protocol::RefreshResult* Reply::mutable_refresh() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000800u;
  ::centrifugal::centrifuge::protocol::RefreshResult* _msg = _internal_mutable_refresh();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Reply.refresh)
  return _msg;
}
inline void Reply::set_allocated_refresh(::centrifugal::centrifuge::protocol::RefreshResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.refresh_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }

  _impl_.refresh_ = reinterpret_cast<::centrifugal::centrifuge::protocol::RefreshResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Reply.refresh)
}

// .centrifugal.centrifuge.protocol.SubRefreshResult sub_refresh = 15;
inline bool Reply::has_sub_refresh() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sub_refresh_ != nullptr);
  return value;
}
inline void Reply::clear_sub_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sub_refresh_ != nullptr) _impl_.sub_refresh_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::centrifugal::centrifuge::protocol::SubRefreshResult& Reply::_internal_sub_refresh() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::SubRefreshResult* p = _impl_.sub_refresh_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::SubRefreshResult&>(::centrifugal::centrifuge::protocol::_SubRefreshResult_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::SubRefreshResult& Reply::sub_refresh() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Reply.sub_refresh)
  return _internal_sub_refresh();
}
inline void Reply::unsafe_arena_set_allocated_sub_refresh(::centrifugal::centrifuge::protocol::SubRefreshResult* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sub_refresh_);
  }
  _impl_.sub_refresh_ = reinterpret_cast<::centrifugal::centrifuge::protocol::SubRefreshResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Reply.sub_refresh)
}
inline ::centrifugal::centrifuge::protocol::SubRefreshResult* Reply::release_sub_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::centrifugal::centrifuge::protocol::SubRefreshResult* released = _impl_.sub_refresh_;
  _impl_.sub_refresh_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::SubRefreshResult* Reply::unsafe_arena_release_sub_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Reply.sub_refresh)

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::centrifugal::centrifuge::protocol::SubRefreshResult* temp = _impl_.sub_refresh_;
  _impl_.sub_refresh_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::SubRefreshResult* Reply::_internal_mutable_sub_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sub_refresh_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::SubRefreshResult>(GetArena());
    _impl_.sub_refresh_ = reinterpret_cast<::centrifugal::centrifuge::protocol::SubRefreshResult*>(p);
  }
  return _impl_.sub_refresh_;
}
inline ::centrifugal::centrifuge::protocol::SubRefreshResult* Reply::mutable_sub_refresh() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00001000u;
  ::centrifugal::centrifuge::protocol::SubRefreshResult* _msg = _internal_mutable_sub_refresh();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Reply.sub_refresh)
  return _msg;
}
inline void Reply::set_allocated_sub_refresh(::centrifugal::centrifuge::protocol::SubRefreshResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.sub_refresh_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }

  _impl_.sub_refresh_ = reinterpret_cast<::centrifugal::centrifuge::protocol::SubRefreshResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Reply.sub_refresh)
}

// -------------------------------------------------------------------

// Push

// string channel = 2;
inline void Push::clear_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.ClearToEmpty();
}
inline const std::string& Push::channel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Push.channel)
  return _internal_channel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Push::set_channel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Push.channel)
}
inline std::string* Push::mutable_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Push.channel)
  return _s;
}
inline const std::string& Push::_internal_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_.Get();
}
inline void Push::_internal_set_channel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.Set(value, GetArena());
}
inline std::string* Push::_internal_mutable_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.channel_.Mutable( GetArena());
}
inline std::string* Push::release_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Push.channel)
  return _impl_.channel_.Release();
}
inline void Push::set_allocated_channel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.channel_.IsDefault()) {
    _impl_.channel_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Push.channel)
}

// .centrifugal.centrifuge.protocol.Publication pub = 4;
inline bool Push::has_pub() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pub_ != nullptr);
  return value;
}
inline void Push::clear_pub() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pub_ != nullptr) _impl_.pub_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::centrifugal::centrifuge::protocol::Publication& Push::_internal_pub() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::Publication* p = _impl_.pub_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::Publication&>(::centrifugal::centrifuge::protocol::_Publication_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::Publication& Push::pub() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Push.pub)
  return _internal_pub();
}
inline void Push::unsafe_arena_set_allocated_pub(::centrifugal::centrifuge::protocol::Publication* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pub_);
  }
  _impl_.pub_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Publication*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Push.pub)
}
inline ::centrifugal::centrifuge::protocol::Publication* Push::release_pub() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::centrifugal::centrifuge::protocol::Publication* released = _impl_.pub_;
  _impl_.pub_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::Publication* Push::unsafe_arena_release_pub() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Push.pub)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::centrifugal::centrifuge::protocol::Publication* temp = _impl_.pub_;
  _impl_.pub_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::Publication* Push::_internal_mutable_pub() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pub_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::Publication>(GetArena());
    _impl_.pub_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Publication*>(p);
  }
  return _impl_.pub_;
}
inline ::centrifugal::centrifuge::protocol::Publication* Push::mutable_pub() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::centrifugal::centrifuge::protocol::Publication* _msg = _internal_mutable_pub();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Push.pub)
  return _msg;
}
inline void Push::set_allocated_pub(::centrifugal::centrifuge::protocol::Publication* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.pub_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pub_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Publication*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Push.pub)
}

// .centrifugal.centrifuge.protocol.Join join = 5;
inline bool Push::has_join() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.join_ != nullptr);
  return value;
}
inline void Push::clear_join() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.join_ != nullptr) _impl_.join_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::centrifugal::centrifuge::protocol::Join& Push::_internal_join() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::Join* p = _impl_.join_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::Join&>(::centrifugal::centrifuge::protocol::_Join_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::Join& Push::join() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Push.join)
  return _internal_join();
}
inline void Push::unsafe_arena_set_allocated_join(::centrifugal::centrifuge::protocol::Join* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.join_);
  }
  _impl_.join_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Join*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Push.join)
}
inline ::centrifugal::centrifuge::protocol::Join* Push::release_join() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::centrifugal::centrifuge::protocol::Join* released = _impl_.join_;
  _impl_.join_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::Join* Push::unsafe_arena_release_join() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Push.join)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::centrifugal::centrifuge::protocol::Join* temp = _impl_.join_;
  _impl_.join_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::Join* Push::_internal_mutable_join() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.join_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::Join>(GetArena());
    _impl_.join_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Join*>(p);
  }
  return _impl_.join_;
}
inline ::centrifugal::centrifuge::protocol::Join* Push::mutable_join() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::centrifugal::centrifuge::protocol::Join* _msg = _internal_mutable_join();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Push.join)
  return _msg;
}
inline void Push::set_allocated_join(::centrifugal::centrifuge::protocol::Join* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.join_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.join_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Join*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Push.join)
}

// .centrifugal.centrifuge.protocol.Leave leave = 6;
inline bool Push::has_leave() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.leave_ != nullptr);
  return value;
}
inline void Push::clear_leave() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.leave_ != nullptr) _impl_.leave_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::centrifugal::centrifuge::protocol::Leave& Push::_internal_leave() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::Leave* p = _impl_.leave_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::Leave&>(::centrifugal::centrifuge::protocol::_Leave_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::Leave& Push::leave() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Push.leave)
  return _internal_leave();
}
inline void Push::unsafe_arena_set_allocated_leave(::centrifugal::centrifuge::protocol::Leave* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.leave_);
  }
  _impl_.leave_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Leave*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Push.leave)
}
inline ::centrifugal::centrifuge::protocol::Leave* Push::release_leave() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::centrifugal::centrifuge::protocol::Leave* released = _impl_.leave_;
  _impl_.leave_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::Leave* Push::unsafe_arena_release_leave() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Push.leave)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::centrifugal::centrifuge::protocol::Leave* temp = _impl_.leave_;
  _impl_.leave_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::Leave* Push::_internal_mutable_leave() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.leave_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::Leave>(GetArena());
    _impl_.leave_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Leave*>(p);
  }
  return _impl_.leave_;
}
inline ::centrifugal::centrifuge::protocol::Leave* Push::mutable_leave() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::centrifugal::centrifuge::protocol::Leave* _msg = _internal_mutable_leave();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Push.leave)
  return _msg;
}
inline void Push::set_allocated_leave(::centrifugal::centrifuge::protocol::Leave* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.leave_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.leave_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Leave*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Push.leave)
}

// .centrifugal.centrifuge.protocol.Unsubscribe unsubscribe = 7;
inline bool Push::has_unsubscribe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.unsubscribe_ != nullptr);
  return value;
}
inline void Push::clear_unsubscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.unsubscribe_ != nullptr) _impl_.unsubscribe_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::centrifugal::centrifuge::protocol::Unsubscribe& Push::_internal_unsubscribe() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::Unsubscribe* p = _impl_.unsubscribe_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::Unsubscribe&>(::centrifugal::centrifuge::protocol::_Unsubscribe_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::Unsubscribe& Push::unsubscribe() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Push.unsubscribe)
  return _internal_unsubscribe();
}
inline void Push::unsafe_arena_set_allocated_unsubscribe(::centrifugal::centrifuge::protocol::Unsubscribe* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.unsubscribe_);
  }
  _impl_.unsubscribe_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Unsubscribe*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Push.unsubscribe)
}
inline ::centrifugal::centrifuge::protocol::Unsubscribe* Push::release_unsubscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::centrifugal::centrifuge::protocol::Unsubscribe* released = _impl_.unsubscribe_;
  _impl_.unsubscribe_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::Unsubscribe* Push::unsafe_arena_release_unsubscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Push.unsubscribe)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::centrifugal::centrifuge::protocol::Unsubscribe* temp = _impl_.unsubscribe_;
  _impl_.unsubscribe_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::Unsubscribe* Push::_internal_mutable_unsubscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.unsubscribe_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::Unsubscribe>(GetArena());
    _impl_.unsubscribe_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Unsubscribe*>(p);
  }
  return _impl_.unsubscribe_;
}
inline ::centrifugal::centrifuge::protocol::Unsubscribe* Push::mutable_unsubscribe() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::centrifugal::centrifuge::protocol::Unsubscribe* _msg = _internal_mutable_unsubscribe();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Push.unsubscribe)
  return _msg;
}
inline void Push::set_allocated_unsubscribe(::centrifugal::centrifuge::protocol::Unsubscribe* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.unsubscribe_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.unsubscribe_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Unsubscribe*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Push.unsubscribe)
}

// .centrifugal.centrifuge.protocol.Message message = 8;
inline bool Push::has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.message_ != nullptr);
  return value;
}
inline void Push::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.message_ != nullptr) _impl_.message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::centrifugal::centrifuge::protocol::Message& Push::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::Message* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::Message&>(::centrifugal::centrifuge::protocol::_Message_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::Message& Push::message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Push.message)
  return _internal_message();
}
inline void Push::unsafe_arena_set_allocated_message(::centrifugal::centrifuge::protocol::Message* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Message*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Push.message)
}
inline ::centrifugal::centrifuge::protocol::Message* Push::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::centrifugal::centrifuge::protocol::Message* released = _impl_.message_;
  _impl_.message_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::Message* Push::unsafe_arena_release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Push.message)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::centrifugal::centrifuge::protocol::Message* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::Message* Push::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.message_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::Message>(GetArena());
    _impl_.message_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Message*>(p);
  }
  return _impl_.message_;
}
inline ::centrifugal::centrifuge::protocol::Message* Push::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::centrifugal::centrifuge::protocol::Message* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Push.message)
  return _msg;
}
inline void Push::set_allocated_message(::centrifugal::centrifuge::protocol::Message* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.message_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.message_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Message*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Push.message)
}

// .centrifugal.centrifuge.protocol.Subscribe subscribe = 9;
inline bool Push::has_subscribe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subscribe_ != nullptr);
  return value;
}
inline void Push::clear_subscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.subscribe_ != nullptr) _impl_.subscribe_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::centrifugal::centrifuge::protocol::Subscribe& Push::_internal_subscribe() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::Subscribe* p = _impl_.subscribe_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::Subscribe&>(::centrifugal::centrifuge::protocol::_Subscribe_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::Subscribe& Push::subscribe() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Push.subscribe)
  return _internal_subscribe();
}
inline void Push::unsafe_arena_set_allocated_subscribe(::centrifugal::centrifuge::protocol::Subscribe* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscribe_);
  }
  _impl_.subscribe_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Subscribe*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Push.subscribe)
}
inline ::centrifugal::centrifuge::protocol::Subscribe* Push::release_subscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::centrifugal::centrifuge::protocol::Subscribe* released = _impl_.subscribe_;
  _impl_.subscribe_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::Subscribe* Push::unsafe_arena_release_subscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Push.subscribe)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::centrifugal::centrifuge::protocol::Subscribe* temp = _impl_.subscribe_;
  _impl_.subscribe_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::Subscribe* Push::_internal_mutable_subscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.subscribe_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::Subscribe>(GetArena());
    _impl_.subscribe_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Subscribe*>(p);
  }
  return _impl_.subscribe_;
}
inline ::centrifugal::centrifuge::protocol::Subscribe* Push::mutable_subscribe() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::centrifugal::centrifuge::protocol::Subscribe* _msg = _internal_mutable_subscribe();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Push.subscribe)
  return _msg;
}
inline void Push::set_allocated_subscribe(::centrifugal::centrifuge::protocol::Subscribe* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.subscribe_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.subscribe_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Subscribe*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Push.subscribe)
}

// .centrifugal.centrifuge.protocol.Connect connect = 10;
inline bool Push::has_connect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.connect_ != nullptr);
  return value;
}
inline void Push::clear_connect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.connect_ != nullptr) _impl_.connect_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::centrifugal::centrifuge::protocol::Connect& Push::_internal_connect() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::Connect* p = _impl_.connect_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::Connect&>(::centrifugal::centrifuge::protocol::_Connect_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::Connect& Push::connect() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Push.connect)
  return _internal_connect();
}
inline void Push::unsafe_arena_set_allocated_connect(::centrifugal::centrifuge::protocol::Connect* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.connect_);
  }
  _impl_.connect_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Connect*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Push.connect)
}
inline ::centrifugal::centrifuge::protocol::Connect* Push::release_connect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::centrifugal::centrifuge::protocol::Connect* released = _impl_.connect_;
  _impl_.connect_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::Connect* Push::unsafe_arena_release_connect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Push.connect)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::centrifugal::centrifuge::protocol::Connect* temp = _impl_.connect_;
  _impl_.connect_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::Connect* Push::_internal_mutable_connect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.connect_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::Connect>(GetArena());
    _impl_.connect_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Connect*>(p);
  }
  return _impl_.connect_;
}
inline ::centrifugal::centrifuge::protocol::Connect* Push::mutable_connect() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::centrifugal::centrifuge::protocol::Connect* _msg = _internal_mutable_connect();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Push.connect)
  return _msg;
}
inline void Push::set_allocated_connect(::centrifugal::centrifuge::protocol::Connect* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.connect_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.connect_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Connect*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Push.connect)
}

// .centrifugal.centrifuge.protocol.Disconnect disconnect = 11;
inline bool Push::has_disconnect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.disconnect_ != nullptr);
  return value;
}
inline void Push::clear_disconnect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.disconnect_ != nullptr) _impl_.disconnect_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::centrifugal::centrifuge::protocol::Disconnect& Push::_internal_disconnect() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::Disconnect* p = _impl_.disconnect_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::Disconnect&>(::centrifugal::centrifuge::protocol::_Disconnect_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::Disconnect& Push::disconnect() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Push.disconnect)
  return _internal_disconnect();
}
inline void Push::unsafe_arena_set_allocated_disconnect(::centrifugal::centrifuge::protocol::Disconnect* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.disconnect_);
  }
  _impl_.disconnect_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Disconnect*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Push.disconnect)
}
inline ::centrifugal::centrifuge::protocol::Disconnect* Push::release_disconnect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::centrifugal::centrifuge::protocol::Disconnect* released = _impl_.disconnect_;
  _impl_.disconnect_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::Disconnect* Push::unsafe_arena_release_disconnect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Push.disconnect)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::centrifugal::centrifuge::protocol::Disconnect* temp = _impl_.disconnect_;
  _impl_.disconnect_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::Disconnect* Push::_internal_mutable_disconnect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.disconnect_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::Disconnect>(GetArena());
    _impl_.disconnect_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Disconnect*>(p);
  }
  return _impl_.disconnect_;
}
inline ::centrifugal::centrifuge::protocol::Disconnect* Push::mutable_disconnect() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::centrifugal::centrifuge::protocol::Disconnect* _msg = _internal_mutable_disconnect();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Push.disconnect)
  return _msg;
}
inline void Push::set_allocated_disconnect(::centrifugal::centrifuge::protocol::Disconnect* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.disconnect_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.disconnect_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Disconnect*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Push.disconnect)
}

// .centrifugal.centrifuge.protocol.Refresh refresh = 12;
inline bool Push::has_refresh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.refresh_ != nullptr);
  return value;
}
inline void Push::clear_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.refresh_ != nullptr) _impl_.refresh_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::centrifugal::centrifuge::protocol::Refresh& Push::_internal_refresh() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::Refresh* p = _impl_.refresh_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::Refresh&>(::centrifugal::centrifuge::protocol::_Refresh_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::Refresh& Push::refresh() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Push.refresh)
  return _internal_refresh();
}
inline void Push::unsafe_arena_set_allocated_refresh(::centrifugal::centrifuge::protocol::Refresh* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.refresh_);
  }
  _impl_.refresh_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Refresh*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Push.refresh)
}
inline ::centrifugal::centrifuge::protocol::Refresh* Push::release_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::centrifugal::centrifuge::protocol::Refresh* released = _impl_.refresh_;
  _impl_.refresh_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::Refresh* Push::unsafe_arena_release_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Push.refresh)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::centrifugal::centrifuge::protocol::Refresh* temp = _impl_.refresh_;
  _impl_.refresh_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::Refresh* Push::_internal_mutable_refresh() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.refresh_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::Refresh>(GetArena());
    _impl_.refresh_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Refresh*>(p);
  }
  return _impl_.refresh_;
}
inline ::centrifugal::centrifuge::protocol::Refresh* Push::mutable_refresh() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000100u;
  ::centrifugal::centrifuge::protocol::Refresh* _msg = _internal_mutable_refresh();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Push.refresh)
  return _msg;
}
inline void Push::set_allocated_refresh(::centrifugal::centrifuge::protocol::Refresh* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.refresh_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.refresh_ = reinterpret_cast<::centrifugal::centrifuge::protocol::Refresh*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Push.refresh)
}

// -------------------------------------------------------------------

// ClientInfo

// string user = 1;
inline void ClientInfo::clear_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_.ClearToEmpty();
}
inline const std::string& ClientInfo::user() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.ClientInfo.user)
  return _internal_user();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientInfo::set_user(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.ClientInfo.user)
}
inline std::string* ClientInfo::mutable_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.ClientInfo.user)
  return _s;
}
inline const std::string& ClientInfo::_internal_user() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_.Get();
}
inline void ClientInfo::_internal_set_user(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_.Set(value, GetArena());
}
inline std::string* ClientInfo::_internal_mutable_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_.Mutable( GetArena());
}
inline std::string* ClientInfo::release_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.ClientInfo.user)
  return _impl_.user_.Release();
}
inline void ClientInfo::set_allocated_user(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_.IsDefault()) {
    _impl_.user_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.ClientInfo.user)
}

// string client = 2;
inline void ClientInfo::clear_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_.ClearToEmpty();
}
inline const std::string& ClientInfo::client() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.ClientInfo.client)
  return _internal_client();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientInfo::set_client(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.ClientInfo.client)
}
inline std::string* ClientInfo::mutable_client() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.ClientInfo.client)
  return _s;
}
inline const std::string& ClientInfo::_internal_client() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_.Get();
}
inline void ClientInfo::_internal_set_client(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_.Set(value, GetArena());
}
inline std::string* ClientInfo::_internal_mutable_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_.Mutable( GetArena());
}
inline std::string* ClientInfo::release_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.ClientInfo.client)
  return _impl_.client_.Release();
}
inline void ClientInfo::set_allocated_client(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_.IsDefault()) {
    _impl_.client_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.ClientInfo.client)
}

// bytes conn_info = 3;
inline void ClientInfo::clear_conn_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conn_info_.ClearToEmpty();
}
inline const std::string& ClientInfo::conn_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.ClientInfo.conn_info)
  return _internal_conn_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientInfo::set_conn_info(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conn_info_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.ClientInfo.conn_info)
}
inline std::string* ClientInfo::mutable_conn_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_conn_info();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.ClientInfo.conn_info)
  return _s;
}
inline const std::string& ClientInfo::_internal_conn_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conn_info_.Get();
}
inline void ClientInfo::_internal_set_conn_info(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conn_info_.Set(value, GetArena());
}
inline std::string* ClientInfo::_internal_mutable_conn_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.conn_info_.Mutable( GetArena());
}
inline std::string* ClientInfo::release_conn_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.ClientInfo.conn_info)
  return _impl_.conn_info_.Release();
}
inline void ClientInfo::set_allocated_conn_info(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conn_info_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.conn_info_.IsDefault()) {
    _impl_.conn_info_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.ClientInfo.conn_info)
}

// bytes chan_info = 4;
inline void ClientInfo::clear_chan_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chan_info_.ClearToEmpty();
}
inline const std::string& ClientInfo::chan_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.ClientInfo.chan_info)
  return _internal_chan_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientInfo::set_chan_info(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chan_info_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.ClientInfo.chan_info)
}
inline std::string* ClientInfo::mutable_chan_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chan_info();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.ClientInfo.chan_info)
  return _s;
}
inline const std::string& ClientInfo::_internal_chan_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chan_info_.Get();
}
inline void ClientInfo::_internal_set_chan_info(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chan_info_.Set(value, GetArena());
}
inline std::string* ClientInfo::_internal_mutable_chan_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.chan_info_.Mutable( GetArena());
}
inline std::string* ClientInfo::release_chan_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.ClientInfo.chan_info)
  return _impl_.chan_info_.Release();
}
inline void ClientInfo::set_allocated_chan_info(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chan_info_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.chan_info_.IsDefault()) {
    _impl_.chan_info_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.ClientInfo.chan_info)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Publication

// bytes data = 4;
inline void Publication::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Publication::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Publication.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Publication::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Publication.data)
}
inline std::string* Publication::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Publication.data)
  return _s;
}
inline const std::string& Publication::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void Publication::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* Publication::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* Publication::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Publication.data)
  return _impl_.data_.Release();
}
inline void Publication::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Publication.data)
}

// .centrifugal.centrifuge.protocol.ClientInfo info = 5;
inline bool Publication::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline void Publication::clear_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::centrifugal::centrifuge::protocol::ClientInfo& Publication::_internal_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::ClientInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::ClientInfo&>(::centrifugal::centrifuge::protocol::_ClientInfo_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::ClientInfo& Publication::info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Publication.info)
  return _internal_info();
}
inline void Publication::unsafe_arena_set_allocated_info(::centrifugal::centrifuge::protocol::ClientInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = reinterpret_cast<::centrifugal::centrifuge::protocol::ClientInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Publication.info)
}
inline ::centrifugal::centrifuge::protocol::ClientInfo* Publication::release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::centrifugal::centrifuge::protocol::ClientInfo* released = _impl_.info_;
  _impl_.info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::ClientInfo* Publication::unsafe_arena_release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Publication.info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::centrifugal::centrifuge::protocol::ClientInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::ClientInfo* Publication::_internal_mutable_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::ClientInfo>(GetArena());
    _impl_.info_ = reinterpret_cast<::centrifugal::centrifuge::protocol::ClientInfo*>(p);
  }
  return _impl_.info_;
}
inline ::centrifugal::centrifuge::protocol::ClientInfo* Publication::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::centrifugal::centrifuge::protocol::ClientInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Publication.info)
  return _msg;
}
inline void Publication::set_allocated_info(::centrifugal::centrifuge::protocol::ClientInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.info_ = reinterpret_cast<::centrifugal::centrifuge::protocol::ClientInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Publication.info)
}

// uint64 offset = 6;
inline void Publication::clear_offset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = ::uint64_t{0u};
}
inline ::uint64_t Publication::offset() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Publication.offset)
  return _internal_offset();
}
inline void Publication::set_offset(::uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Publication.offset)
}
inline ::uint64_t Publication::_internal_offset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.offset_;
}
inline void Publication::_internal_set_offset(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = value;
}

// map<string, string> tags = 7;
inline int Publication::_internal_tags_size() const {
  return _internal_tags().size();
}
inline int Publication::tags_size() const {
  return _internal_tags_size();
}
inline void Publication::clear_tags() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tags_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Publication::_internal_tags() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tags_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Publication::tags() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:centrifugal.centrifuge.protocol.Publication.tags)
  return _internal_tags();
}
inline ::google::protobuf::Map<std::string, std::string>* Publication::_internal_mutable_tags() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.tags_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Publication::mutable_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:centrifugal.centrifuge.protocol.Publication.tags)
  return _internal_mutable_tags();
}

// bool delta = 8;
inline void Publication::clear_delta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delta_ = false;
}
inline bool Publication::delta() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Publication.delta)
  return _internal_delta();
}
inline void Publication::set_delta(bool value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Publication.delta)
}
inline bool Publication::_internal_delta() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.delta_;
}
inline void Publication::_internal_set_delta(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delta_ = value;
}

// int64 time = 9;
inline void Publication::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ = ::int64_t{0};
}
inline ::int64_t Publication::time() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Publication.time)
  return _internal_time();
}
inline void Publication::set_time(::int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Publication.time)
}
inline ::int64_t Publication::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_;
}
inline void Publication::_internal_set_time(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ = value;
}

// string channel = 10;
inline void Publication::clear_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.ClearToEmpty();
}
inline const std::string& Publication::channel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Publication.channel)
  return _internal_channel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Publication::set_channel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Publication.channel)
}
inline std::string* Publication::mutable_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Publication.channel)
  return _s;
}
inline const std::string& Publication::_internal_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_.Get();
}
inline void Publication::_internal_set_channel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.Set(value, GetArena());
}
inline std::string* Publication::_internal_mutable_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.channel_.Mutable( GetArena());
}
inline std::string* Publication::release_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Publication.channel)
  return _impl_.channel_.Release();
}
inline void Publication::set_allocated_channel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.channel_.IsDefault()) {
    _impl_.channel_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Publication.channel)
}

// -------------------------------------------------------------------

// Join

// .centrifugal.centrifuge.protocol.ClientInfo info = 1;
inline bool Join::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline void Join::clear_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::centrifugal::centrifuge::protocol::ClientInfo& Join::_internal_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::ClientInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::ClientInfo&>(::centrifugal::centrifuge::protocol::_ClientInfo_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::ClientInfo& Join::info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Join.info)
  return _internal_info();
}
inline void Join::unsafe_arena_set_allocated_info(::centrifugal::centrifuge::protocol::ClientInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = reinterpret_cast<::centrifugal::centrifuge::protocol::ClientInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Join.info)
}
inline ::centrifugal::centrifuge::protocol::ClientInfo* Join::release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::centrifugal::centrifuge::protocol::ClientInfo* released = _impl_.info_;
  _impl_.info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::ClientInfo* Join::unsafe_arena_release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Join.info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::centrifugal::centrifuge::protocol::ClientInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::ClientInfo* Join::_internal_mutable_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::ClientInfo>(GetArena());
    _impl_.info_ = reinterpret_cast<::centrifugal::centrifuge::protocol::ClientInfo*>(p);
  }
  return _impl_.info_;
}
inline ::centrifugal::centrifuge::protocol::ClientInfo* Join::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::centrifugal::centrifuge::protocol::ClientInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Join.info)
  return _msg;
}
inline void Join::set_allocated_info(::centrifugal::centrifuge::protocol::ClientInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.info_ = reinterpret_cast<::centrifugal::centrifuge::protocol::ClientInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Join.info)
}

// -------------------------------------------------------------------

// Leave

// .centrifugal.centrifuge.protocol.ClientInfo info = 1;
inline bool Leave::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline void Leave::clear_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::centrifugal::centrifuge::protocol::ClientInfo& Leave::_internal_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::ClientInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::ClientInfo&>(::centrifugal::centrifuge::protocol::_ClientInfo_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::ClientInfo& Leave::info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Leave.info)
  return _internal_info();
}
inline void Leave::unsafe_arena_set_allocated_info(::centrifugal::centrifuge::protocol::ClientInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = reinterpret_cast<::centrifugal::centrifuge::protocol::ClientInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.Leave.info)
}
inline ::centrifugal::centrifuge::protocol::ClientInfo* Leave::release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::centrifugal::centrifuge::protocol::ClientInfo* released = _impl_.info_;
  _impl_.info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::ClientInfo* Leave::unsafe_arena_release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Leave.info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::centrifugal::centrifuge::protocol::ClientInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::ClientInfo* Leave::_internal_mutable_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::ClientInfo>(GetArena());
    _impl_.info_ = reinterpret_cast<::centrifugal::centrifuge::protocol::ClientInfo*>(p);
  }
  return _impl_.info_;
}
inline ::centrifugal::centrifuge::protocol::ClientInfo* Leave::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::centrifugal::centrifuge::protocol::ClientInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Leave.info)
  return _msg;
}
inline void Leave::set_allocated_info(::centrifugal::centrifuge::protocol::ClientInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.info_ = reinterpret_cast<::centrifugal::centrifuge::protocol::ClientInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Leave.info)
}

// -------------------------------------------------------------------

// Unsubscribe

// uint32 code = 2;
inline void Unsubscribe::clear_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = 0u;
}
inline ::uint32_t Unsubscribe::code() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Unsubscribe.code)
  return _internal_code();
}
inline void Unsubscribe::set_code(::uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Unsubscribe.code)
}
inline ::uint32_t Unsubscribe::_internal_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.code_;
}
inline void Unsubscribe::_internal_set_code(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = value;
}

// string reason = 3;
inline void Unsubscribe::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& Unsubscribe::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Unsubscribe.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Unsubscribe::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Unsubscribe.reason)
}
inline std::string* Unsubscribe::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Unsubscribe.reason)
  return _s;
}
inline const std::string& Unsubscribe::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void Unsubscribe::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* Unsubscribe::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* Unsubscribe::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Unsubscribe.reason)
  return _impl_.reason_.Release();
}
inline void Unsubscribe::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Unsubscribe.reason)
}

// -------------------------------------------------------------------

// Subscribe

// bool recoverable = 1;
inline void Subscribe::clear_recoverable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recoverable_ = false;
}
inline bool Subscribe::recoverable() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Subscribe.recoverable)
  return _internal_recoverable();
}
inline void Subscribe::set_recoverable(bool value) {
  _internal_set_recoverable(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Subscribe.recoverable)
}
inline bool Subscribe::_internal_recoverable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recoverable_;
}
inline void Subscribe::_internal_set_recoverable(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recoverable_ = value;
}

// string epoch = 4;
inline void Subscribe::clear_epoch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.ClearToEmpty();
}
inline const std::string& Subscribe::epoch() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Subscribe.epoch)
  return _internal_epoch();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Subscribe::set_epoch(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Subscribe.epoch)
}
inline std::string* Subscribe::mutable_epoch() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_epoch();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Subscribe.epoch)
  return _s;
}
inline const std::string& Subscribe::_internal_epoch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.epoch_.Get();
}
inline void Subscribe::_internal_set_epoch(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.Set(value, GetArena());
}
inline std::string* Subscribe::_internal_mutable_epoch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.epoch_.Mutable( GetArena());
}
inline std::string* Subscribe::release_epoch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Subscribe.epoch)
  return _impl_.epoch_.Release();
}
inline void Subscribe::set_allocated_epoch(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.epoch_.IsDefault()) {
    _impl_.epoch_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Subscribe.epoch)
}

// uint64 offset = 5;
inline void Subscribe::clear_offset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = ::uint64_t{0u};
}
inline ::uint64_t Subscribe::offset() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Subscribe.offset)
  return _internal_offset();
}
inline void Subscribe::set_offset(::uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Subscribe.offset)
}
inline ::uint64_t Subscribe::_internal_offset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.offset_;
}
inline void Subscribe::_internal_set_offset(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = value;
}

// bool positioned = 6;
inline void Subscribe::clear_positioned() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positioned_ = false;
}
inline bool Subscribe::positioned() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Subscribe.positioned)
  return _internal_positioned();
}
inline void Subscribe::set_positioned(bool value) {
  _internal_set_positioned(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Subscribe.positioned)
}
inline bool Subscribe::_internal_positioned() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.positioned_;
}
inline void Subscribe::_internal_set_positioned(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positioned_ = value;
}

// bytes data = 7;
inline void Subscribe::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Subscribe::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Subscribe.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Subscribe::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Subscribe.data)
}
inline std::string* Subscribe::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Subscribe.data)
  return _s;
}
inline const std::string& Subscribe::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void Subscribe::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* Subscribe::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* Subscribe::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Subscribe.data)
  return _impl_.data_.Release();
}
inline void Subscribe::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Subscribe.data)
}

// -------------------------------------------------------------------

// Message

// bytes data = 1;
inline void Message::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Message::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Message.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Message.data)
}
inline std::string* Message::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Message.data)
  return _s;
}
inline const std::string& Message::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void Message::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* Message::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* Message::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Message.data)
  return _impl_.data_.Release();
}
inline void Message::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Message.data)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Connect

// string client = 1;
inline void Connect::clear_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_.ClearToEmpty();
}
inline const std::string& Connect::client() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Connect.client)
  return _internal_client();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Connect::set_client(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Connect.client)
}
inline std::string* Connect::mutable_client() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Connect.client)
  return _s;
}
inline const std::string& Connect::_internal_client() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_.Get();
}
inline void Connect::_internal_set_client(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_.Set(value, GetArena());
}
inline std::string* Connect::_internal_mutable_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_.Mutable( GetArena());
}
inline std::string* Connect::release_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Connect.client)
  return _impl_.client_.Release();
}
inline void Connect::set_allocated_client(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_.IsDefault()) {
    _impl_.client_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Connect.client)
}

// string version = 2;
inline void Connect::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& Connect::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Connect.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Connect::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Connect.version)
}
inline std::string* Connect::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Connect.version)
  return _s;
}
inline const std::string& Connect::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void Connect::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* Connect::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* Connect::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Connect.version)
  return _impl_.version_.Release();
}
inline void Connect::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Connect.version)
}

// bytes data = 3;
inline void Connect::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Connect::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Connect.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Connect::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Connect.data)
}
inline std::string* Connect::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Connect.data)
  return _s;
}
inline const std::string& Connect::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void Connect::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* Connect::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* Connect::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Connect.data)
  return _impl_.data_.Release();
}
inline void Connect::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Connect.data)
}

// map<string, .centrifugal.centrifuge.protocol.SubscribeResult> subs = 4;
inline int Connect::_internal_subs_size() const {
  return _internal_subs().size();
}
inline int Connect::subs_size() const {
  return _internal_subs_size();
}
inline void Connect::clear_subs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subs_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeResult>& Connect::_internal_subs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subs_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeResult>& Connect::subs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:centrifugal.centrifuge.protocol.Connect.subs)
  return _internal_subs();
}
inline ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeResult>* Connect::_internal_mutable_subs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subs_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeResult>* Connect::mutable_subs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:centrifugal.centrifuge.protocol.Connect.subs)
  return _internal_mutable_subs();
}

// bool expires = 5;
inline void Connect::clear_expires() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_ = false;
}
inline bool Connect::expires() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Connect.expires)
  return _internal_expires();
}
inline void Connect::set_expires(bool value) {
  _internal_set_expires(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Connect.expires)
}
inline bool Connect::_internal_expires() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expires_;
}
inline void Connect::_internal_set_expires(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_ = value;
}

// uint32 ttl = 6;
inline void Connect::clear_ttl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ttl_ = 0u;
}
inline ::uint32_t Connect::ttl() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Connect.ttl)
  return _internal_ttl();
}
inline void Connect::set_ttl(::uint32_t value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Connect.ttl)
}
inline ::uint32_t Connect::_internal_ttl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ttl_;
}
inline void Connect::_internal_set_ttl(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ttl_ = value;
}

// uint32 ping = 7;
inline void Connect::clear_ping() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ping_ = 0u;
}
inline ::uint32_t Connect::ping() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Connect.ping)
  return _internal_ping();
}
inline void Connect::set_ping(::uint32_t value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Connect.ping)
}
inline ::uint32_t Connect::_internal_ping() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ping_;
}
inline void Connect::_internal_set_ping(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ping_ = value;
}

// bool pong = 8;
inline void Connect::clear_pong() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pong_ = false;
}
inline bool Connect::pong() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Connect.pong)
  return _internal_pong();
}
inline void Connect::set_pong(bool value) {
  _internal_set_pong(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Connect.pong)
}
inline bool Connect::_internal_pong() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pong_;
}
inline void Connect::_internal_set_pong(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pong_ = value;
}

// string session = 9;
inline void Connect::clear_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_.ClearToEmpty();
}
inline const std::string& Connect::session() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Connect.session)
  return _internal_session();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Connect::set_session(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Connect.session)
}
inline std::string* Connect::mutable_session() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Connect.session)
  return _s;
}
inline const std::string& Connect::_internal_session() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_.Get();
}
inline void Connect::_internal_set_session(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_.Set(value, GetArena());
}
inline std::string* Connect::_internal_mutable_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_.Mutable( GetArena());
}
inline std::string* Connect::release_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Connect.session)
  return _impl_.session_.Release();
}
inline void Connect::set_allocated_session(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_.IsDefault()) {
    _impl_.session_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Connect.session)
}

// string node = 10;
inline void Connect::clear_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.ClearToEmpty();
}
inline const std::string& Connect::node() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Connect.node)
  return _internal_node();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Connect::set_node(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Connect.node)
}
inline std::string* Connect::mutable_node() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Connect.node)
  return _s;
}
inline const std::string& Connect::_internal_node() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_.Get();
}
inline void Connect::_internal_set_node(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.Set(value, GetArena());
}
inline std::string* Connect::_internal_mutable_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.node_.Mutable( GetArena());
}
inline std::string* Connect::release_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Connect.node)
  return _impl_.node_.Release();
}
inline void Connect::set_allocated_node(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_.IsDefault()) {
    _impl_.node_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Connect.node)
}

// int64 time = 11;
inline void Connect::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ = ::int64_t{0};
}
inline ::int64_t Connect::time() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Connect.time)
  return _internal_time();
}
inline void Connect::set_time(::int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Connect.time)
}
inline ::int64_t Connect::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_;
}
inline void Connect::_internal_set_time(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ = value;
}

// -------------------------------------------------------------------

// Disconnect

// uint32 code = 1;
inline void Disconnect::clear_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = 0u;
}
inline ::uint32_t Disconnect::code() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Disconnect.code)
  return _internal_code();
}
inline void Disconnect::set_code(::uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Disconnect.code)
}
inline ::uint32_t Disconnect::_internal_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.code_;
}
inline void Disconnect::_internal_set_code(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = value;
}

// string reason = 2;
inline void Disconnect::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& Disconnect::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Disconnect.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Disconnect::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Disconnect.reason)
}
inline std::string* Disconnect::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.Disconnect.reason)
  return _s;
}
inline const std::string& Disconnect::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void Disconnect::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* Disconnect::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* Disconnect::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.Disconnect.reason)
  return _impl_.reason_.Release();
}
inline void Disconnect::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.Disconnect.reason)
}

// bool reconnect = 3;
inline void Disconnect::clear_reconnect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reconnect_ = false;
}
inline bool Disconnect::reconnect() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Disconnect.reconnect)
  return _internal_reconnect();
}
inline void Disconnect::set_reconnect(bool value) {
  _internal_set_reconnect(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Disconnect.reconnect)
}
inline bool Disconnect::_internal_reconnect() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reconnect_;
}
inline void Disconnect::_internal_set_reconnect(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reconnect_ = value;
}

// -------------------------------------------------------------------

// Refresh

// bool expires = 1;
inline void Refresh::clear_expires() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_ = false;
}
inline bool Refresh::expires() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Refresh.expires)
  return _internal_expires();
}
inline void Refresh::set_expires(bool value) {
  _internal_set_expires(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Refresh.expires)
}
inline bool Refresh::_internal_expires() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expires_;
}
inline void Refresh::_internal_set_expires(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_ = value;
}

// uint32 ttl = 2;
inline void Refresh::clear_ttl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ttl_ = 0u;
}
inline ::uint32_t Refresh::ttl() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.Refresh.ttl)
  return _internal_ttl();
}
inline void Refresh::set_ttl(::uint32_t value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.Refresh.ttl)
}
inline ::uint32_t Refresh::_internal_ttl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ttl_;
}
inline void Refresh::_internal_set_ttl(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ttl_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ConnectRequest

// string token = 1;
inline void ConnectRequest::clear_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& ConnectRequest::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.ConnectRequest.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConnectRequest::set_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.ConnectRequest.token)
}
inline std::string* ConnectRequest::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.ConnectRequest.token)
  return _s;
}
inline const std::string& ConnectRequest::_internal_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_.Get();
}
inline void ConnectRequest::_internal_set_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(value, GetArena());
}
inline std::string* ConnectRequest::_internal_mutable_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* ConnectRequest::release_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.ConnectRequest.token)
  return _impl_.token_.Release();
}
inline void ConnectRequest::set_allocated_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.ConnectRequest.token)
}

// bytes data = 2;
inline void ConnectRequest::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ConnectRequest::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.ConnectRequest.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConnectRequest::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.ConnectRequest.data)
}
inline std::string* ConnectRequest::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.ConnectRequest.data)
  return _s;
}
inline const std::string& ConnectRequest::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void ConnectRequest::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* ConnectRequest::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* ConnectRequest::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.ConnectRequest.data)
  return _impl_.data_.Release();
}
inline void ConnectRequest::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.ConnectRequest.data)
}

// map<string, .centrifugal.centrifuge.protocol.SubscribeRequest> subs = 3;
inline int ConnectRequest::_internal_subs_size() const {
  return _internal_subs().size();
}
inline int ConnectRequest::subs_size() const {
  return _internal_subs_size();
}
inline void ConnectRequest::clear_subs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subs_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeRequest>& ConnectRequest::_internal_subs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subs_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeRequest>& ConnectRequest::subs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:centrifugal.centrifuge.protocol.ConnectRequest.subs)
  return _internal_subs();
}
inline ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeRequest>* ConnectRequest::_internal_mutable_subs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subs_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeRequest>* ConnectRequest::mutable_subs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:centrifugal.centrifuge.protocol.ConnectRequest.subs)
  return _internal_mutable_subs();
}

// string name = 4;
inline void ConnectRequest::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ConnectRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.ConnectRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConnectRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.ConnectRequest.name)
}
inline std::string* ConnectRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.ConnectRequest.name)
  return _s;
}
inline const std::string& ConnectRequest::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void ConnectRequest::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ConnectRequest::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ConnectRequest::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.ConnectRequest.name)
  return _impl_.name_.Release();
}
inline void ConnectRequest::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.ConnectRequest.name)
}

// string version = 5;
inline void ConnectRequest::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& ConnectRequest::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.ConnectRequest.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConnectRequest::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.ConnectRequest.version)
}
inline std::string* ConnectRequest::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.ConnectRequest.version)
  return _s;
}
inline const std::string& ConnectRequest::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void ConnectRequest::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* ConnectRequest::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* ConnectRequest::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.ConnectRequest.version)
  return _impl_.version_.Release();
}
inline void ConnectRequest::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.ConnectRequest.version)
}

// map<string, string> headers = 6;
inline int ConnectRequest::_internal_headers_size() const {
  return _internal_headers().size();
}
inline int ConnectRequest::headers_size() const {
  return _internal_headers_size();
}
inline void ConnectRequest::clear_headers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.headers_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& ConnectRequest::_internal_headers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.headers_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& ConnectRequest::headers() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:centrifugal.centrifuge.protocol.ConnectRequest.headers)
  return _internal_headers();
}
inline ::google::protobuf::Map<std::string, std::string>* ConnectRequest::_internal_mutable_headers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.headers_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* ConnectRequest::mutable_headers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:centrifugal.centrifuge.protocol.ConnectRequest.headers)
  return _internal_mutable_headers();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ConnectResult

// string client = 1;
inline void ConnectResult::clear_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_.ClearToEmpty();
}
inline const std::string& ConnectResult::client() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.ConnectResult.client)
  return _internal_client();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConnectResult::set_client(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.ConnectResult.client)
}
inline std::string* ConnectResult::mutable_client() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.ConnectResult.client)
  return _s;
}
inline const std::string& ConnectResult::_internal_client() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_.Get();
}
inline void ConnectResult::_internal_set_client(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_.Set(value, GetArena());
}
inline std::string* ConnectResult::_internal_mutable_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_.Mutable( GetArena());
}
inline std::string* ConnectResult::release_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.ConnectResult.client)
  return _impl_.client_.Release();
}
inline void ConnectResult::set_allocated_client(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_.IsDefault()) {
    _impl_.client_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.ConnectResult.client)
}

// string version = 2;
inline void ConnectResult::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& ConnectResult::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.ConnectResult.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConnectResult::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.ConnectResult.version)
}
inline std::string* ConnectResult::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.ConnectResult.version)
  return _s;
}
inline const std::string& ConnectResult::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void ConnectResult::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* ConnectResult::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* ConnectResult::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.ConnectResult.version)
  return _impl_.version_.Release();
}
inline void ConnectResult::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.ConnectResult.version)
}

// bool expires = 3;
inline void ConnectResult::clear_expires() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_ = false;
}
inline bool ConnectResult::expires() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.ConnectResult.expires)
  return _internal_expires();
}
inline void ConnectResult::set_expires(bool value) {
  _internal_set_expires(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.ConnectResult.expires)
}
inline bool ConnectResult::_internal_expires() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expires_;
}
inline void ConnectResult::_internal_set_expires(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_ = value;
}

// uint32 ttl = 4;
inline void ConnectResult::clear_ttl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ttl_ = 0u;
}
inline ::uint32_t ConnectResult::ttl() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.ConnectResult.ttl)
  return _internal_ttl();
}
inline void ConnectResult::set_ttl(::uint32_t value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.ConnectResult.ttl)
}
inline ::uint32_t ConnectResult::_internal_ttl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ttl_;
}
inline void ConnectResult::_internal_set_ttl(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ttl_ = value;
}

// bytes data = 5;
inline void ConnectResult::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ConnectResult::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.ConnectResult.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConnectResult::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.ConnectResult.data)
}
inline std::string* ConnectResult::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.ConnectResult.data)
  return _s;
}
inline const std::string& ConnectResult::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void ConnectResult::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* ConnectResult::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* ConnectResult::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.ConnectResult.data)
  return _impl_.data_.Release();
}
inline void ConnectResult::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.ConnectResult.data)
}

// map<string, .centrifugal.centrifuge.protocol.SubscribeResult> subs = 6;
inline int ConnectResult::_internal_subs_size() const {
  return _internal_subs().size();
}
inline int ConnectResult::subs_size() const {
  return _internal_subs_size();
}
inline void ConnectResult::clear_subs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subs_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeResult>& ConnectResult::_internal_subs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subs_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeResult>& ConnectResult::subs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:centrifugal.centrifuge.protocol.ConnectResult.subs)
  return _internal_subs();
}
inline ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeResult>* ConnectResult::_internal_mutable_subs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subs_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::SubscribeResult>* ConnectResult::mutable_subs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:centrifugal.centrifuge.protocol.ConnectResult.subs)
  return _internal_mutable_subs();
}

// uint32 ping = 7;
inline void ConnectResult::clear_ping() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ping_ = 0u;
}
inline ::uint32_t ConnectResult::ping() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.ConnectResult.ping)
  return _internal_ping();
}
inline void ConnectResult::set_ping(::uint32_t value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.ConnectResult.ping)
}
inline ::uint32_t ConnectResult::_internal_ping() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ping_;
}
inline void ConnectResult::_internal_set_ping(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ping_ = value;
}

// bool pong = 8;
inline void ConnectResult::clear_pong() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pong_ = false;
}
inline bool ConnectResult::pong() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.ConnectResult.pong)
  return _internal_pong();
}
inline void ConnectResult::set_pong(bool value) {
  _internal_set_pong(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.ConnectResult.pong)
}
inline bool ConnectResult::_internal_pong() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pong_;
}
inline void ConnectResult::_internal_set_pong(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pong_ = value;
}

// string session = 9;
inline void ConnectResult::clear_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_.ClearToEmpty();
}
inline const std::string& ConnectResult::session() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.ConnectResult.session)
  return _internal_session();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConnectResult::set_session(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.ConnectResult.session)
}
inline std::string* ConnectResult::mutable_session() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.ConnectResult.session)
  return _s;
}
inline const std::string& ConnectResult::_internal_session() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_.Get();
}
inline void ConnectResult::_internal_set_session(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_.Set(value, GetArena());
}
inline std::string* ConnectResult::_internal_mutable_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_.Mutable( GetArena());
}
inline std::string* ConnectResult::release_session() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.ConnectResult.session)
  return _impl_.session_.Release();
}
inline void ConnectResult::set_allocated_session(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_.IsDefault()) {
    _impl_.session_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.ConnectResult.session)
}

// string node = 10;
inline void ConnectResult::clear_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.ClearToEmpty();
}
inline const std::string& ConnectResult::node() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.ConnectResult.node)
  return _internal_node();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConnectResult::set_node(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.ConnectResult.node)
}
inline std::string* ConnectResult::mutable_node() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.ConnectResult.node)
  return _s;
}
inline const std::string& ConnectResult::_internal_node() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_.Get();
}
inline void ConnectResult::_internal_set_node(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.Set(value, GetArena());
}
inline std::string* ConnectResult::_internal_mutable_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.node_.Mutable( GetArena());
}
inline std::string* ConnectResult::release_node() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.ConnectResult.node)
  return _impl_.node_.Release();
}
inline void ConnectResult::set_allocated_node(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_.IsDefault()) {
    _impl_.node_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.ConnectResult.node)
}

// int64 time = 11;
inline void ConnectResult::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ = ::int64_t{0};
}
inline ::int64_t ConnectResult::time() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.ConnectResult.time)
  return _internal_time();
}
inline void ConnectResult::set_time(::int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.ConnectResult.time)
}
inline ::int64_t ConnectResult::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_;
}
inline void ConnectResult::_internal_set_time(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ = value;
}

// -------------------------------------------------------------------

// RefreshRequest

// string token = 1;
inline void RefreshRequest::clear_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& RefreshRequest::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.RefreshRequest.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RefreshRequest::set_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.RefreshRequest.token)
}
inline std::string* RefreshRequest::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.RefreshRequest.token)
  return _s;
}
inline const std::string& RefreshRequest::_internal_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_.Get();
}
inline void RefreshRequest::_internal_set_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(value, GetArena());
}
inline std::string* RefreshRequest::_internal_mutable_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* RefreshRequest::release_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.RefreshRequest.token)
  return _impl_.token_.Release();
}
inline void RefreshRequest::set_allocated_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.RefreshRequest.token)
}

// -------------------------------------------------------------------

// RefreshResult

// string client = 1;
inline void RefreshResult::clear_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_.ClearToEmpty();
}
inline const std::string& RefreshResult::client() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.RefreshResult.client)
  return _internal_client();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RefreshResult::set_client(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.RefreshResult.client)
}
inline std::string* RefreshResult::mutable_client() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.RefreshResult.client)
  return _s;
}
inline const std::string& RefreshResult::_internal_client() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_.Get();
}
inline void RefreshResult::_internal_set_client(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_.Set(value, GetArena());
}
inline std::string* RefreshResult::_internal_mutable_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_.Mutable( GetArena());
}
inline std::string* RefreshResult::release_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.RefreshResult.client)
  return _impl_.client_.Release();
}
inline void RefreshResult::set_allocated_client(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_.IsDefault()) {
    _impl_.client_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.RefreshResult.client)
}

// string version = 2;
inline void RefreshResult::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& RefreshResult::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.RefreshResult.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RefreshResult::set_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.RefreshResult.version)
}
inline std::string* RefreshResult::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.RefreshResult.version)
  return _s;
}
inline const std::string& RefreshResult::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void RefreshResult::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.Set(value, GetArena());
}
inline std::string* RefreshResult::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* RefreshResult::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.RefreshResult.version)
  return _impl_.version_.Release();
}
inline void RefreshResult::set_allocated_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.RefreshResult.version)
}

// bool expires = 3;
inline void RefreshResult::clear_expires() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_ = false;
}
inline bool RefreshResult::expires() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.RefreshResult.expires)
  return _internal_expires();
}
inline void RefreshResult::set_expires(bool value) {
  _internal_set_expires(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.RefreshResult.expires)
}
inline bool RefreshResult::_internal_expires() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expires_;
}
inline void RefreshResult::_internal_set_expires(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_ = value;
}

// uint32 ttl = 4;
inline void RefreshResult::clear_ttl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ttl_ = 0u;
}
inline ::uint32_t RefreshResult::ttl() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.RefreshResult.ttl)
  return _internal_ttl();
}
inline void RefreshResult::set_ttl(::uint32_t value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.RefreshResult.ttl)
}
inline ::uint32_t RefreshResult::_internal_ttl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ttl_;
}
inline void RefreshResult::_internal_set_ttl(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ttl_ = value;
}

// -------------------------------------------------------------------

// SubscribeRequest

// string channel = 1;
inline void SubscribeRequest::clear_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.ClearToEmpty();
}
inline const std::string& SubscribeRequest::channel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeRequest.channel)
  return _internal_channel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscribeRequest::set_channel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeRequest.channel)
}
inline std::string* SubscribeRequest::mutable_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.SubscribeRequest.channel)
  return _s;
}
inline const std::string& SubscribeRequest::_internal_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_.Get();
}
inline void SubscribeRequest::_internal_set_channel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.Set(value, GetArena());
}
inline std::string* SubscribeRequest::_internal_mutable_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.channel_.Mutable( GetArena());
}
inline std::string* SubscribeRequest::release_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.SubscribeRequest.channel)
  return _impl_.channel_.Release();
}
inline void SubscribeRequest::set_allocated_channel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.channel_.IsDefault()) {
    _impl_.channel_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.SubscribeRequest.channel)
}

// string token = 2;
inline void SubscribeRequest::clear_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& SubscribeRequest::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeRequest.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscribeRequest::set_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeRequest.token)
}
inline std::string* SubscribeRequest::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.SubscribeRequest.token)
  return _s;
}
inline const std::string& SubscribeRequest::_internal_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_.Get();
}
inline void SubscribeRequest::_internal_set_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(value, GetArena());
}
inline std::string* SubscribeRequest::_internal_mutable_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* SubscribeRequest::release_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.SubscribeRequest.token)
  return _impl_.token_.Release();
}
inline void SubscribeRequest::set_allocated_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.SubscribeRequest.token)
}

// bool recover = 3;
inline void SubscribeRequest::clear_recover() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recover_ = false;
}
inline bool SubscribeRequest::recover() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeRequest.recover)
  return _internal_recover();
}
inline void SubscribeRequest::set_recover(bool value) {
  _internal_set_recover(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeRequest.recover)
}
inline bool SubscribeRequest::_internal_recover() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recover_;
}
inline void SubscribeRequest::_internal_set_recover(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recover_ = value;
}

// string epoch = 6;
inline void SubscribeRequest::clear_epoch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.ClearToEmpty();
}
inline const std::string& SubscribeRequest::epoch() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeRequest.epoch)
  return _internal_epoch();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscribeRequest::set_epoch(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeRequest.epoch)
}
inline std::string* SubscribeRequest::mutable_epoch() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_epoch();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.SubscribeRequest.epoch)
  return _s;
}
inline const std::string& SubscribeRequest::_internal_epoch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.epoch_.Get();
}
inline void SubscribeRequest::_internal_set_epoch(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.Set(value, GetArena());
}
inline std::string* SubscribeRequest::_internal_mutable_epoch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.epoch_.Mutable( GetArena());
}
inline std::string* SubscribeRequest::release_epoch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.SubscribeRequest.epoch)
  return _impl_.epoch_.Release();
}
inline void SubscribeRequest::set_allocated_epoch(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.epoch_.IsDefault()) {
    _impl_.epoch_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.SubscribeRequest.epoch)
}

// uint64 offset = 7;
inline void SubscribeRequest::clear_offset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = ::uint64_t{0u};
}
inline ::uint64_t SubscribeRequest::offset() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeRequest.offset)
  return _internal_offset();
}
inline void SubscribeRequest::set_offset(::uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeRequest.offset)
}
inline ::uint64_t SubscribeRequest::_internal_offset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.offset_;
}
inline void SubscribeRequest::_internal_set_offset(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = value;
}

// bytes data = 8;
inline void SubscribeRequest::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& SubscribeRequest::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeRequest.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscribeRequest::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeRequest.data)
}
inline std::string* SubscribeRequest::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.SubscribeRequest.data)
  return _s;
}
inline const std::string& SubscribeRequest::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void SubscribeRequest::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* SubscribeRequest::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* SubscribeRequest::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.SubscribeRequest.data)
  return _impl_.data_.Release();
}
inline void SubscribeRequest::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.SubscribeRequest.data)
}

// bool positioned = 9;
inline void SubscribeRequest::clear_positioned() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positioned_ = false;
}
inline bool SubscribeRequest::positioned() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeRequest.positioned)
  return _internal_positioned();
}
inline void SubscribeRequest::set_positioned(bool value) {
  _internal_set_positioned(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeRequest.positioned)
}
inline bool SubscribeRequest::_internal_positioned() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.positioned_;
}
inline void SubscribeRequest::_internal_set_positioned(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positioned_ = value;
}

// bool recoverable = 10;
inline void SubscribeRequest::clear_recoverable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recoverable_ = false;
}
inline bool SubscribeRequest::recoverable() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeRequest.recoverable)
  return _internal_recoverable();
}
inline void SubscribeRequest::set_recoverable(bool value) {
  _internal_set_recoverable(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeRequest.recoverable)
}
inline bool SubscribeRequest::_internal_recoverable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recoverable_;
}
inline void SubscribeRequest::_internal_set_recoverable(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recoverable_ = value;
}

// bool join_leave = 11;
inline void SubscribeRequest::clear_join_leave() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.join_leave_ = false;
}
inline bool SubscribeRequest::join_leave() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeRequest.join_leave)
  return _internal_join_leave();
}
inline void SubscribeRequest::set_join_leave(bool value) {
  _internal_set_join_leave(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeRequest.join_leave)
}
inline bool SubscribeRequest::_internal_join_leave() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.join_leave_;
}
inline void SubscribeRequest::_internal_set_join_leave(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.join_leave_ = value;
}

// string delta = 12;
inline void SubscribeRequest::clear_delta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delta_.ClearToEmpty();
}
inline const std::string& SubscribeRequest::delta() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeRequest.delta)
  return _internal_delta();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscribeRequest::set_delta(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delta_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeRequest.delta)
}
inline std::string* SubscribeRequest::mutable_delta() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_delta();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.SubscribeRequest.delta)
  return _s;
}
inline const std::string& SubscribeRequest::_internal_delta() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.delta_.Get();
}
inline void SubscribeRequest::_internal_set_delta(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delta_.Set(value, GetArena());
}
inline std::string* SubscribeRequest::_internal_mutable_delta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.delta_.Mutable( GetArena());
}
inline std::string* SubscribeRequest::release_delta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.SubscribeRequest.delta)
  return _impl_.delta_.Release();
}
inline void SubscribeRequest::set_allocated_delta(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delta_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.delta_.IsDefault()) {
    _impl_.delta_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.SubscribeRequest.delta)
}

// -------------------------------------------------------------------

// SubscribeResult

// bool expires = 1;
inline void SubscribeResult::clear_expires() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_ = false;
}
inline bool SubscribeResult::expires() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeResult.expires)
  return _internal_expires();
}
inline void SubscribeResult::set_expires(bool value) {
  _internal_set_expires(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeResult.expires)
}
inline bool SubscribeResult::_internal_expires() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expires_;
}
inline void SubscribeResult::_internal_set_expires(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_ = value;
}

// uint32 ttl = 2;
inline void SubscribeResult::clear_ttl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ttl_ = 0u;
}
inline ::uint32_t SubscribeResult::ttl() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeResult.ttl)
  return _internal_ttl();
}
inline void SubscribeResult::set_ttl(::uint32_t value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeResult.ttl)
}
inline ::uint32_t SubscribeResult::_internal_ttl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ttl_;
}
inline void SubscribeResult::_internal_set_ttl(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ttl_ = value;
}

// bool recoverable = 3;
inline void SubscribeResult::clear_recoverable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recoverable_ = false;
}
inline bool SubscribeResult::recoverable() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeResult.recoverable)
  return _internal_recoverable();
}
inline void SubscribeResult::set_recoverable(bool value) {
  _internal_set_recoverable(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeResult.recoverable)
}
inline bool SubscribeResult::_internal_recoverable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recoverable_;
}
inline void SubscribeResult::_internal_set_recoverable(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recoverable_ = value;
}

// string epoch = 6;
inline void SubscribeResult::clear_epoch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.ClearToEmpty();
}
inline const std::string& SubscribeResult::epoch() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeResult.epoch)
  return _internal_epoch();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscribeResult::set_epoch(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeResult.epoch)
}
inline std::string* SubscribeResult::mutable_epoch() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_epoch();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.SubscribeResult.epoch)
  return _s;
}
inline const std::string& SubscribeResult::_internal_epoch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.epoch_.Get();
}
inline void SubscribeResult::_internal_set_epoch(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.Set(value, GetArena());
}
inline std::string* SubscribeResult::_internal_mutable_epoch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.epoch_.Mutable( GetArena());
}
inline std::string* SubscribeResult::release_epoch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.SubscribeResult.epoch)
  return _impl_.epoch_.Release();
}
inline void SubscribeResult::set_allocated_epoch(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.epoch_.IsDefault()) {
    _impl_.epoch_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.SubscribeResult.epoch)
}

// repeated .centrifugal.centrifuge.protocol.Publication publications = 7;
inline int SubscribeResult::_internal_publications_size() const {
  return _internal_publications().size();
}
inline int SubscribeResult::publications_size() const {
  return _internal_publications_size();
}
inline void SubscribeResult::clear_publications() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.publications_.Clear();
}
inline ::centrifugal::centrifuge::protocol::Publication* SubscribeResult::mutable_publications(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.SubscribeResult.publications)
  return _internal_mutable_publications()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::centrifugal::centrifuge::protocol::Publication>* SubscribeResult::mutable_publications()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:centrifugal.centrifuge.protocol.SubscribeResult.publications)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_publications();
}
inline const ::centrifugal::centrifuge::protocol::Publication& SubscribeResult::publications(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeResult.publications)
  return _internal_publications().Get(index);
}
inline ::centrifugal::centrifuge::protocol::Publication* SubscribeResult::add_publications() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::centrifugal::centrifuge::protocol::Publication* _add = _internal_mutable_publications()->Add();
  // @@protoc_insertion_point(field_add:centrifugal.centrifuge.protocol.SubscribeResult.publications)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::centrifugal::centrifuge::protocol::Publication>& SubscribeResult::publications() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:centrifugal.centrifuge.protocol.SubscribeResult.publications)
  return _internal_publications();
}
inline const ::google::protobuf::RepeatedPtrField<::centrifugal::centrifuge::protocol::Publication>&
SubscribeResult::_internal_publications() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.publications_;
}
inline ::google::protobuf::RepeatedPtrField<::centrifugal::centrifuge::protocol::Publication>*
SubscribeResult::_internal_mutable_publications() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.publications_;
}

// bool recovered = 8;
inline void SubscribeResult::clear_recovered() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recovered_ = false;
}
inline bool SubscribeResult::recovered() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeResult.recovered)
  return _internal_recovered();
}
inline void SubscribeResult::set_recovered(bool value) {
  _internal_set_recovered(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeResult.recovered)
}
inline bool SubscribeResult::_internal_recovered() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recovered_;
}
inline void SubscribeResult::_internal_set_recovered(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recovered_ = value;
}

// uint64 offset = 9;
inline void SubscribeResult::clear_offset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = ::uint64_t{0u};
}
inline ::uint64_t SubscribeResult::offset() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeResult.offset)
  return _internal_offset();
}
inline void SubscribeResult::set_offset(::uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeResult.offset)
}
inline ::uint64_t SubscribeResult::_internal_offset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.offset_;
}
inline void SubscribeResult::_internal_set_offset(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = value;
}

// bool positioned = 10;
inline void SubscribeResult::clear_positioned() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positioned_ = false;
}
inline bool SubscribeResult::positioned() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeResult.positioned)
  return _internal_positioned();
}
inline void SubscribeResult::set_positioned(bool value) {
  _internal_set_positioned(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeResult.positioned)
}
inline bool SubscribeResult::_internal_positioned() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.positioned_;
}
inline void SubscribeResult::_internal_set_positioned(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positioned_ = value;
}

// bytes data = 11;
inline void SubscribeResult::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& SubscribeResult::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeResult.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscribeResult::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeResult.data)
}
inline std::string* SubscribeResult::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.SubscribeResult.data)
  return _s;
}
inline const std::string& SubscribeResult::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void SubscribeResult::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* SubscribeResult::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* SubscribeResult::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.SubscribeResult.data)
  return _impl_.data_.Release();
}
inline void SubscribeResult::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.SubscribeResult.data)
}

// bool was_recovering = 12;
inline void SubscribeResult::clear_was_recovering() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.was_recovering_ = false;
}
inline bool SubscribeResult::was_recovering() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeResult.was_recovering)
  return _internal_was_recovering();
}
inline void SubscribeResult::set_was_recovering(bool value) {
  _internal_set_was_recovering(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeResult.was_recovering)
}
inline bool SubscribeResult::_internal_was_recovering() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.was_recovering_;
}
inline void SubscribeResult::_internal_set_was_recovering(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.was_recovering_ = value;
}

// bool delta = 13;
inline void SubscribeResult::clear_delta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delta_ = false;
}
inline bool SubscribeResult::delta() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubscribeResult.delta)
  return _internal_delta();
}
inline void SubscribeResult::set_delta(bool value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubscribeResult.delta)
}
inline bool SubscribeResult::_internal_delta() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.delta_;
}
inline void SubscribeResult::_internal_set_delta(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.delta_ = value;
}

// -------------------------------------------------------------------

// SubRefreshRequest

// string channel = 1;
inline void SubRefreshRequest::clear_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.ClearToEmpty();
}
inline const std::string& SubRefreshRequest::channel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubRefreshRequest.channel)
  return _internal_channel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubRefreshRequest::set_channel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubRefreshRequest.channel)
}
inline std::string* SubRefreshRequest::mutable_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.SubRefreshRequest.channel)
  return _s;
}
inline const std::string& SubRefreshRequest::_internal_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_.Get();
}
inline void SubRefreshRequest::_internal_set_channel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.Set(value, GetArena());
}
inline std::string* SubRefreshRequest::_internal_mutable_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.channel_.Mutable( GetArena());
}
inline std::string* SubRefreshRequest::release_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.SubRefreshRequest.channel)
  return _impl_.channel_.Release();
}
inline void SubRefreshRequest::set_allocated_channel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.channel_.IsDefault()) {
    _impl_.channel_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.SubRefreshRequest.channel)
}

// string token = 2;
inline void SubRefreshRequest::clear_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& SubRefreshRequest::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubRefreshRequest.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubRefreshRequest::set_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubRefreshRequest.token)
}
inline std::string* SubRefreshRequest::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.SubRefreshRequest.token)
  return _s;
}
inline const std::string& SubRefreshRequest::_internal_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_.Get();
}
inline void SubRefreshRequest::_internal_set_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(value, GetArena());
}
inline std::string* SubRefreshRequest::_internal_mutable_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* SubRefreshRequest::release_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.SubRefreshRequest.token)
  return _impl_.token_.Release();
}
inline void SubRefreshRequest::set_allocated_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.SubRefreshRequest.token)
}

// -------------------------------------------------------------------

// SubRefreshResult

// bool expires = 1;
inline void SubRefreshResult::clear_expires() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_ = false;
}
inline bool SubRefreshResult::expires() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubRefreshResult.expires)
  return _internal_expires();
}
inline void SubRefreshResult::set_expires(bool value) {
  _internal_set_expires(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubRefreshResult.expires)
}
inline bool SubRefreshResult::_internal_expires() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expires_;
}
inline void SubRefreshResult::_internal_set_expires(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expires_ = value;
}

// uint32 ttl = 2;
inline void SubRefreshResult::clear_ttl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ttl_ = 0u;
}
inline ::uint32_t SubRefreshResult::ttl() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SubRefreshResult.ttl)
  return _internal_ttl();
}
inline void SubRefreshResult::set_ttl(::uint32_t value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SubRefreshResult.ttl)
}
inline ::uint32_t SubRefreshResult::_internal_ttl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ttl_;
}
inline void SubRefreshResult::_internal_set_ttl(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ttl_ = value;
}

// -------------------------------------------------------------------

// UnsubscribeRequest

// string channel = 1;
inline void UnsubscribeRequest::clear_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.ClearToEmpty();
}
inline const std::string& UnsubscribeRequest::channel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.UnsubscribeRequest.channel)
  return _internal_channel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UnsubscribeRequest::set_channel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.UnsubscribeRequest.channel)
}
inline std::string* UnsubscribeRequest::mutable_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.UnsubscribeRequest.channel)
  return _s;
}
inline const std::string& UnsubscribeRequest::_internal_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_.Get();
}
inline void UnsubscribeRequest::_internal_set_channel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.Set(value, GetArena());
}
inline std::string* UnsubscribeRequest::_internal_mutable_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.channel_.Mutable( GetArena());
}
inline std::string* UnsubscribeRequest::release_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.UnsubscribeRequest.channel)
  return _impl_.channel_.Release();
}
inline void UnsubscribeRequest::set_allocated_channel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.channel_.IsDefault()) {
    _impl_.channel_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.UnsubscribeRequest.channel)
}

// -------------------------------------------------------------------

// UnsubscribeResult

// -------------------------------------------------------------------

// PublishRequest

// string channel = 1;
inline void PublishRequest::clear_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.ClearToEmpty();
}
inline const std::string& PublishRequest::channel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.PublishRequest.channel)
  return _internal_channel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PublishRequest::set_channel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.PublishRequest.channel)
}
inline std::string* PublishRequest::mutable_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.PublishRequest.channel)
  return _s;
}
inline const std::string& PublishRequest::_internal_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_.Get();
}
inline void PublishRequest::_internal_set_channel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.Set(value, GetArena());
}
inline std::string* PublishRequest::_internal_mutable_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.channel_.Mutable( GetArena());
}
inline std::string* PublishRequest::release_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.PublishRequest.channel)
  return _impl_.channel_.Release();
}
inline void PublishRequest::set_allocated_channel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.channel_.IsDefault()) {
    _impl_.channel_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.PublishRequest.channel)
}

// bytes data = 2;
inline void PublishRequest::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& PublishRequest::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.PublishRequest.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PublishRequest::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.PublishRequest.data)
}
inline std::string* PublishRequest::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.PublishRequest.data)
  return _s;
}
inline const std::string& PublishRequest::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void PublishRequest::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* PublishRequest::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* PublishRequest::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.PublishRequest.data)
  return _impl_.data_.Release();
}
inline void PublishRequest::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.PublishRequest.data)
}

// -------------------------------------------------------------------

// PublishResult

// -------------------------------------------------------------------

// PresenceRequest

// string channel = 1;
inline void PresenceRequest::clear_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.ClearToEmpty();
}
inline const std::string& PresenceRequest::channel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.PresenceRequest.channel)
  return _internal_channel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PresenceRequest::set_channel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.PresenceRequest.channel)
}
inline std::string* PresenceRequest::mutable_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.PresenceRequest.channel)
  return _s;
}
inline const std::string& PresenceRequest::_internal_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_.Get();
}
inline void PresenceRequest::_internal_set_channel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.Set(value, GetArena());
}
inline std::string* PresenceRequest::_internal_mutable_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.channel_.Mutable( GetArena());
}
inline std::string* PresenceRequest::release_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.PresenceRequest.channel)
  return _impl_.channel_.Release();
}
inline void PresenceRequest::set_allocated_channel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.channel_.IsDefault()) {
    _impl_.channel_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.PresenceRequest.channel)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PresenceResult

// map<string, .centrifugal.centrifuge.protocol.ClientInfo> presence = 1;
inline int PresenceResult::_internal_presence_size() const {
  return _internal_presence().size();
}
inline int PresenceResult::presence_size() const {
  return _internal_presence_size();
}
inline void PresenceResult::clear_presence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.presence_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::ClientInfo>& PresenceResult::_internal_presence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.presence_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::ClientInfo>& PresenceResult::presence() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:centrifugal.centrifuge.protocol.PresenceResult.presence)
  return _internal_presence();
}
inline ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::ClientInfo>* PresenceResult::_internal_mutable_presence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.presence_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::centrifugal::centrifuge::protocol::ClientInfo>* PresenceResult::mutable_presence() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:centrifugal.centrifuge.protocol.PresenceResult.presence)
  return _internal_mutable_presence();
}

// -------------------------------------------------------------------

// PresenceStatsRequest

// string channel = 1;
inline void PresenceStatsRequest::clear_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.ClearToEmpty();
}
inline const std::string& PresenceStatsRequest::channel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.PresenceStatsRequest.channel)
  return _internal_channel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PresenceStatsRequest::set_channel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.PresenceStatsRequest.channel)
}
inline std::string* PresenceStatsRequest::mutable_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.PresenceStatsRequest.channel)
  return _s;
}
inline const std::string& PresenceStatsRequest::_internal_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_.Get();
}
inline void PresenceStatsRequest::_internal_set_channel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.Set(value, GetArena());
}
inline std::string* PresenceStatsRequest::_internal_mutable_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.channel_.Mutable( GetArena());
}
inline std::string* PresenceStatsRequest::release_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.PresenceStatsRequest.channel)
  return _impl_.channel_.Release();
}
inline void PresenceStatsRequest::set_allocated_channel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.channel_.IsDefault()) {
    _impl_.channel_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.PresenceStatsRequest.channel)
}

// -------------------------------------------------------------------

// PresenceStatsResult

// uint32 num_clients = 1;
inline void PresenceStatsResult::clear_num_clients() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_clients_ = 0u;
}
inline ::uint32_t PresenceStatsResult::num_clients() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.PresenceStatsResult.num_clients)
  return _internal_num_clients();
}
inline void PresenceStatsResult::set_num_clients(::uint32_t value) {
  _internal_set_num_clients(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.PresenceStatsResult.num_clients)
}
inline ::uint32_t PresenceStatsResult::_internal_num_clients() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_clients_;
}
inline void PresenceStatsResult::_internal_set_num_clients(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_clients_ = value;
}

// uint32 num_users = 2;
inline void PresenceStatsResult::clear_num_users() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_users_ = 0u;
}
inline ::uint32_t PresenceStatsResult::num_users() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.PresenceStatsResult.num_users)
  return _internal_num_users();
}
inline void PresenceStatsResult::set_num_users(::uint32_t value) {
  _internal_set_num_users(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.PresenceStatsResult.num_users)
}
inline ::uint32_t PresenceStatsResult::_internal_num_users() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_users_;
}
inline void PresenceStatsResult::_internal_set_num_users(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_users_ = value;
}

// -------------------------------------------------------------------

// StreamPosition

// uint64 offset = 1;
inline void StreamPosition::clear_offset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = ::uint64_t{0u};
}
inline ::uint64_t StreamPosition::offset() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.StreamPosition.offset)
  return _internal_offset();
}
inline void StreamPosition::set_offset(::uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.StreamPosition.offset)
}
inline ::uint64_t StreamPosition::_internal_offset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.offset_;
}
inline void StreamPosition::_internal_set_offset(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = value;
}

// string epoch = 2;
inline void StreamPosition::clear_epoch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.ClearToEmpty();
}
inline const std::string& StreamPosition::epoch() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.StreamPosition.epoch)
  return _internal_epoch();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamPosition::set_epoch(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.StreamPosition.epoch)
}
inline std::string* StreamPosition::mutable_epoch() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_epoch();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.StreamPosition.epoch)
  return _s;
}
inline const std::string& StreamPosition::_internal_epoch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.epoch_.Get();
}
inline void StreamPosition::_internal_set_epoch(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.Set(value, GetArena());
}
inline std::string* StreamPosition::_internal_mutable_epoch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.epoch_.Mutable( GetArena());
}
inline std::string* StreamPosition::release_epoch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.StreamPosition.epoch)
  return _impl_.epoch_.Release();
}
inline void StreamPosition::set_allocated_epoch(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.epoch_.IsDefault()) {
    _impl_.epoch_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.StreamPosition.epoch)
}

// -------------------------------------------------------------------

// HistoryRequest

// string channel = 1;
inline void HistoryRequest::clear_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.ClearToEmpty();
}
inline const std::string& HistoryRequest::channel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.HistoryRequest.channel)
  return _internal_channel();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HistoryRequest::set_channel(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.HistoryRequest.channel)
}
inline std::string* HistoryRequest::mutable_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.HistoryRequest.channel)
  return _s;
}
inline const std::string& HistoryRequest::_internal_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_.Get();
}
inline void HistoryRequest::_internal_set_channel(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.Set(value, GetArena());
}
inline std::string* HistoryRequest::_internal_mutable_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.channel_.Mutable( GetArena());
}
inline std::string* HistoryRequest::release_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.HistoryRequest.channel)
  return _impl_.channel_.Release();
}
inline void HistoryRequest::set_allocated_channel(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.channel_.IsDefault()) {
    _impl_.channel_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.HistoryRequest.channel)
}

// int32 limit = 7;
inline void HistoryRequest::clear_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = 0;
}
inline ::int32_t HistoryRequest::limit() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.HistoryRequest.limit)
  return _internal_limit();
}
inline void HistoryRequest::set_limit(::int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.HistoryRequest.limit)
}
inline ::int32_t HistoryRequest::_internal_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_;
}
inline void HistoryRequest::_internal_set_limit(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = value;
}

// .centrifugal.centrifuge.protocol.StreamPosition since = 8;
inline bool HistoryRequest::has_since() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.since_ != nullptr);
  return value;
}
inline void HistoryRequest::clear_since() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.since_ != nullptr) _impl_.since_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::centrifugal::centrifuge::protocol::StreamPosition& HistoryRequest::_internal_since() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::centrifugal::centrifuge::protocol::StreamPosition* p = _impl_.since_;
  return p != nullptr ? *p : reinterpret_cast<const ::centrifugal::centrifuge::protocol::StreamPosition&>(::centrifugal::centrifuge::protocol::_StreamPosition_default_instance_);
}
inline const ::centrifugal::centrifuge::protocol::StreamPosition& HistoryRequest::since() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.HistoryRequest.since)
  return _internal_since();
}
inline void HistoryRequest::unsafe_arena_set_allocated_since(::centrifugal::centrifuge::protocol::StreamPosition* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.since_);
  }
  _impl_.since_ = reinterpret_cast<::centrifugal::centrifuge::protocol::StreamPosition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:centrifugal.centrifuge.protocol.HistoryRequest.since)
}
inline ::centrifugal::centrifuge::protocol::StreamPosition* HistoryRequest::release_since() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::centrifugal::centrifuge::protocol::StreamPosition* released = _impl_.since_;
  _impl_.since_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::centrifugal::centrifuge::protocol::StreamPosition* HistoryRequest::unsafe_arena_release_since() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.HistoryRequest.since)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::centrifugal::centrifuge::protocol::StreamPosition* temp = _impl_.since_;
  _impl_.since_ = nullptr;
  return temp;
}
inline ::centrifugal::centrifuge::protocol::StreamPosition* HistoryRequest::_internal_mutable_since() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.since_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centrifugal::centrifuge::protocol::StreamPosition>(GetArena());
    _impl_.since_ = reinterpret_cast<::centrifugal::centrifuge::protocol::StreamPosition*>(p);
  }
  return _impl_.since_;
}
inline ::centrifugal::centrifuge::protocol::StreamPosition* HistoryRequest::mutable_since() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::centrifugal::centrifuge::protocol::StreamPosition* _msg = _internal_mutable_since();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.HistoryRequest.since)
  return _msg;
}
inline void HistoryRequest::set_allocated_since(::centrifugal::centrifuge::protocol::StreamPosition* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.since_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.since_ = reinterpret_cast<::centrifugal::centrifuge::protocol::StreamPosition*>(value);
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.HistoryRequest.since)
}

// bool reverse = 9;
inline void HistoryRequest::clear_reverse() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reverse_ = false;
}
inline bool HistoryRequest::reverse() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.HistoryRequest.reverse)
  return _internal_reverse();
}
inline void HistoryRequest::set_reverse(bool value) {
  _internal_set_reverse(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.HistoryRequest.reverse)
}
inline bool HistoryRequest::_internal_reverse() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reverse_;
}
inline void HistoryRequest::_internal_set_reverse(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reverse_ = value;
}

// -------------------------------------------------------------------

// HistoryResult

// repeated .centrifugal.centrifuge.protocol.Publication publications = 1;
inline int HistoryResult::_internal_publications_size() const {
  return _internal_publications().size();
}
inline int HistoryResult::publications_size() const {
  return _internal_publications_size();
}
inline void HistoryResult::clear_publications() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.publications_.Clear();
}
inline ::centrifugal::centrifuge::protocol::Publication* HistoryResult::mutable_publications(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.HistoryResult.publications)
  return _internal_mutable_publications()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::centrifugal::centrifuge::protocol::Publication>* HistoryResult::mutable_publications()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:centrifugal.centrifuge.protocol.HistoryResult.publications)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_publications();
}
inline const ::centrifugal::centrifuge::protocol::Publication& HistoryResult::publications(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.HistoryResult.publications)
  return _internal_publications().Get(index);
}
inline ::centrifugal::centrifuge::protocol::Publication* HistoryResult::add_publications() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::centrifugal::centrifuge::protocol::Publication* _add = _internal_mutable_publications()->Add();
  // @@protoc_insertion_point(field_add:centrifugal.centrifuge.protocol.HistoryResult.publications)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::centrifugal::centrifuge::protocol::Publication>& HistoryResult::publications() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:centrifugal.centrifuge.protocol.HistoryResult.publications)
  return _internal_publications();
}
inline const ::google::protobuf::RepeatedPtrField<::centrifugal::centrifuge::protocol::Publication>&
HistoryResult::_internal_publications() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.publications_;
}
inline ::google::protobuf::RepeatedPtrField<::centrifugal::centrifuge::protocol::Publication>*
HistoryResult::_internal_mutable_publications() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.publications_;
}

// string epoch = 2;
inline void HistoryResult::clear_epoch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.ClearToEmpty();
}
inline const std::string& HistoryResult::epoch() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.HistoryResult.epoch)
  return _internal_epoch();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HistoryResult::set_epoch(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.HistoryResult.epoch)
}
inline std::string* HistoryResult::mutable_epoch() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_epoch();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.HistoryResult.epoch)
  return _s;
}
inline const std::string& HistoryResult::_internal_epoch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.epoch_.Get();
}
inline void HistoryResult::_internal_set_epoch(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.Set(value, GetArena());
}
inline std::string* HistoryResult::_internal_mutable_epoch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.epoch_.Mutable( GetArena());
}
inline std::string* HistoryResult::release_epoch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.HistoryResult.epoch)
  return _impl_.epoch_.Release();
}
inline void HistoryResult::set_allocated_epoch(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.epoch_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.epoch_.IsDefault()) {
    _impl_.epoch_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.HistoryResult.epoch)
}

// uint64 offset = 3;
inline void HistoryResult::clear_offset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = ::uint64_t{0u};
}
inline ::uint64_t HistoryResult::offset() const {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.HistoryResult.offset)
  return _internal_offset();
}
inline void HistoryResult::set_offset(::uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.HistoryResult.offset)
}
inline ::uint64_t HistoryResult::_internal_offset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.offset_;
}
inline void HistoryResult::_internal_set_offset(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = value;
}

// -------------------------------------------------------------------

// PingRequest

// -------------------------------------------------------------------

// PingResult

// -------------------------------------------------------------------

// RPCRequest

// bytes data = 1;
inline void RPCRequest::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& RPCRequest::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.RPCRequest.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RPCRequest::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.RPCRequest.data)
}
inline std::string* RPCRequest::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.RPCRequest.data)
  return _s;
}
inline const std::string& RPCRequest::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void RPCRequest::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* RPCRequest::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* RPCRequest::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.RPCRequest.data)
  return _impl_.data_.Release();
}
inline void RPCRequest::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.RPCRequest.data)
}

// string method = 2;
inline void RPCRequest::clear_method() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.method_.ClearToEmpty();
}
inline const std::string& RPCRequest::method() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.RPCRequest.method)
  return _internal_method();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RPCRequest::set_method(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.method_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.RPCRequest.method)
}
inline std::string* RPCRequest::mutable_method() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.RPCRequest.method)
  return _s;
}
inline const std::string& RPCRequest::_internal_method() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.method_.Get();
}
inline void RPCRequest::_internal_set_method(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.method_.Set(value, GetArena());
}
inline std::string* RPCRequest::_internal_mutable_method() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.method_.Mutable( GetArena());
}
inline std::string* RPCRequest::release_method() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.RPCRequest.method)
  return _impl_.method_.Release();
}
inline void RPCRequest::set_allocated_method(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.method_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.RPCRequest.method)
}

// -------------------------------------------------------------------

// RPCResult

// bytes data = 1;
inline void RPCResult::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& RPCResult::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.RPCResult.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RPCResult::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.RPCResult.data)
}
inline std::string* RPCResult::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.RPCResult.data)
  return _s;
}
inline const std::string& RPCResult::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void RPCResult::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* RPCResult::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* RPCResult::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.RPCResult.data)
  return _impl_.data_.Release();
}
inline void RPCResult::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.RPCResult.data)
}

// -------------------------------------------------------------------

// SendRequest

// bytes data = 1;
inline void SendRequest::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& SendRequest::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centrifugal.centrifuge.protocol.SendRequest.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendRequest::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centrifugal.centrifuge.protocol.SendRequest.data)
}
inline std::string* SendRequest::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:centrifugal.centrifuge.protocol.SendRequest.data)
  return _s;
}
inline const std::string& SendRequest::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void SendRequest::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* SendRequest::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* SendRequest::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:centrifugal.centrifuge.protocol.SendRequest.data)
  return _impl_.data_.Release();
}
inline void SendRequest::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:centrifugal.centrifuge.protocol.SendRequest.data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace centrifuge
}  // namespace centrifugal


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // protocol_2fclient_2eproto_2epb_2eh
